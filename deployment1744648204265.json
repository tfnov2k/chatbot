{
  "fileKey": "deployments/1744648204265.json",
  "settings": {
    "defaultLanguage": "en",
    "languages": [
      "en"
    ],
    "description": "",
    "id": "e68fd5ad-1a5a-4581-8d69-496ad157dc00",
    "inactivityTimeout": 30,
    "botVariables": [],
    "userVariables": [],
    "nodeRepetitionLimit": 3,
    "configVariables": {

    },
    "cognitiveConfigs": {
      "openAi": {

      }
    },
    "useLlmz": true,
    "defaultBestModel": "openai__gpt-4o-2024-11-20",
    "defaultFastModel": "openai__gpt-4o-mini-2024-07-18",
    "useClient": true,
    "llmzVersion": "01-Oct-2024",
    "autonomousModel": "best-model",
    "fallbackModel": "google-ai__models/gemini-2.0-flash"
  },
  "agents": {
    "SummaryAgent": {
      "enabled": true,
      "config": {
        "summaryMaxTokens": 100
      }
    },
    "TranslatorAgent": {
      "config": {
        "detectLanguage": true
      }
    },
    "KnowledgeAgent": {
      "enabled": true,
      "config": {
        "answerManually": true,
        "context": "Summary of the conversation:\n\"\"\"\n{{conversation.SummaryAgent.summary}}\n\"\"\"\n\nTranscript:\n\"\"\"\n{{conversation.SummaryAgent.transcript}}\n\"\"\"",
        "bestModel": "gpt-4-turbo",
        "strategy": "hybrid",
        "chunks": 50
      }
    },
    "PersonalityAgent": {
      "config": {
        "personality": ""
      }
    },
    "VisionAgent": {
      "enabled": true,
      "config": {
        "extractionEnabled": true
      }
    }
  },
  "flows": [
    {
      "id": "wf-error",
      "name": "Error",
      "startNode": "nd-98dc0bcc87",
      "variables": [],
      "links": [
        {
          "id": "edg-1cb5862648",
          "source": "nd-98dc0bcc87",
          "sourcePort": "trs-02c7129430",
          "target": "nd-58fca56e01"
        },
        {
          "id": "edg-1c28c96d6a",
          "source": "nd-58fca56e01",
          "sourcePort": "nd-58fca56e01",
          "target": "nd-e05f59dd66"
        }
      ],
      "nodes": [
        {
          "comment": "\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\"font-size: 18px\"\u003E‚õîÔ∏è When something goes wrong\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cbr\u003EThis workflow is executed when there's an \u003Cstrong\u003Eunexpected error\u003C/strong\u003E in one of the other workflows.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou can use this to inform the user of the situation before ending the conversation.\u003C/p\u003E",
          "type": "comment",
          "id": "nd-8ff3d7d295",
          "name": "Comment1",
          "deletable": true,
          "instructions": [],
          "height": 148,
          "width": 401,
          "x": 90,
          "y": -45
        },
        {
          "instructions": [
            {
              "id": "ins-2762f70004",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "staticValue": "Sorry, an error occurred. Please try again later",
                  "dynamicValue": "",
                  "valueType": "static"
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-58fca56e01",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-e05f59dd66"
          },
          "type": "standard",
          "id": "nd-58fca56e01",
          "name": "Handler",
          "deletable": true,
          "x": 450,
          "y": 120
        },
        {
          "id": "nd-98dc0bcc87",
          "name": "On_Error",
          "type": "entry",
          "deletable": false,
          "variables": [],
          "instructions": [
            {
              "id": "trs-02c7129430",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "nd-58fca56e01"
              },
              "transitions": [],
              "nodeId": "nd-98dc0bcc87"
            }
          ],
          "x": 90,
          "y": 120
        },
        {
          "id": "nd-e05f59dd66",
          "name": "End",
          "type": "end",
          "variables": [],
          "deletable": false,
          "instructions": [
            {
              "id": "trs-945140a646",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "END"
              },
              "transitions": [],
              "nodeId": "nd-e05f59dd66"
            }
          ],
          "x": 810,
          "y": 120
        }
      ]
    },
    {
      "id": "wf-timeout",
      "name": "Timeout",
      "startNode": "nd-9f7f3268ac",
      "variables": [],
      "links": [
        {
          "id": "edg-b0d2adcd13",
          "source": "nd-e6c012a652",
          "sourcePort": "nd-e6c012a652",
          "target": "nd-199fdcf439"
        },
        {
          "id": "edg-6d17a0591b",
          "source": "nd-9f7f3268ac",
          "sourcePort": "trs-0c7a9a0003",
          "target": "nd-e6c012a652"
        }
      ],
      "nodes": [
        {
          "instructions": [],
          "defaultTransition": {
            "targetNodeId": "nd-199fdcf439"
          },
          "type": "standard",
          "id": "nd-e6c012a652",
          "name": "Handler",
          "deletable": true,
          "x": 435,
          "y": 105
        },
        {
          "comment": "\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\"font-size: 18px\"\u003E‚åõÔ∏è When conversation times out\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cbr\u003EThis workflow is executed when the conversation \u003Cstrong\u003Etimes out\u003C/strong\u003E before it had time to flow to an \u003Cstrong\u003EEnd Node\u003C/strong\u003E.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe \u003Cstrong\u003ETimeout Delay\u003C/strong\u003E is configurable in the \u003Cstrong\u003EChatbot Settings.\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou can use this to inform the user of the situation before ending the conversation.\u003C/p\u003E",
          "type": "comment",
          "id": "nd-441efa6c42",
          "name": "Comment1",
          "deletable": true,
          "instructions": [],
          "height": 173,
          "width": 401,
          "x": 105,
          "y": -90
        },
        {
          "id": "nd-9f7f3268ac",
          "name": "On_Timeout",
          "type": "entry",
          "deletable": false,
          "variables": [],
          "instructions": [
            {
              "id": "trs-0c7a9a0003",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "nd-e6c012a652"
              },
              "transitions": []
            }
          ],
          "x": 100,
          "y": 100
        },
        {
          "id": "nd-199fdcf439",
          "name": "End",
          "type": "end",
          "variables": [],
          "deletable": false,
          "instructions": [
            {
              "id": "trs-bf76943d55",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "END"
              },
              "transitions": []
            }
          ],
          "x": 795,
          "y": 105
        }
      ]
    },
    {
      "id": "wf-conversation-end",
      "name": "Conversation End",
      "startNode": "nd-c0d3bd2c92",
      "variables": [],
      "links": [
        {
          "id": "edg-3cb8028ff6",
          "source": "nd-c0d3bd2c92",
          "sourcePort": "trs-92c6f93b0c",
          "target": "nd-2db7499cc6"
        },
        {
          "id": "edg-8a88f687a0",
          "source": "nd-2db7499cc6",
          "sourcePort": "nd-2db7499cc6",
          "target": "nd-d0c2a6be81"
        }
      ],
      "nodes": [
        {
          "instructions": [
            {
              "id": "ins-4e2fdddcfb",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Ok, goodbye. Let us know if you ever have any more questions!",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-2db7499cc6",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-d0c2a6be81"
          },
          "type": "standard",
          "id": "nd-2db7499cc6",
          "name": "Handler",
          "deletable": true,
          "x": 420,
          "y": 105
        },
        {
          "comment": "\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\"font-size: 18px\"\u003Eüëã Before Conversation Ends\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cbr\u003EThis workflow is executed when right before the conversation \u003Cstrong\u003EEnds Explicitly.\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAn \u003Cstrong\u003EExplicit Ending\u003C/strong\u003E happens when a workflow transitions on an \u003Cstrong\u003EEnd Node\u003C/strong\u003E.\u003C/p\u003E",
          "type": "comment",
          "id": "nd-6d5d3f41dd",
          "name": "Comment1",
          "deletable": true,
          "instructions": [],
          "height": 148,
          "width": 461,
          "x": 105,
          "y": -45
        },
        {
          "id": "nd-c0d3bd2c92",
          "name": "On_Explicit_Ending",
          "type": "entry",
          "deletable": false,
          "variables": [],
          "instructions": [
            {
              "id": "trs-92c6f93b0c",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "nd-2db7499cc6"
              },
              "transitions": [],
              "nodeId": "nd-c0d3bd2c92"
            }
          ],
          "x": 100,
          "y": 100
        },
        {
          "id": "nd-d0c2a6be81",
          "name": "End",
          "type": "end",
          "variables": [],
          "deletable": false,
          "instructions": [
            {
              "id": "trs-7004dbb2b6",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "END"
              },
              "transitions": [],
              "nodeId": "nd-d0c2a6be81"
            }
          ],
          "x": 780,
          "y": 105
        }
      ]
    },
    {
      "topicId": "tpc-global",
      "id": "wf-main",
      "name": "Main",
      "startNode": "nd-2bb9db230d",
      "variables": [
        {
          "id": "var-d4b2f11a6c",
          "name": "field",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-afbef90898",
          "name": "loop",
          "type": "boolean",
          "description": "",
          "scope": "workflow"
        }
      ],
      "links": [],
      "nodes": [
        {
          "id": "nd-2bb9db230d",
          "name": "Start",
          "type": "start",
          "deletable": false,
          "instructions": [
            {
              "id": "trs-8b0779edc5",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "nd-464c03796e"
              },
              "transitions": [],
              "nodeId": "nd-2bb9db230d"
            }
          ],
          "x": -105,
          "y": -180,
          "kbPriority": {
            "enabled": false,
            "searchScope": "specific",
            "kbs": []
          }
        },
        {
          "id": "nd-80ac4ff158",
          "name": "End",
          "type": "end",
          "deletable": false,
          "instructions": [
            {
              "id": "trs-0260f5e672",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "END"
              },
              "transitions": [],
              "nodeId": "nd-80ac4ff158"
            }
          ],
          "x": 1725,
          "y": 30
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 45,
          "y": -75,
          "instructions": [
            {
              "id": "ins-8e0192717b",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Welcome to the Government of Mauritius chatbot, Govt-Assist!",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-464c03796e",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-ae5f5f9579"
          },
          "id": "nd-464c03796e",
          "name": "Greeting"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 390,
          "y": -75,
          "instructions": [
            {
              "id": "ins-4150e7bfe7",
              "type": "capture",
              "entityId": "prompts://SingleChoice/v1",
              "entityName": "Single Choice",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-ae5f5f9579",
              "question": {
                "staticValue": "",
                "dynamicValue": "How may we assist you‚Äîwhich area do you need information on?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Healthcare"
                      },
                      "value": "Healthcare",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Technology"
                      },
                      "value": "Technology",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Infrastructure"
                      },
                      "value": "Infrastructure",
                      "enabled": true
                    }
                  ],
                  "dynamicValue": ""
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [
                {
                  "id": "trs-5e50cf2968",
                  "type": "transition",
                  "label": "Healthcare",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=Healthcare"
                  },
                  "destination": {
                    "node": "nd-41214a19b0"
                  }
                },
                {
                  "id": "trs-a60af787a5",
                  "type": "transition",
                  "label": "Technology",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=Technology"
                  },
                  "destination": {
                    "node": "nd-3efcbba80c"
                  }
                },
                {
                  "id": "trs-2ee83faf45",
                  "type": "transition",
                  "label": "Infrastructure",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=Infrastructure"
                  },
                  "destination": {
                    "node": "nd-2a5480bb32"
                  }
                }
              ],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Which one would you like? Choices: [ 1) Red Apple, 2) Yellow Apple, 3) Dark Banana ]\" */\ninterface Output = { choice: {{CHOICES_TYPINGS}} }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Which one would you like? Choices: [ 1) Red Apple, 2) Yellow Apple, 3) Dark Banana ]\nuser: I will go with the second one please\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"choice\":\"Yellow Apple\"}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { choice: {{CHOICES_TYPINGS}} }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-486317ade2",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "label": "always",
              "generative": {
                "label": "always",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": true
                }
              },
              "nodeId": "nd-ae5f5f9579",
              "description": "",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-ae5f5f9579",
          "name": "Category"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 840,
          "y": -255,
          "instructions": [
            {
              "id": "ins-6c7e4b9447",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "The provision of basic, universal, accessible and quality health care services, with emphasis on customer satisfaction is indispensable for a healthy and fit nation. Mauritius is one among the few countries, well-known for extending free health care facilities in public health institutions. Over the years, the healthcare sector in Mauritius has transformed itself by providing high-value activities such as hi-tech medicine, medical tourism, medical education and wellness. The challenge now is to meet the objective of universal health coverage through upgraded, renovated and new infrastructure, modern equipment, technologically-based and specialised medical services.",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-41214a19b0",
              "transitions": []
            },
            {
              "id": "ins-420cc895ef",
              "type": "skill",
              "name": "Healthcare",
              "flowId": "wf-f86babbd5d",
              "exitNodes": [
                "nd-f4b9215713"
              ],
              "transitions": [
                {
                  "id": "trs-ebfef79e8f",
                  "type": "transition",
                  "label": "Exit",
                  "condition": {
                    "type": "expression",
                    "payload": "lastNode=nd-f4b9215713"
                  },
                  "destination": {

                  },
                  "generative": {
                    "label": "Exit",
                    "properties": {
                      "label": true,
                      "condition": true
                    },
                    "suggestion": {
                      "label": "Exit",
                      "condition": "lastNode=nd-f4b9215713"
                    }
                  }
                }
              ],
              "nodeId": "nd-41214a19b0",
              "manualFields": []
            },
            {
              "id": "ins-d96bc2cecc",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "label": "always",
              "generative": {
                "label": "always",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": true
                }
              },
              "nodeId": "nd-41214a19b0",
              "description": "",
              "destination": {
                "node": "nd-9f4f6c17b3"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-41214a19b0",
          "name": "Healthcare_workflow"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 840,
          "y": -15,
          "instructions": [
            {
              "id": "ins-97e54a6ef2",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "The emergence of digital technologies has improved the quality of life of citizens and has opened a new development stage for Mauritius with innovation acting as a radical growth enabler. With the Information and Communication Technologies (ICT) sector solidly anchored as the third pillar of the economy with GDP contribution standing at 5.7%, Mauritius now aims to be a fully-fledged digital society. Currently, the sector has reached past the 20,000 employee benchmark, with both the figures and the trend being positive. The objective is to implement strategies to provide the right ecosystem for this sector to grow above 10% in the years ahead.",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-3efcbba80c",
              "transitions": []
            },
            {
              "id": "ins-bab78075c6",
              "type": "skill",
              "name": "Technology",
              "flowId": "wf-16f4fa3f89",
              "exitNodes": [
                "nd-d53830614b"
              ],
              "transitions": [
                {
                  "id": "trs-4ac48c6fb9",
                  "type": "transition",
                  "label": "Exit",
                  "condition": {
                    "type": "expression",
                    "payload": "lastNode=nd-d53830614b"
                  },
                  "destination": {

                  },
                  "generative": {
                    "label": "Exit",
                    "properties": {
                      "label": true,
                      "condition": true
                    },
                    "suggestion": {
                      "label": "Exit",
                      "condition": "lastNode=nd-d53830614b"
                    }
                  }
                }
              ],
              "nodeId": "nd-3efcbba80c",
              "manualFields": []
            },
            {
              "id": "ins-5cd5f1e8b6",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "label": "always",
              "generative": {
                "label": "always",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": true
                }
              },
              "nodeId": "nd-3efcbba80c",
              "description": "",
              "destination": {
                "node": "nd-9f4f6c17b3"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-3efcbba80c",
          "name": "Technology-workflow"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 840,
          "y": 240,
          "instructions": [
            {
              "id": "ins-69f5ffc4ff",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "A modern, safe and efficient transport system contributes significantly in modernising and redefining the infrastructural landscape of Mauritius. The improvement of the road network is helping to address traffic congestions, curb road accidents and reduce pollution. In parallel, the transformation of the port into a regional hub and the extension of the new passenger terminal at the international airport, measures up the vision for a future of modernity. The implementation of policies for secure and environmentally sustainable services in the transport sector is driven by innovation and quality. Equally, the introduction of a revolutionised public transport system, the Metro Express Project, is set to become the backbone of the transformation of land transport system across the country to respond to the needs and aspirations of the population.",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-2a5480bb32",
              "transitions": []
            },
            {
              "id": "ins-17a5832cad",
              "type": "skill",
              "name": "Infrastructure",
              "flowId": "wf-38834e973f",
              "exitNodes": [
                "nd-73b083c705"
              ],
              "transitions": [
                {
                  "id": "trs-4c3a9666e8",
                  "type": "transition",
                  "label": "Exit",
                  "condition": {
                    "type": "expression",
                    "payload": "lastNode=nd-73b083c705"
                  },
                  "destination": {

                  },
                  "generative": {
                    "label": "Exit",
                    "properties": {
                      "label": true,
                      "condition": true
                    },
                    "suggestion": {
                      "label": "Exit",
                      "condition": "lastNode=nd-73b083c705"
                    }
                  }
                }
              ],
              "nodeId": "nd-2a5480bb32",
              "manualFields": []
            },
            {
              "id": "ins-24a0437deb",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "label": "always",
              "generative": {
                "label": "always",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": true
                }
              },
              "nodeId": "nd-2a5480bb32",
              "description": "",
              "destination": {
                "node": "nd-9f4f6c17b3"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-2a5480bb32",
          "name": "Infrastructure-workflow"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1305,
          "y": -15,
          "instructions": [
            {
              "id": "ins-c101f62f60",
              "type": "capture",
              "entityId": "prompts://Boolean/v1",
              "entityName": "Boolean",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-9f4f6c17b3",
              "variableId": "var-afbef90898",
              "question": {
                "staticValue": "",
                "dynamicValue": "Would you like any more information?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Yes"
                      },
                      "value": "true",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "No"
                      },
                      "value": "false",
                      "enabled": true
                    }
                  ],
                  "dynamicValue": ""
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [
                {
                  "id": "trs-acf74e08c7",
                  "type": "transition",
                  "label": "Yes",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=true"
                  },
                  "destination": {
                    "node": "nd-ae5f5f9579"
                  }
                },
                {
                  "id": "trs-1a821646d7",
                  "type": "transition",
                  "label": "No",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=false"
                  },
                  "destination": {
                    "node": "nd-80ac4ff158"
                  }
                }
              ],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"What should I do with the music?\" */\ninterface Output = { bool: boolean }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: What should I do with the music?\nuser: turn it off!\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"bool\":false}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { bool: boolean }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-9f4f6c17b3",
          "name": "Loop"
        }
      ],
      "parentFolder": "root"
    },
    {
      "id": "wf-f86babbd5d",
      "name": "Healthcare",
      "startNode": "nd-f9f4021e2f",
      "variables": [
        {
          "id": "var-c9a8fbbd51",
          "name": "healthcare_intent",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-c4d4a3e479",
          "name": "illness",
          "type": "array",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-822de4373c",
          "name": "phone",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-a0a21c5203",
          "name": "name",
          "type": "object",
          "description": "",
          "scope": "workflow",
          "typings": "{ first: string; last: string }"
        },
        {
          "id": "var-f950862490",
          "name": "address",
          "type": "object",
          "description": "",
          "scope": "workflow",
          "typings": "{ country: string, city: string, street: string, zip: string, number: string }"
        }
      ],
      "links": [],
      "nodes": [
        {
          "id": "nd-f9f4021e2f",
          "name": "Entry",
          "type": "entry",
          "deletable": false,
          "variables": [],
          "instructions": [
            {
              "id": "trs-9f5cb9f13e",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "nd-8c031e20f4"
              },
              "transitions": [],
              "nodeId": "nd-f9f4021e2f"
            }
          ],
          "x": 45,
          "y": 120
        },
        {
          "id": "nd-f4b9215713",
          "name": "Exit",
          "type": "exit",
          "variables": [],
          "deletable": false,
          "instructions": [
            {
              "id": "trs-22347d8f76",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "#"
              },
              "transitions": [],
              "nodeId": "nd-f4b9215713"
            }
          ],
          "x": 2775,
          "y": 465
        },
        {
          "id": "nd-8c031e20f4",
          "name": "Healthcare_intent",
          "type": "standard",
          "deletable": true,
          "instructions": [
            {
              "id": "ins-1488bc81cc",
              "type": "capture",
              "entityId": "prompts://RawInput/v1",
              "entityName": "Raw Input",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-8c031e20f4",
              "variableId": "var-c9a8fbbd51",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "Healthcare: What do you wish to do?",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "type": "aiclassify",
              "id": "ins-22d61e4e8d",
              "task": {
                "input": {
                  "staticValue": "",
                  "valueType": "dynamic",
                  "dynamicValue": "@workflow.healthcare_intent"
                },
                "classes": {
                  "staticValue": [
                    {
                      "label": "Register for virtual library",
                      "value": "Register for virtual library",
                      "isTransition": true
                    },
                    {
                      "label": "Need health advice",
                      "value": "Need health advice",
                      "isTransition": true
                    },
                    {
                      "label": "Call an emergency ambulance",
                      "value": "Call an emergency ambulance",
                      "isTransition": true
                    },
                    {
                      "label": "",
                      "value": "",
                      "isTransition": false
                    }
                  ],
                  "valueType": "static",
                  "dynamicValue": ""
                },
                "outputVariableId": "__none__",
                "forceClassify": true,
                "model": "anthropic__claude-3-7-sonnet-reasoning-20250219"
              },
              "prompt": {
                "response_format": {
                  "type": "json_object"
                },
                "messages": [
                  {
                    "role": "system",
                    "content": "This task requires precise categorization. The bot should associate the content with a category only if there's an evident, direct, and unambiguous relation. \nEschew inferred, indirect, or imaginative associations.\nEnsure the categorization aligns strictly with one of the provided options, or opt for the closest match if necessary.\n\nReply with a JSON with the following shape:\n```typescript\n{ \n/**\n* The chosen class for classification. Value can be one of:\n* - \"Register for virtual library\"\n* - \"Need health advice\"\n* - \"Call an emergency ambulance\"\n*/\nvalue: string\n; \n/** A brief explanation for the chosen classification. */\nexplanation: string\n; \n/** The score of the chosen class. */\nscore: number\n}\n```\n\nEg:\n```json\n{\n \"value\": \"Register for virtual library\",\n \"explanation\": \"The content is about...\",\n \"score\": 0.9\n}\n```"
                  },
                  {
                    "role": "user",
                    "content": "Content: {{CLASSIFICATION_INPUT}}\n\nAvailable categories: \n  - Register for virtual library\n  - Need health advice\n  - Call an emergency ambulance"
                  }
                ],
                "model": "anthropic__claude-3-7-sonnet-reasoning-20250219",
                "temperature": 0,
                "signatureVersion": "Jan-2024"
              },
              "nodeId": "nd-8c031e20f4",
              "transitions": [
                {
                  "id": "trs-bc20e9d66b",
                  "type": "transition",
                  "label": "Register for virtual library",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=Register for virtual library"
                  },
                  "destination": {
                    "node": "nd-ff5a88e512"
                  }
                },
                {
                  "id": "trs-13e3f31f63",
                  "type": "transition",
                  "label": "Need health advice",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=Need health advice"
                  },
                  "destination": {
                    "node": "nd-0b711ab218"
                  }
                },
                {
                  "id": "trs-854b2cd0e7",
                  "type": "transition",
                  "label": "Call an emergency ambulance",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=Call an emergency ambulance"
                  },
                  "destination": {
                    "node": "nd-dd04ba515c"
                  }
                }
              ]
            },
            {
              "id": "ins-2d80f7fa93",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "!turn.KnowledgeAgent.responded"
              },
              "label": "unknown answer",
              "generative": {
                "label": "unknown answer",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-8c031e20f4",
              "description": "",
              "destination": {
                "node": "nd-780db74585"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "x": 420,
          "y": 105
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 930,
          "y": 180,
          "instructions": [
            {
              "id": "ins-98cbf433ae",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Health Advice - Communique by the Government of Mauritius",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-0b711ab218",
              "transitions": []
            },
            {
              "id": "ins-19d9e9abd5",
              "type": "capture",
              "entityId": "prompts://MultiChoice/v1",
              "entityName": "Multiple Choice",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-0b711ab218",
              "variableId": "var-c4d4a3e479",
              "question": {
                "staticValue": "",
                "dynamicValue": "Which illness do you want advice for?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Gastroenthritis"
                      },
                      "value": "Gastroenthritis",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Ebola"
                      },
                      "value": "Ebola",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Malaria"
                      },
                      "value": "Malaria",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Dengue"
                      },
                      "value": "Dengue",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Plague"
                      },
                      "value": "Plague",
                      "enabled": true
                    }
                  ],
                  "dynamicValue": ""
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [
                {
                  "id": "trs-edbb28cea7",
                  "type": "transition",
                  "label": "Gastroenthritis",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=Gastroenthritis"
                  },
                  "destination": {
                    "node": "nd-4fa4a5eb9e"
                  }
                },
                {
                  "id": "trs-03c9491714",
                  "type": "transition",
                  "label": "Ebola",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=Ebola"
                  },
                  "destination": {
                    "node": "nd-445ddea788"
                  }
                },
                {
                  "id": "trs-186d524826",
                  "type": "transition",
                  "label": "Malaria",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=Malaria"
                  },
                  "destination": {
                    "node": "nd-630e7d7c3b"
                  }
                },
                {
                  "id": "trs-00b46824cd",
                  "type": "transition",
                  "label": "Dengue",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=Dengue"
                  },
                  "destination": {
                    "node": "nd-97c3466af3"
                  }
                },
                {
                  "id": "trs-0dbfb83cf8",
                  "type": "transition",
                  "label": "Plague",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=Plague"
                  },
                  "destination": {
                    "node": "nd-c0f385c1d2"
                  }
                }
              ],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Which one would you like? Choices: [ 1) Red Apple, 2) Yellow Apple, 3) Dark Banana ]\" */\ninterface Output = { choices: Array\u003C{{CHOICES_TYPINGS}}\u003E }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Which one would you like? Choices: [ 1) Red Apple, 2) Yellow Apple, 3) Dark Banana ]\nuser: I will go with the second one and the banana please\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"choices\":[\"Yellow Apple\",\"Dark Banana\"]}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { choices: Array\u003C{{CHOICES_TYPINGS}}\u003E }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-0b711ab218",
          "name": "health_advice"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1350,
          "y": 315,
          "instructions": [
            {
              "id": "ins-66bf1d7fac",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Precautions to be taken to avoid Gastroenteritis\n\nFollowing heavy rainfalls in the country, there is a potential risk of increased gastrointestinal infections due to contamination of drinking water and food. As a result, the ministry advises the public to maintain the following precautions to avoid any risk of catching gastroenteritis:\n\n‚Ä¢ Boil the water before drinking.\n‚Ä¢ Wash hands thoroughly with soap and water\n‚Ä¢ Consume freshly cooked meals\n‚Ä¢ Wash fruits and vegetables well before consuming them\n‚Ä¢ Cover food to protect against insect contamination",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-4fa4a5eb9e",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-116b90901f"
          },
          "id": "nd-4fa4a5eb9e",
          "name": "gastroenthritis"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1350,
          "y": 465,
          "instructions": [
            {
              "id": "ins-2044098730",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "The World Health Organization (WHO) has declared the end of the recent resurgence of Ebola virus disease in Guinea-Conakry. Following this declaration, the Ministry of Health and Quality of Life informs the public that Guinea-Conakry has been removed from the list of countries affected by the Ebola.\n\nIt is noted that Liberia and Sierra Leone have already been removed from the list of Ebola Virus Disease on April 11, 2016. Thus, there are no more restrictions on traveling to these countries.",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-445ddea788",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-116b90901f"
          },
          "id": "nd-445ddea788",
          "name": "ebola"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1350,
          "y": 615,
          "instructions": [
            {
              "id": "ins-a4d2476734",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Malaria is a deadly mosquito-borne disease afflicting as many as 500 million people in 106 countries in Africa, Asia and Latin America. It is estimated that, annually, the disease causes nearly one million deaths. In Africa, a child dies every 45 seconds of Malaria, the disease accounting for 20% of all childhood deaths.\n\nMalaria is caused by a parasite called Plasmodium of which four types are known to cause disease in humans, namely,\n‚Ä¢ Plasmodium falciparum\n‚Ä¢ Plasmodium vivax\n‚Ä¢ Plasmodium malariae\n‚Ä¢ Plasmodium ovale.",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-630e7d7c3b",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-116b90901f"
          },
          "id": "nd-630e7d7c3b",
          "name": "malaria"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1350,
          "y": 765,
          "instructions": [
            {
              "id": "ins-6fabbaea9a",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Dengue fever is a viral infection transmitted by mosquitoes in the tropics and subtropics of the world, including Mauritius. In Mauritius, the mosquito Aedes albopictus is responsible for the transmission of dengue fever. The virus is transmitted to humans by the bite of the infected female.\n\nFor more information, contact the Communicable Disease Control Unit (CDCU) of the Ministry of Health and Quality of Life on the following number: Weekday from 09H00 to 16H00: 8924",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-97c3466af3",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-116b90901f"
          },
          "id": "nd-97c3466af3",
          "name": "dengue"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1350,
          "y": 915,
          "instructions": [
            {
              "id": "ins-1d7dfac928",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Madagascar is currently experiencing an outbreak of plague in the major cities such as Antananarivo.\n\nCausative Agent\nPlague is an infectious disease caused by the bacteria Yersinia pestis, a bacterium, which is usually present in wild rodents and fleas.\n\nSource of Infection and Transmission\nIt is transmitted:\n‚Ä¢ To humans by the bite of infected rat fleas\n‚Ä¢ Direct contact with infected rats\n‚Ä¢ Person to person through respiratory droplets from a patient having pneumonic plague",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-c0f385c1d2",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-116b90901f"
          },
          "id": "nd-c0f385c1d2",
          "name": "plague"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 930,
          "y": -15,
          "instructions": [
            {
              "id": "ins-e65270f32a",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Virtual Library for Health Professionals Registration",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-ff5a88e512",
              "transitions": []
            },
            {
              "id": "ins-2439f7eed4",
              "type": "content",
              "content": {
                "type": "card",
                "title": {
                  "valueType": "dynamic",
                  "dynamicValue": "Register for Virtual Library",
                  "staticValue": ""
                },
                "subtitle": {
                  "valueType": "dynamic",
                  "dynamicValue": "Fill in this Google Form to register for Virtual Library",
                  "staticValue": ""
                },
                "actions": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": "Register for Virtual Library for Health Professionals",
                      "value": "https://docs.google.com/forms/d/e/1FAIpQLSflgDTRAWZrZoK3EJ5hTAVWZ3YYWPBbuTbbCBJGelyVHsEfhg/viewform",
                      "action": "url"
                    }
                  ],
                  "isExpression": true
                }
              },
              "nodeId": "nd-ff5a88e512",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-f4b9215713"
          },
          "id": "nd-ff5a88e512",
          "name": "virtual_library"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1800,
          "y": 600,
          "instructions": [
            {
              "id": "ins-06bdef147f",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Do you want to subscribe to emails on health advice from the government?",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-116b90901f",
              "transitions": []
            },
            {
              "id": "ins-eccca4afa1",
              "type": "capture",
              "entityId": "prompts://Confirmation/v1",
              "entityName": "Confirmation",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-116b90901f",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Accept"
                      },
                      "value": "true",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Decline"
                      },
                      "value": "false",
                      "enabled": true
                    }
                  ],
                  "dynamicValue": ""
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [
                {
                  "id": "trs-65ae29c80e",
                  "type": "transition",
                  "label": "Accept",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=true"
                  },
                  "destination": {
                    "node": "nd-24616b05d3"
                  }
                },
                {
                  "id": "trs-c9aeb9c560",
                  "type": "transition",
                  "label": "Decline",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=false"
                  },
                  "destination": {
                    "node": "nd-f4b9215713"
                  }
                }
              ],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Do you accept those terms and conditions?\" */\ninterface Output = { confirm: boolean }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Do you accept those terms and conditions?\nuser: yeah I do\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"confirm\":true}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { confirm: boolean }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-116b90901f",
          "name": "subscribe"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 2265,
          "y": 735,
          "instructions": [
            {
              "id": "ins-bac5c939d0",
              "type": "capture",
              "entityId": "prompts://Email/v1",
              "entityName": "Phone Number",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-24616b05d3",
              "variableId": "__none__",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "Please give your email address.",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"At which email can we send you updates?\" */\ninterface Output = { isValidEmail: boolean; email?: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: At which email can we send you updates?\nuser: send it to ploik.rebekka@century-link.uk\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"isValidEmail\":true,\"email\":\"ploik.rebekka@century-link.uk\"}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { isValidEmail: boolean; email?: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\nIdentify and extract a valid email address, considering the standard format \"local.part.450@domain.com\". To be valid, the email must be composed of 3 parts in that order: a username (example: foobar.gaston) followed by a \"@\"; a domain name (example: @gmail) followed by a \".\"; a top-level domain name (example: .com).\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-42dcb39e8e",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Thanks, your email address @workflow.email has been saved. You shall soon receive medical advice through email.",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-24616b05d3",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-f4b9215713"
          },
          "id": "nd-24616b05d3",
          "name": "capture_email"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 945,
          "y": 1095,
          "instructions": [
            {
              "id": "ins-c7a2efd9f9",
              "type": "capture",
              "entityId": "prompts://PersonName/v1",
              "entityName": "Person Name",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-dd04ba515c",
              "variableId": "var-a0a21c5203",
              "question": {
                "staticValue": "",
                "dynamicValue": "Name?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Who did you want to send the email to?\" */\ninterface Output = { first: string; last: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Who did you want to send the email to?\nuser: My name is Jerry Bean, but please send it to John Doe\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"first\":\"John\",\"last\":\"Doe\"}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { first: string; last: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-c7902f7280",
              "type": "capture",
              "entityId": "prompts://FullAddress/v1",
              "entityName": "Full Address",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-dd04ba515c",
              "variableId": "var-f950862490",
              "question": {
                "staticValue": "",
                "dynamicValue": "Address?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Where should we ship this?\" */\ninterface Output = { country: string, city: string, street: string, zip: string, number: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Where should we ship this?\nuser: ship it in canada.. the address is 8463 rue de la montagne, montreal, qc, h2r 2r2\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"country\":\"Canada\",\"city\":\"Montreal\",\"street\":\"rue de la Montagne\",\"zip\":\"H2R 2R2\",\"number\":\"8463\"}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { country: string, city: string, street: string, zip: string, number: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-d384081263",
              "type": "capture",
              "entityId": "prompts://PhoneNumber/v1",
              "entityName": "Phone Number",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-dd04ba515c",
              "variableId": "var-822de4373c",
              "question": {
                "staticValue": "",
                "dynamicValue": "Phone number?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"What is your phone number and where are you?\" */\ninterface Output = { isValidPhoneNumber: boolean; countryCode?: string; number?: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: What is your phone number and where are you?\nuser: Hello, i'm in canada, my cell is (476) 882-1042\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"isValidPhoneNumber\":true,\"number\":\"4768821042\",\"countryCode\":\"+1\"}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { isValidPhoneNumber: boolean; countryCode?: string; number?: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\nIdentify and extract a valid phone number, considering dashes, spaces, parentheses, and country codes (examples: +33611111111, +8211111111, +212111111111). The phone number should ABSOLUTELY be AT LEAST 8 characters long.\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-8109b08594",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "label": "always",
              "generative": {
                "label": "always",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": true
                }
              },
              "nodeId": "nd-dd04ba515c",
              "description": "",
              "destination": {
                "node": "nd-74742fe94d"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-dd04ba515c",
          "name": "ambulance"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1335,
          "y": 1095,
          "instructions": [
            {
              "id": "ins-d84b340400",
              "type": "capture",
              "entityId": "prompts://Confirmation/v1",
              "entityName": "Confirmation",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-74742fe94d",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "An ambulance will be called to your current address. Do you confirm?",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Accept"
                      },
                      "value": "true",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Decline"
                      },
                      "value": "false",
                      "enabled": true
                    }
                  ],
                  "dynamicValue": ""
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [
                {
                  "id": "trs-bf7909e2dc",
                  "type": "transition",
                  "label": "Accept",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=true"
                  },
                  "destination": {
                    "node": "nd-5c269a86bf"
                  }
                },
                {
                  "id": "trs-fd7fb70c92",
                  "type": "transition",
                  "label": "Decline",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=false"
                  },
                  "destination": {
                    "node": "nd-f4b9215713"
                  }
                }
              ],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Do you accept those terms and conditions?\" */\ninterface Output = { confirm: boolean }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Do you accept those terms and conditions?\nuser: yeah I do\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"confirm\":true}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { confirm: boolean }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-74742fe94d",
          "name": "Confirm"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1695,
          "y": 1095,
          "instructions": [
            {
              "id": "ins-d6d848c163",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "An ambulance requested by {{workflow.name.first}} who can be contacted at @workflow.phone  is being called to {{workflow.address.city}}  as soon as possible.",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-5c269a86bf",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-f4b9215713"
          },
          "id": "nd-5c269a86bf",
          "name": "ambulance_confirm"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 420,
          "y": 420,
          "instructions": [
            {
              "id": "ins-e72751593a",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Sorry! We did not understand your request. Do you want more information about healthcare? E.g. register for virtual library, Seek healthcare advice, Call an ambulance etc.",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-780db74585",
              "transitions": []
            },
            {
              "id": "ins-3e60c9afa1",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "label": "always",
              "generative": {
                "label": "always",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": true
                }
              },
              "nodeId": "nd-780db74585",
              "description": "",
              "destination": {

              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-0b711ab218"
          },
          "id": "nd-780db74585",
          "name": "Fallback_health",
          "agentConfigOverrides": {
            "VisionAgent": {
              "extractionEnabled": false
            }
          }
        }
      ],
      "parentFolder": "root"
    },
    {
      "id": "wf-16f4fa3f89",
      "name": "Technology",
      "startNode": "nd-110baff781",
      "variables": [
        {
          "id": "var-669f0b3a30",
          "name": "years",
          "type": "number",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-b42bb341dd",
          "name": "tech_intent",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-a44ecae112",
          "name": "mode",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-b7c245a1f3",
          "name": "free_online",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-449a97a1cb",
          "name": "free_ftf",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-e12ccf4d6c",
          "name": "date_rcc",
          "type": "date",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-4924f56bfa",
          "name": "name",
          "type": "object",
          "description": "",
          "scope": "workflow",
          "typings": "{ first: string; last: string }"
        },
        {
          "id": "var-9755b5ea90",
          "name": "name",
          "type": "object",
          "description": "",
          "scope": "workflow",
          "typings": "{ first: string; last: string }"
        },
        {
          "id": "var-5d8ca94948",
          "name": "postcode",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-31f70c6ca4",
          "name": "offer",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-9318156ec6",
          "name": "email",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-5d1bbef31f",
          "name": "phone",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-875dd3333c",
          "name": "validPhone",
          "description": "",
          "type": "string",
          "scope": "workflow",
          "storeAsTag": false
        }
      ],
      "links": [],
      "nodes": [
        {
          "id": "nd-110baff781",
          "name": "Entry",
          "type": "entry",
          "deletable": false,
          "variables": [],
          "instructions": [
            {
              "id": "trs-d778948805",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "nd-e1f6273f64"
              },
              "transitions": [],
              "nodeId": "nd-110baff781"
            }
          ],
          "x": 100,
          "y": 100
        },
        {
          "id": "nd-d53830614b",
          "name": "Exit",
          "type": "exit",
          "variables": [],
          "deletable": false,
          "instructions": [
            {
              "id": "trs-1ae2f5e563",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "#"
              },
              "transitions": [],
              "nodeId": "nd-d53830614b"
            }
          ],
          "x": 3090,
          "y": 0
        },
        {
          "id": "nd-e1f6273f64",
          "name": "Technology_intent",
          "type": "standard",
          "deletable": true,
          "instructions": [
            {
              "id": "ins-58908e030f",
              "type": "capture",
              "entityId": "prompts://RawInput/v1",
              "entityName": "Raw Input",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-e1f6273f64",
              "variableId": "var-b42bb341dd",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "What are you interested in, in the field of Technology?",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "type": "aiclassify",
              "id": "ins-cbe8507f17",
              "task": {
                "input": {
                  "staticValue": "",
                  "valueType": "dynamic",
                  "dynamicValue": "@workflow.tech_intent "
                },
                "classes": {
                  "staticValue": [
                    {
                      "label": "user wants to apply for digital signature",
                      "value": "user wants to apply for digital signature",
                      "isTransition": true
                    },
                    {
                      "label": "user wants to apply for digital proficiency course",
                      "value": "user wants to apply for digital proficiency course",
                      "isTransition": true
                    },
                    {
                      "label": "user wants to report crime on MAUCORS",
                      "value": "user wants to report crime on MAUCORS",
                      "isTransition": true
                    },
                    {
                      "label": "user wants to find postal zip code",
                      "value": "user wants to find postal zip code",
                      "isTransition": true
                    },
                    {
                      "label": "user wants to buy or subscribe to Home Internet",
                      "value": "user wants to buy or subscribe to Home Internet",
                      "isTransition": true
                    }
                  ],
                  "valueType": "static",
                  "dynamicValue": ""
                },
                "outputVariableId": "__none__",
                "forceClassify": false,
                "model": "anthropic__claude-3-7-sonnet-reasoning-20250219"
              },
              "prompt": {
                "response_format": {
                  "type": "json_object"
                },
                "messages": [
                  {
                    "role": "system",
                    "content": "This task requires precise categorization. The bot should associate the content with a category only if there's an evident, direct, and unambiguous relation. \nEschew inferred, indirect, or imaginative associations.\nPick from the provided categories only if the content unmistakably corresponds. If any uncertainty exists or the content doesn't clearly fit a category, select ANYTHING_ELSE.\n\nReply with a JSON with the following shape:\n```typescript\n{ \n/**\n* The chosen class for classification. Value can be one of:\n* - \"user wants to apply for digital signature\"\n* - \"user wants to apply for digital proficiency course\"\n* - \"user wants to report crime on MAUCORS\"\n* - \"user wants to find postal zip code\"\n* - \"user wants to buy or subscribe to Home Internet\"\n* - \"ANYTHING_ELSE\"\n*/\nvalue: string\n; \n/** A brief explanation for the chosen classification. */\nexplanation: string\n; \n/** The score of the chosen class. */\nscore: number\n}\n```\n\nEg:\n```json\n{\n \"value\": \"user wants to apply for digital signature\",\n \"explanation\": \"The content is about...\",\n \"score\": 0.9\n}\n```"
                  },
                  {
                    "role": "user",
                    "content": "Content: {{CLASSIFICATION_INPUT}}\n\nAvailable categories: \n  - user wants to apply for digital signature\n  - user wants to apply for digital proficiency course\n  - user wants to report crime on MAUCORS\n  - user wants to find postal zip code\n  - user wants to buy or subscribe to Home Internet\n  - ANYTHING_ELSE\n\nIf the content doesn't directly align with any categories, select ANYTHING_ELSE."
                  }
                ],
                "model": "anthropic__claude-3-7-sonnet-reasoning-20250219",
                "temperature": 0,
                "signatureVersion": "Jan-2024"
              },
              "nodeId": "nd-e1f6273f64",
              "transitions": [
                {
                  "id": "trs-49bea1aa18",
                  "type": "transition",
                  "label": "user wants to apply for digital signature",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=user wants to apply for digital signature"
                  },
                  "destination": {
                    "node": "nd-b3ed764035"
                  }
                },
                {
                  "id": "trs-75e3b51538",
                  "type": "transition",
                  "label": "user wants to apply for digital proficiency course",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=user wants to apply for digital proficiency course"
                  },
                  "destination": {
                    "node": "nd-fd5fa6dec1"
                  }
                },
                {
                  "id": "trs-89e696e9d6",
                  "type": "transition",
                  "label": "user wants to report crime on MAUCORS",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=user wants to report crime on MAUCORS"
                  },
                  "destination": {
                    "node": "nd-0b2931e9e5"
                  }
                },
                {
                  "id": "trs-cc113a7e40",
                  "type": "transition",
                  "label": "user wants to find postal zip code",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=user wants to find postal zip code"
                  },
                  "destination": {
                    "node": "nd-b5c7ae6de4"
                  }
                },
                {
                  "id": "trs-57260c27c2",
                  "type": "transition",
                  "label": "user wants to buy or subscribe to Home Internet",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=user wants to buy or subscribe to Home Internet"
                  },
                  "destination": {
                    "node": "nd-02971679b7"
                  }
                }
              ]
            },
            {
              "id": "ins-de83082626",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "!turn.KnowledgeAgent.responded"
              },
              "label": "answer unknown",
              "generative": {
                "label": "answer unknown",
                "suggestion": {

                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-e1f6273f64",
              "description": "",
              "destination": {
                "node": "nd-fd9a4d7a74"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-6fbb158c91"
          },
          "x": 450,
          "y": 100
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 840,
          "y": -795,
          "instructions": [
            {
              "id": "ins-078d63d46c",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Applying for Digital Signature",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-b3ed764035",
              "transitions": []
            },
            {
              "id": "ins-14823bee38",
              "type": "capture",
              "entityId": "prompts://Number/v1",
              "entityName": "Number",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-b3ed764035",
              "variableId": "var-669f0b3a30",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "The citizen certificate will be for how many years?",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"It might be your lucky day. Choose a number between 1 and 10 and you might win a gift\" */\ninterface Output = { number: number }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: It might be your lucky day. Choose a number between 1 and 10 and you might win a gift\nuser: Oh! seven was always my lucky number!\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"number\":7}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { number: number }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-7903d309c8",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "workflow.years == 1"
              },
              "label": "user input is 1",
              "generative": {
                "label": "user input is 1",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-b3ed764035",
              "description": "",
              "destination": {
                "node": "nd-8115d504cc"
              },
              "transitions": []
            },
            {
              "id": "ins-0e13b29e37",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "workflow.years == 2"
              },
              "label": "user input is 2",
              "generative": {
                "label": "user input is 2",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-b3ed764035",
              "description": "",
              "destination": {
                "node": "nd-1567ed8967"
              },
              "transitions": []
            },
            {
              "id": "ins-b330f2e0e7",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "workflow.years !== 1 && workflow.years !== 2"
              },
              "label": "if not 1 or 2",
              "generative": {
                "label": "if not 1 or 2",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-b3ed764035",
              "description": "",
              "destination": {
                "node": "nd-f620a8b5b8"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-b3ed764035",
          "name": "Digital_Signature"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 855,
          "y": -495,
          "instructions": [
            {
              "id": "ins-0d270fd798",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Applying for Digital Proficiency Course",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-fd5fa6dec1",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-a0ab1f0c88"
          },
          "id": "nd-fd5fa6dec1",
          "name": "Digital_Proficiency_Course"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 915,
          "y": -60,
          "instructions": [
            {
              "id": "ins-37b744e6de",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Here is the link to report a cybercrime.",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-0b2931e9e5",
              "transitions": []
            },
            {
              "id": "ins-86ef4e8e45",
              "type": "content",
              "content": {
                "type": "card",
                "title": {
                  "valueType": "dynamic",
                  "dynamicValue": "Report a cybercrime",
                  "staticValue": ""
                },
                "subtitle": {
                  "valueType": "dynamic",
                  "dynamicValue": "Report a cybercrime on MAUCORS",
                  "staticValue": ""
                },
                "imageUrl": {
                  "staticValue": "https://s3.us-east-1.amazonaws.com/cloud-studio-botsbca2d619-1916w6llinepa/e68fd5ad-1a5a-4581-8d69-496ad157dc00/media/df76447e-3786-446b-ac61-38dffc1f5657.png",
                  "valueType": "static"
                },
                "actions": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": "Report a cybercrime",
                      "value": "https://maucorsreport.govmu.org/maucors/open.php",
                      "action": "url"
                    }
                  ],
                  "isExpression": true
                }
              },
              "nodeId": "nd-0b2931e9e5",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-d53830614b"
          },
          "id": "nd-0b2931e9e5",
          "name": "Report_Crime"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 900,
          "y": 105,
          "instructions": [
            {
              "id": "ins-621dcb6731",
              "type": "capture",
              "entityId": "prompts://RawInput/v1",
              "entityName": "Raw Input",
              "kbPriority": {
                "enabled": true,
                "searchScope": "specific",
                "kbs": [
                  "kb-b8e70b5cbf"
                ]
              },
              "nodeId": "nd-b5c7ae6de4",
              "variableId": "__none__",
              "question": {
                "staticValue": "",
                "dynamicValue": "To find your postal code, please provide your address",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-4cfe1291cb",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "turn.KnowledgeAgent.answer"
              },
              "label": "kb has answer",
              "generative": {
                "label": "kb has answer",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-b5c7ae6de4",
              "description": "",
              "destination": {
                "node": "nd-5169307bc3"
              },
              "transitions": []
            },
            {
              "id": "ins-8470ac5f7d",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "!turn.KnowledgeAgent.answer"
              },
              "label": "kb has no answer",
              "generative": {
                "label": "kb has no answer",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-b5c7ae6de4",
              "description": "",
              "destination": {
                "node": "nd-37802a3461"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-b5c7ae6de4",
          "name": "Find_Post_Code"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 915,
          "y": 390,
          "instructions": [
            {
              "id": "ins-9ef309dddc",
              "type": "capture",
              "entityId": "prompts://SingleChoice/v1",
              "entityName": "Single Choice",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-02971679b7",
              "variableId": "var-31f70c6ca4",
              "question": {
                "staticValue": "",
                "dynamicValue": "Which offer do you wish to sign up for?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "50 Mbps, 1TB, Rs 1,100/month"
                      },
                      "value": "50 Mbps, 1TB, Rs 1,100/month",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "100 Mbps, 2TB, Rs 1,200/month"
                      },
                      "value": "100 Mbps, 2TB, Rs 1,200/month",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "200 Mbps, 1TB, Rs 1,700/month"
                      },
                      "value": "200 Mbps, 1TB, Rs 1,700/month",
                      "enabled": true
                    }
                  ],
                  "dynamicValue": ""
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [
                {
                  "id": "trs-cdc90a6658",
                  "type": "transition",
                  "label": "50 Mbps, 1TB, Rs 1,100/month",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=50 Mbps, 1TB, Rs 1,100/month"
                  },
                  "destination": {
                    "node": "nd-14c29648c0"
                  }
                },
                {
                  "id": "trs-6fdde44245",
                  "type": "transition",
                  "label": "100 Mbps, 2TB, Rs 1,200/month",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=100 Mbps, 2TB, Rs 1,200/month"
                  },
                  "destination": {
                    "node": "nd-14c29648c0"
                  }
                },
                {
                  "id": "trs-9c29fa4504",
                  "type": "transition",
                  "label": "200 Mbps, 1TB, Rs 1,700/month",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=200 Mbps, 1TB, Rs 1,700/month"
                  },
                  "destination": {
                    "node": "nd-14c29648c0"
                  }
                }
              ],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Which one would you like? Choices: [ 1) Red Apple, 2) Yellow Apple, 3) Dark Banana ]\" */\ninterface Output = { choice: {{CHOICES_TYPINGS}} }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Which one would you like? Choices: [ 1) Red Apple, 2) Yellow Apple, 3) Dark Banana ]\nuser: I will go with the second one please\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"choice\":\"Yellow Apple\"}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { choice: {{CHOICES_TYPINGS}} }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-02971679b7",
          "name": "Subscribe_to_MyT_Home_Internet"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1185,
          "y": -855,
          "instructions": [
            {
              "id": "ins-eec738b1bd",
              "type": "content",
              "content": {
                "type": "card",
                "title": {
                  "valueType": "dynamic",
                  "dynamicValue": "Citizen Certificate 1 Year",
                  "staticValue": ""
                },
                "subtitle": {
                  "valueType": "dynamic",
                  "dynamicValue": "Apply for Citizen Certificate 1 Year",
                  "staticValue": ""
                },
                "imageUrl": {
                  "staticValue": "https://s3.us-east-1.amazonaws.com/cloud-studio-botsbca2d619-1916w6llinepa/e68fd5ad-1a5a-4581-8d69-496ad157dc00/media/6c1f0d8b-16e0-4474-8a20-d238280642f8.png",
                  "valueType": "static"
                },
                "actions": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": "Citizen Certificate 1 Year",
                      "value": "https://mausign.govmu.org/apply/searchIndvdlProductDetail.sg?prodKey=%7B%22prodId%22%3A%2250c06da4143e448ea9b528ec2e2c30b6%22%2C%22qy%22%3A%221%22%7D",
                      "action": "url"
                    }
                  ],
                  "isExpression": true
                }
              },
              "nodeId": "nd-8115d504cc",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-d53830614b"
          },
          "id": "nd-8115d504cc",
          "name": "1_year_citizen_certificate"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1185,
          "y": -690,
          "instructions": [
            {
              "id": "ins-3f43f6340a",
              "type": "content",
              "content": {
                "type": "card",
                "title": {
                  "valueType": "dynamic",
                  "dynamicValue": "Citizen Certificate 2 Year",
                  "staticValue": ""
                },
                "subtitle": {
                  "valueType": "dynamic",
                  "dynamicValue": "Apply for Citizen Certificate 2 Year",
                  "staticValue": ""
                },
                "imageUrl": {
                  "staticValue": "https://s3.us-east-1.amazonaws.com/cloud-studio-botsbca2d619-1916w6llinepa/e68fd5ad-1a5a-4581-8d69-496ad157dc00/media/6c1f0d8b-16e0-4474-8a20-d238280642f8.png",
                  "valueType": "static"
                },
                "actions": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": "Citizen Certificate 1 Year",
                      "value": "https://mausign.govmu.org/apply/searchIndvdlProductDetail.sg?prodKey=%7B%22prodId%22%3A%22b93dd7b6663b429d9ecc2e5cbcc9ef6f%22%2C%22qy%22%3A%221%22%7D",
                      "action": "url"
                    }
                  ],
                  "isExpression": true
                }
              },
              "nodeId": "nd-1567ed8967",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-d53830614b"
          },
          "id": "nd-1567ed8967",
          "name": "2_years_citizen_certificate"
        },
        {
          "deletable": true,
          "x": 1185,
          "y": -495,
          "type": "standard",
          "instructions": [
            {
              "id": "ins-2b0f17c6d6",
              "type": "capture",
              "entityId": "prompts://RawInput/v1",
              "entityName": "Raw Input",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-a0ab1f0c88",
              "variableId": "var-a44ecae112",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "What is your preferred mode of training?",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "type": "aiclassify",
              "id": "ins-9dd913366f",
              "task": {
                "input": {
                  "staticValue": "",
                  "valueType": "dynamic",
                  "dynamicValue": "@workflow.mode "
                },
                "classes": {
                  "staticValue": [
                    {
                      "label": "online",
                      "value": "online",
                      "isTransition": true
                    },
                    {
                      "label": "face to face or not online",
                      "value": "face to face or not online",
                      "isTransition": true
                    }
                  ],
                  "valueType": "static",
                  "dynamicValue": ""
                },
                "outputVariableId": "__none__",
                "forceClassify": false,
                "model": "fast-model"
              },
              "prompt": {
                "response_format": {
                  "type": "json_object"
                },
                "messages": [
                  {
                    "role": "system",
                    "content": "This task requires precise categorization. The bot should associate the content with a category only if there's an evident, direct, and unambiguous relation. \nEschew inferred, indirect, or imaginative associations.\nPick from the provided categories only if the content unmistakably corresponds. If any uncertainty exists or the content doesn't clearly fit a category, select ANYTHING_ELSE.\n\nReply with a JSON with the following shape:\n```typescript\n{ \n/**\n* The chosen class for classification. Value can be one of:\n* - \"online\"\n* - \"face to face or not online\"\n* - \"ANYTHING_ELSE\"\n*/\nvalue: string\n; \n/** A brief explanation for the chosen classification. */\nexplanation: string\n; \n/** The score of the chosen class. */\nscore: number\n}\n```\n\nEg:\n```json\n{\n \"value\": \"online\",\n \"explanation\": \"The content is about...\",\n \"score\": 0.9\n}\n```"
                  },
                  {
                    "role": "user",
                    "content": "Content: {{CLASSIFICATION_INPUT}}\n\nAvailable categories: \n  - online\n  - face to face or not online\n  - ANYTHING_ELSE\n\nIf the content doesn't directly align with any categories, select ANYTHING_ELSE."
                  }
                ],
                "model": "fast-model",
                "temperature": 0,
                "signatureVersion": "Jan-2024"
              },
              "nodeId": "nd-a0ab1f0c88",
              "transitions": [
                {
                  "id": "trs-7853cd4771",
                  "type": "transition",
                  "label": "online",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=online"
                  },
                  "destination": {
                    "node": "nd-b9fc1c8429"
                  }
                },
                {
                  "id": "trs-a3c3d35473",
                  "type": "transition",
                  "label": "face to face or not online",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=face to face or not online"
                  },
                  "destination": {
                    "node": "nd-e5cbc4ec62"
                  }
                }
              ]
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-a0ab1f0c88",
          "name": "digital_proficiency"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1545,
          "y": -480,
          "instructions": [
            {
              "id": "ins-183cf31de3",
              "type": "capture",
              "entityId": "prompts://RawInput/v1",
              "entityName": "Raw Input",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-b9fc1c8429",
              "variableId": "var-b7c245a1f3",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "Which days are you free on?",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "type": "aiclassify",
              "id": "ins-c88daacce0",
              "task": {
                "input": {
                  "staticValue": "",
                  "valueType": "dynamic",
                  "dynamicValue": "@workflow.free_online "
                },
                "classes": {
                  "staticValue": [
                    {
                      "label": "Saturday",
                      "value": "Saturday",
                      "isTransition": true
                    },
                    {
                      "label": "Monday Wednesday Friday",
                      "value": "Monday Wednesday Friday",
                      "isTransition": true
                    }
                  ],
                  "valueType": "static",
                  "dynamicValue": ""
                },
                "outputVariableId": "__none__",
                "forceClassify": false,
                "model": "fast-model"
              },
              "prompt": {
                "response_format": {
                  "type": "json_object"
                },
                "messages": [
                  {
                    "role": "system",
                    "content": "This task requires precise categorization. The bot should associate the content with a category only if there's an evident, direct, and unambiguous relation. \nEschew inferred, indirect, or imaginative associations.\nPick from the provided categories only if the content unmistakably corresponds. If any uncertainty exists or the content doesn't clearly fit a category, select ANYTHING_ELSE.\n\nReply with a JSON with the following shape:\n```typescript\n{ \n/**\n* The chosen class for classification. Value can be one of:\n* - \"Saturday\"\n* - \"Monday Wednesday Friday\"\n* - \"ANYTHING_ELSE\"\n*/\nvalue: string\n; \n/** A brief explanation for the chosen classification. */\nexplanation: string\n; \n/** The score of the chosen class. */\nscore: number\n}\n```\n\nEg:\n```json\n{\n \"value\": \"Saturday\",\n \"explanation\": \"The content is about...\",\n \"score\": 0.9\n}\n```"
                  },
                  {
                    "role": "user",
                    "content": "Content: {{CLASSIFICATION_INPUT}}\n\nAvailable categories: \n  - Saturday\n  - Monday Wednesday Friday\n  - ANYTHING_ELSE\n\nIf the content doesn't directly align with any categories, select ANYTHING_ELSE."
                  }
                ],
                "model": "fast-model",
                "temperature": 0,
                "signatureVersion": "Jan-2024"
              },
              "nodeId": "nd-b9fc1c8429",
              "transitions": [
                {
                  "id": "trs-de84a8bd42",
                  "type": "transition",
                  "label": "Saturday",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=Saturday"
                  },
                  "destination": {
                    "node": "nd-7308cf4e0b"
                  }
                },
                {
                  "id": "trs-6f6964b325",
                  "type": "transition",
                  "label": "Monday Wednesday Friday",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=Monday Wednesday Friday"
                  },
                  "destination": {
                    "node": "nd-381643424b"
                  }
                }
              ]
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-b9fc1c8429",
          "name": "free_online"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 2070,
          "y": -480,
          "instructions": [
            {
              "id": "ins-6e436c8851",
              "type": "content",
              "content": {
                "type": "card",
                "title": {
                  "valueType": "dynamic",
                  "dynamicValue": "Digital Proficiency Course",
                  "staticValue": ""
                },
                "subtitle": {
                  "valueType": "dynamic",
                  "dynamicValue": "Apply for Digital Proficiency Course on Saturdays",
                  "staticValue": ""
                },
                "actions": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": "Digital Proficiency Course",
                      "value": "https://mygov.govmu.org/dpc/Pages/CourseApplication.aspx?ref=OLT-25-03-OL3-1",
                      "action": "url"
                    }
                  ],
                  "isExpression": true
                }
              },
              "nodeId": "nd-7308cf4e0b",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-d53830614b"
          },
          "id": "nd-7308cf4e0b",
          "name": "online_Saturday"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 2070,
          "y": -315,
          "instructions": [
            {
              "id": "ins-aa4b9ef306",
              "type": "content",
              "content": {
                "type": "card",
                "title": {
                  "valueType": "dynamic",
                  "dynamicValue": "Digital Proficiency Course",
                  "staticValue": ""
                },
                "subtitle": {
                  "valueType": "dynamic",
                  "dynamicValue": "Apply for Digital Proficiency Course on Mondays Wednesdays Fridays",
                  "staticValue": ""
                },
                "actions": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": "Digital Proficiency Course Application Form",
                      "value": "https://mygov.govmu.org/dpc/Pages/CourseApplication.aspx?ref=OLT-25-05-OL1-11",
                      "action": "url"
                    }
                  ],
                  "isExpression": true
                }
              },
              "nodeId": "nd-381643424b",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-d53830614b"
          },
          "id": "nd-381643424b",
          "name": "online_mon_wed_fri"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1545,
          "y": -135,
          "instructions": [
            {
              "id": "ins-2fa40cfe19",
              "type": "capture",
              "entityId": "prompts://SingleChoice/v1",
              "entityName": "Raw Input",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-e5cbc4ec62",
              "variableId": "var-b7c245a1f3",
              "question": {
                "staticValue": "",
                "dynamicValue": "Which school can you go to to attend the course?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Royal College Curepipe"
                      },
                      "value": "Royal College Curepipe",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Queen Elizabeth College"
                      },
                      "value": "Queen Elizabeth College",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Belle Rose SSS"
                      },
                      "value": "Belle Rose SSS",
                      "enabled": true
                    }
                  ],
                  "dynamicValue": ""
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [
                {
                  "id": "trs-d0be5ef071",
                  "type": "transition",
                  "label": "Royal College Curepipe",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=Royal College Curepipe"
                  },
                  "destination": {
                    "node": "nd-58926d9ebb"
                  }
                },
                {
                  "id": "trs-08098f6d21",
                  "type": "transition",
                  "label": "Queen Elizabeth College",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=Queen Elizabeth College"
                  },
                  "destination": {
                    "node": "nd-480b78f185"
                  }
                },
                {
                  "id": "trs-2d3d83ab50",
                  "type": "transition",
                  "label": "Belle Rose SSS",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=Belle Rose SSS"
                  },
                  "destination": {
                    "node": "nd-2ae557c329"
                  }
                }
              ],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Which one would you like? Choices: [ 1) Red Apple, 2) Yellow Apple, 3) Dark Banana ]\" */\ninterface Output = { choice: {{CHOICES_TYPINGS}} }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Which one would you like? Choices: [ 1) Red Apple, 2) Yellow Apple, 3) Dark Banana ]\nuser: I will go with the second one please\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"choice\":\"Yellow Apple\"}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { choice: {{CHOICES_TYPINGS}} }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-e5cbc4ec62",
          "name": "free_ftf"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 2355,
          "y": -150,
          "instructions": [
            {
              "id": "ins-7d209380e2",
              "type": "content",
              "content": {
                "type": "card",
                "title": {
                  "valueType": "dynamic",
                  "dynamicValue": "Digital Proficiency Course",
                  "staticValue": ""
                },
                "subtitle": {
                  "valueType": "dynamic",
                  "dynamicValue": "Apply for Digital Proficiency Course at Royal College Curepipe",
                  "staticValue": ""
                },
                "actions": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": "Digital Proficiency Course",
                      "value": "https://mygov.govmu.org/dpc/Pages/CourseApplication.aspx?ref=OLT-25-03-OL3-1",
                      "action": "url"
                    }
                  ],
                  "isExpression": true
                }
              },
              "nodeId": "nd-e000af1783",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-d53830614b"
          },
          "id": "nd-e000af1783",
          "name": "ftf_rcc"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1980,
          "y": 90,
          "instructions": [
            {
              "id": "ins-4b49106cbd",
              "type": "content",
              "content": {
                "type": "card",
                "title": {
                  "valueType": "dynamic",
                  "dynamicValue": "Digital Proficiency Course",
                  "staticValue": ""
                },
                "subtitle": {
                  "valueType": "dynamic",
                  "dynamicValue": "Apply for Digital Proficiency Course",
                  "staticValue": ""
                },
                "actions": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": "Digital Proficiency Course",
                      "value": "https://mygov.govmu.org/dpc/Pages/CourseApplication.aspx?ref=OLT-25-03-OL3-1",
                      "action": "url"
                    }
                  ],
                  "isExpression": true
                }
              },
              "nodeId": "nd-480b78f185",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-d53830614b"
          },
          "id": "nd-480b78f185",
          "name": "ftf_qec"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1980,
          "y": 240,
          "instructions": [
            {
              "id": "ins-3756014a8c",
              "type": "content",
              "content": {
                "type": "card",
                "title": {
                  "valueType": "dynamic",
                  "dynamicValue": "Digital Proficiency Course",
                  "staticValue": ""
                },
                "subtitle": {
                  "valueType": "dynamic",
                  "dynamicValue": "Apply for Digital Proficiency Course",
                  "staticValue": ""
                },
                "actions": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": "Digital Proficiency Course",
                      "value": "https://mygov.govmu.org/dpc/Pages/CourseApplication.aspx?ref=OLT-25-03-OL3-1",
                      "action": "url"
                    }
                  ],
                  "isExpression": true
                }
              },
              "nodeId": "nd-2ae557c329",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-d53830614b"
          },
          "id": "nd-2ae557c329",
          "name": "ftf_brsss"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1980,
          "y": -150,
          "instructions": [
            {
              "id": "ins-013f38d8f6",
              "type": "capture",
              "entityId": "prompts://DateTime/v1",
              "entityName": "Datetime",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-58926d9ebb",
              "variableId": "var-e12ccf4d6c",
              "question": {
                "staticValue": "",
                "dynamicValue": "When (date)?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"The current year is 2023 and we are in october. When do you want to get a notification about this?\" */\ninterface Output = { year: number; month: number; day: number; hours: number; minutes: number }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: The current year is 2023 and we are in october. When do you want to get a notification about this?\nuser: The 1st of next month at 8am please\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"year\":2023,\"month\":11,\"day\":1,\"hours\":8,\"minutes\":0}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { year: number; month: number; day: number; hours: number; minutes: number }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "type": "aiclassify",
              "id": "ins-9b8bfad94e",
              "task": {
                "input": {
                  "staticValue": "",
                  "valueType": "dynamic",
                  "dynamicValue": "@workflow.date_rcc "
                },
                "classes": {
                  "staticValue": [
                    {
                      "label": "before june 2025 and after date of today",
                      "value": "before june 2025 and after date of today",
                      "isTransition": true
                    },
                    {
                      "label": "after june 2025 and after date of today",
                      "value": "after june 2025 and after date of today",
                      "isTransition": true
                    }
                  ],
                  "valueType": "static",
                  "dynamicValue": ""
                },
                "outputVariableId": "__none__",
                "forceClassify": false,
                "model": "fast-model"
              },
              "prompt": {
                "response_format": {
                  "type": "json_object"
                },
                "messages": [
                  {
                    "role": "system",
                    "content": "This task requires precise categorization. The bot should associate the content with a category only if there's an evident, direct, and unambiguous relation. \nEschew inferred, indirect, or imaginative associations.\nPick from the provided categories only if the content unmistakably corresponds. If any uncertainty exists or the content doesn't clearly fit a category, select ANYTHING_ELSE.\n\nReply with a JSON with the following shape:\n```typescript\n{ \n/**\n* The chosen class for classification. Value can be one of:\n* - \"before june 2025 and after date of today\"\n* - \"after june 2025 and after date of today\"\n* - \"ANYTHING_ELSE\"\n*/\nvalue: string\n; \n/** A brief explanation for the chosen classification. */\nexplanation: string\n; \n/** The score of the chosen class. */\nscore: number\n}\n```\n\nEg:\n```json\n{\n \"value\": \"before june 2025 and after date of today\",\n \"explanation\": \"The content is about...\",\n \"score\": 0.9\n}\n```"
                  },
                  {
                    "role": "user",
                    "content": "Content: {{CLASSIFICATION_INPUT}}\n\nAvailable categories: \n  - before june 2025 and after date of today\n  - after june 2025 and after date of today\n  - ANYTHING_ELSE\n\nIf the content doesn't directly align with any categories, select ANYTHING_ELSE."
                  }
                ],
                "model": "fast-model",
                "temperature": 0,
                "signatureVersion": "Jan-2024"
              },
              "nodeId": "nd-58926d9ebb",
              "transitions": [
                {
                  "id": "trs-5ea15d9bda",
                  "type": "transition",
                  "label": "before june 2025 and after date of today",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=before june 2025 and after date of today"
                  },
                  "destination": {
                    "node": "nd-e000af1783"
                  }
                },
                {
                  "id": "trs-20a37e4198",
                  "type": "transition",
                  "label": "after june 2025 and after date of today",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=after june 2025 and after date of today"
                  },
                  "destination": {

                  }
                }
              ]
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-58926d9ebb",
          "name": "rcc_date"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1290,
          "y": 390,
          "instructions": [
            {
              "id": "ins-dd71047fe7",
              "type": "capture",
              "entityId": "prompts://RawInput/v1",
              "entityName": "Phone Number",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-acc0a2a3a0",
              "variableId": "var-5d1bbef31f",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "Please provide your phone number. ",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "valueType": "dynamic",
                  "dynamicValue": "Sorry! This does not match the format of phone numbers registered in Mauritius. Please retry. (e.g. +2305XXXXXXX)",
                  "staticValue": ""
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-35c43cf19d",
              "type": "action",
              "code": "const regex = /^\\+2305\\d{7}$/\r\nworkflow.validPhone = regex.test(workflow.phone)",
              "origin": "builtin",
              "label": "Validate Phone Number Format for Specific Country Code",
              "nodeId": "nd-acc0a2a3a0",
              "isCustomLabel": false,
              "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) =\u003E __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  const regex = /^\\+2305\\d{7}$/;\n  workflow.validPhone = regex.test(workflow.phone);\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();",
              "transitions": []
            },
            {
              "id": "ins-1c4c38119f",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "!workflow.validPhone"
              },
              "label": "if validPhone is false",
              "generative": {
                "label": "if validPhone is false",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-acc0a2a3a0",
              "description": "",
              "destination": {
                "node": "nd-10aa7afcd5"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-acc0a2a3a0",
          "name": "phone"
        },
        {
          "deletable": true,
          "x": 1620,
          "y": 405,
          "type": "standard",
          "instructions": [
            {
              "id": "ins-d24c419cc0",
              "type": "capture",
              "entityId": "prompts://Confirmation/v1",
              "entityName": "Confirmation",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-58c1cce645",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "A request will be made to apply for the offer of @workflow.offer to {{workflow.name.first}} {{workflow.name.last}} ( @workflow.email / @workflow.phone ). Do you confirm?",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Accept"
                      },
                      "value": "true",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Decline"
                      },
                      "value": "false",
                      "enabled": true
                    }
                  ],
                  "dynamicValue": ""
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [
                {
                  "id": "trs-9efcf82274",
                  "type": "transition",
                  "label": "Accept",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=true"
                  },
                  "destination": {
                    "node": "nd-02ae6dca66"
                  }
                },
                {
                  "id": "trs-e49238911b",
                  "type": "transition",
                  "label": "Decline",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=false"
                  },
                  "destination": {
                    "node": "nd-d53830614b"
                  }
                }
              ],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Do you accept those terms and conditions?\" */\ninterface Output = { confirm: boolean }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Do you accept those terms and conditions?\nuser: yeah I do\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"confirm\":true}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { confirm: boolean }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-58c1cce645",
          "name": "Confirm"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1965,
          "y": 420,
          "instructions": [
            {
              "id": "ins-885644735c",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Request made for application.",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-02ae6dca66",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-d53830614b"
          },
          "id": "nd-02ae6dca66",
          "name": "Confirm_offer"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 465,
          "y": 480,
          "instructions": [
            {
              "id": "ins-f078c84287",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Sorry! We did not understand your request. Do you want more information about Technology and Innovation? E.g. Apply for digital signature or digital proficiency course, Report a crime on MAUCORS, Find your postal code, Subscribe to Home Internet",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-fd9a4d7a74",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-e1f6273f64"
          },
          "id": "nd-fd9a4d7a74",
          "name": "Fallback_tech"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 855,
          "y": 945,
          "instructions": [
            {
              "id": "ins-dfcf6232c3",
              "type": "capture",
              "entityId": "prompts://RawInput/v1",
              "entityName": "Email Address",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-19cb601a93",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "Invalid email, try again please. A valid email address has to be in the format X@X.X",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              },
              "variableId": "var-9318156ec6"
            },
            {
              "id": "ins-00b779a994",
              "type": "action",
              "code": "const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\nworkflow.validEmail = regex.test(workflow.email)",
              "origin": "builtin",
              "label": "Email Validation Using Regular Expression in Workflow",
              "nodeId": "nd-19cb601a93",
              "isCustomLabel": false,
              "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) =\u003E __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  workflow.validEmail = regex.test(workflow.email);\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();",
              "transitions": []
            },
            {
              "id": "ins-dd2c5a8cf3",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "!workflow.validEmail"
              },
              "label": "if validEmail is false",
              "generative": {
                "label": "if validEmail is false",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-19cb601a93",
              "description": "",
              "destination": {
                "node": "nd-19cb601a93"
              },
              "transitions": []
            },
            {
              "id": "ins-9c66d0d9e4",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "workflow.validEmail"
              },
              "label": "if email is valid",
              "generative": {
                "label": "if email is valid",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-19cb601a93",
              "description": "",
              "destination": {
                "node": "nd-acc0a2a3a0"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-19cb601a93",
          "name": "Invalid_email"
        },
        {
          "deletable": true,
          "x": 1290,
          "y": 240,
          "type": "standard",
          "instructions": [
            {
              "id": "ins-bcdbc39f8a",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "{{turn.KnowledgeAgent.answer}}",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-5169307bc3",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-d53830614b"
          },
          "id": "nd-5169307bc3",
          "name": "KB_answer"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 810,
          "y": -945,
          "instructions": [
            {
              "id": "ins-3e6084ca34",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Sorry! Citizenship certificates can only be applied for either 1 or 2 years. Please retry.",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-f620a8b5b8",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-b3ed764035"
          },
          "id": "nd-f620a8b5b8",
          "name": "Fallback"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1665,
          "y": 855,
          "instructions": [
            {
              "id": "ins-2aa3e3b516",
              "type": "capture",
              "entityId": "prompts://RawInput/v1",
              "entityName": "Email Address",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-10aa7afcd5",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "Sorry! This does not match the format of phone numbers registered in Mauritius. Please retry. (e.g. +2305XXXXXXX)",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              },
              "variableId": "var-5d1bbef31f"
            },
            {
              "id": "ins-ba2e7117f8",
              "type": "action",
              "code": "const regex = /^\\+2305\\d{7}$/\r\nworkflow.validPhone = regex.test(workflow.phone)",
              "origin": "builtin",
              "label": "Phone Validation Using Regular Expression in Workflow",
              "nodeId": "nd-10aa7afcd5",
              "isCustomLabel": true,
              "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) =\u003E __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  const regex = /^\\+2305\\d{7}$/;\n  workflow.validPhone = regex.test(workflow.phone);\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();",
              "transitions": []
            },
            {
              "id": "ins-20796e5b18",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "!workflow.validPhone"
              },
              "label": "if validPhone is false",
              "generative": {
                "label": "if validPhone is false",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-10aa7afcd5",
              "description": "",
              "destination": {
                "node": "nd-10aa7afcd5"
              },
              "transitions": []
            },
            {
              "id": "ins-470b080bd9",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "workflow.validPhone"
              },
              "label": "if phone is valid",
              "generative": {
                "label": "if phone is valid",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-10aa7afcd5",
              "description": "",
              "destination": {
                "node": "nd-58c1cce645"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-10aa7afcd5",
          "name": "Invalid_phone"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1260,
          "y": 45,
          "instructions": [
            {
              "id": "ins-7385bf4f5f",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "We couldn't find the postal code for that address. Could you please retry?",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-37802a3461",
              "transitions": []
            },
            {
              "id": "ins-ea7c1354e0",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "label": "always",
              "generative": {
                "label": "always",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": true
                }
              },
              "nodeId": "nd-37802a3461",
              "description": "",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-b5c7ae6de4"
          },
          "id": "nd-37802a3461",
          "name": "kb_fallback"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1005,
          "y": 660,
          "instructions": [
            {
              "id": "ins-af8d2b14db",
              "type": "capture",
              "entityId": "prompts://PersonName/v1",
              "entityName": "Person Name",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-14c29648c0",
              "variableId": "var-4924f56bfa",
              "question": {
                "staticValue": "",
                "dynamicValue": "Please provide your name.",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 3,
                "retryMessage": {
                  "valueType": "dynamic",
                  "dynamicValue": "This is the wrong format of a name. Please retry.",
                  "staticValue": ""
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Who did you want to send the email to?\" */\ninterface Output = { first: string; last: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Who did you want to send the email to?\nuser: My name is Jerry Bean, but please send it to John Doe\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"first\":\"John\",\"last\":\"Doe\"}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { first: string; last: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-7c5a0d063f",
              "type": "capture",
              "entityId": "prompts://RawInput/v1",
              "entityName": "Email Address",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-14c29648c0",
              "variableId": "var-9318156ec6",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "Please provide your email address.",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-91fed20829",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "!workflow.validEmail"
              },
              "label": "if validEmail is false",
              "generative": {
                "label": "if validEmail is false",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-14c29648c0",
              "description": "",
              "destination": {
                "node": "nd-19cb601a93"
              },
              "transitions": []
            },
            {
              "id": "ins-933fb3aab4",
              "type": "action",
              "code": "const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\nworkflow.validEmail = regex.test(workflow.email)",
              "origin": "builtin",
              "label": "Email Validation Using Regular Expression in Workflow",
              "nodeId": "nd-14c29648c0",
              "isCustomLabel": false,
              "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) =\u003E __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  workflow.validEmail = regex.test(workflow.email);\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-14c29648c0",
          "name": "email"
        }
      ],
      "parentFolder": "root"
    },
    {
      "id": "wf-38834e973f",
      "name": "Infrastructure",
      "startNode": "nd-a977556250",
      "variables": [
        {
          "id": "var-7ac6b3840e",
          "name": "infrasctruture_intent",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-6f0873839a",
          "name": "infrastructure_intent",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-c4eaf7ff7e",
          "name": "name",
          "type": "object",
          "description": "",
          "scope": "workflow",
          "typings": "{ first: string; last: string }"
        },
        {
          "id": "var-d2c31f8e4d",
          "name": "address",
          "type": "object",
          "description": "",
          "scope": "workflow",
          "typings": "{ country: string, city: string, street: string, zip: string, number: string }"
        },
        {
          "id": "var-d275c4bb5d",
          "name": "gender",
          "type": "boolean",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-7abf4cebfb",
          "name": "phone",
          "type": "string",
          "description": "",
          "scope": "workflow"
        },
        {
          "id": "var-f5bc9f8503",
          "name": "validPhone",
          "description": "",
          "type": "string",
          "scope": "workflow",
          "defaultValue": "",
          "storeAsTag": false
        }
      ],
      "links": [
        {
          "id": "lnk-12ef1b791c",
          "source": "nd-a977556250",
          "target": "nd-810587b09a",
          "sourcePort": "trs-1d1817f39e"
        }
      ],
      "nodes": [
        {
          "id": "nd-a977556250",
          "name": "Entry",
          "type": "entry",
          "deletable": false,
          "variables": [],
          "instructions": [
            {
              "id": "trs-1d1817f39e",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "nd-810587b09a"
              },
              "transitions": [],
              "nodeId": "nd-a977556250"
            }
          ],
          "x": 100,
          "y": 100
        },
        {
          "id": "nd-73b083c705",
          "name": "Exit",
          "type": "exit",
          "variables": [],
          "deletable": false,
          "instructions": [
            {
              "id": "trs-b8e8c3e762",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "destination": {
                "node": "#"
              },
              "transitions": [],
              "nodeId": "nd-73b083c705"
            }
          ],
          "x": 1695,
          "y": 255
        },
        {
          "id": "nd-810587b09a",
          "name": "Infrastructure_intent",
          "type": "standard",
          "deletable": true,
          "instructions": [
            {
              "id": "ins-6e3387e657",
              "type": "capture",
              "entityId": "prompts://RawInput/v1",
              "entityName": "Raw Input",
              "kbPriority": {
                "enabled": false,
                "searchScope": "specific",
                "kbs": []
              },
              "nodeId": "nd-810587b09a",
              "variableId": "var-6f0873839a",
              "question": {
                "staticValue": "",
                "dynamicValue": "Infrastructure: What do you wish to apply/register for?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "type": "aiclassify",
              "id": "ins-a488f15a79",
              "task": {
                "input": {
                  "staticValue": "",
                  "valueType": "dynamic",
                  "dynamicValue": "@workflow.infrastructure_intent"
                },
                "classes": {
                  "staticValue": [
                    {
                      "label": "Apply for learners",
                      "value": "Apply for learners",
                      "isTransition": true
                    },
                    {
                      "label": "Apply for Driving test",
                      "value": "Apply for Driving test",
                      "isTransition": true
                    },
                    {
                      "label": "Register a vehicle",
                      "value": "Register a vehicle",
                      "isTransition": true
                    },
                    {
                      "label": "Register a vehicle",
                      "value": "Register a vehicle",
                      "isTransition": true
                    },
                    {
                      "label": "Register a vehicle",
                      "value": "Register a vehicle",
                      "isTransition": true
                    }
                  ],
                  "valueType": "static",
                  "dynamicValue": ""
                },
                "outputVariableId": "var-7ac6b3840e",
                "forceClassify": false,
                "model": "fast-model"
              },
              "prompt": {
                "response_format": {
                  "type": "json_object"
                },
                "messages": [
                  {
                    "role": "system",
                    "content": "This task requires precise categorization. The bot should associate the content with a category only if there's an evident, direct, and unambiguous relation. \nEschew inferred, indirect, or imaginative associations.\nPick from the provided categories only if the content unmistakably corresponds. If any uncertainty exists or the content doesn't clearly fit a category, select ANYTHING_ELSE.\n\nReply with a JSON with the following shape:\n```typescript\n{ \n/**\n* The chosen class for classification. Value can be one of:\n* - \"Apply for learners\"\n* - \"Apply for Driving test\"\n* - \"Register a vehicle\"\n* - \"ANYTHING_ELSE\"\n*/\nvalue: string\n; \n/** A brief explanation for the chosen classification. */\nexplanation: string\n; \n/** The score of the chosen class. */\nscore: number\n}\n```\n\nEg:\n```json\n{\n \"value\": \"Apply for learners\",\n \"explanation\": \"The content is about...\",\n \"score\": 0.9\n}\n```"
                  },
                  {
                    "role": "user",
                    "content": "Content: {{CLASSIFICATION_INPUT}}\n\nAvailable categories: \n  - Apply for learners\n  - Apply for Driving test\n  - Register a vehicle\n  - ANYTHING_ELSE\n\nIf the content doesn't directly align with any categories, select ANYTHING_ELSE."
                  }
                ],
                "model": "fast-model",
                "temperature": 0,
                "signatureVersion": "Jan-2024"
              },
              "nodeId": "nd-810587b09a",
              "transitions": [
                {
                  "id": "trs-891a1611a1",
                  "type": "transition",
                  "label": "Apply for learners",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=Apply for learners"
                  },
                  "destination": {
                    "node": "nd-f5aa3d52b9"
                  }
                },
                {
                  "id": "trs-148e9fbbfe",
                  "type": "transition",
                  "label": "Apply for Driving test",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=Apply for Driving test"
                  },
                  "destination": {
                    "node": "nd-827b838a16"
                  }
                },
                {
                  "id": "trs-90f3c3f129",
                  "type": "transition",
                  "label": "Register a vehicle",
                  "condition": {
                    "type": "expression",
                    "payload": "__CLASS=Register a vehicle"
                  },
                  "destination": {
                    "node": "nd-f5aa3d52b9"
                  }
                }
              ]
            },
            {
              "id": "ins-ac28210865",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "!turn.KnowledgeAgent.responded"
              },
              "label": "do not know",
              "generative": {
                "label": "do not know",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-810587b09a",
              "description": "",
              "destination": {
                "node": "nd-6c9b2dae18"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-73b083c705"
          },
          "x": 435,
          "y": 105
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 855,
          "y": -225,
          "instructions": [
            {
              "id": "ins-169018574d",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Registration of vehicle",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-f5aa3d52b9",
              "transitions": []
            },
            {
              "id": "ins-d3dca55449",
              "type": "capture",
              "entityId": "prompts://PersonName/v1",
              "entityName": "Person Name",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-f5aa3d52b9",
              "variableId": "var-c4eaf7ff7e",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "Please provide your name.",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Who did you want to send the email to?\" */\ninterface Output = { first: string; last: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Who did you want to send the email to?\nuser: My name is Jerry Bean, but please send it to John Doe\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"first\":\"John\",\"last\":\"Doe\"}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { first: string; last: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-090cbc437e",
              "type": "capture",
              "entityId": "prompts://PhoneNumber/v1",
              "entityName": "Phone Number",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-f5aa3d52b9",
              "variableId": "var-7abf4cebfb",
              "question": {
                "staticValue": "",
                "dynamicValue": "Phone number?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"What is your phone number and where are you?\" */\ninterface Output = { isValidPhoneNumber: boolean; countryCode?: string; number?: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: What is your phone number and where are you?\nuser: Hello, i'm in canada, my cell is (476) 882-1042\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"isValidPhoneNumber\":true,\"number\":\"4768821042\",\"countryCode\":\"+1\"}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { isValidPhoneNumber: boolean; countryCode?: string; number?: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\nIdentify and extract a valid phone number, considering dashes, spaces, parentheses, and country codes (examples: +33611111111, +8211111111, +212111111111). The phone number should ABSOLUTELY be AT LEAST 8 characters long.\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-5341e88185",
              "type": "capture",
              "entityId": "prompts://FullAddress/v1",
              "entityName": "Full Address",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-f5aa3d52b9",
              "variableId": "var-d2c31f8e4d",
              "question": {
                "staticValue": "",
                "dynamicValue": "Address?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Where should we ship this?\" */\ninterface Output = { country: string, city: string, street: string, zip: string, number: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Where should we ship this?\nuser: ship it in canada.. the address is 8463 rue de la montagne, montreal, qc, h2r 2r2\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"country\":\"Canada\",\"city\":\"Montreal\",\"street\":\"rue de la Montagne\",\"zip\":\"H2R 2R2\",\"number\":\"8463\"}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { country: string, city: string, street: string, zip: string, number: string }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-a0e996ec24",
              "type": "capture",
              "entityId": "prompts://Boolean/v1",
              "entityName": "Boolean",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-f5aa3d52b9",
              "variableId": "var-d275c4bb5d",
              "question": {
                "staticValue": "",
                "dynamicValue": "Gender?",
                "valueType": "dynamic"
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Male"
                      },
                      "value": "true",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Female"
                      },
                      "value": "false",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": ""
                      },
                      "value": "",
                      "enabled": true
                    }
                  ],
                  "dynamicValue": ""
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [
                {
                  "id": "trs-bc5b4ac06e",
                  "type": "transition",
                  "label": "Yes",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=true"
                  },
                  "destination": {

                  }
                },
                {
                  "id": "trs-5d517bcaed",
                  "type": "transition",
                  "label": "No",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=false"
                  },
                  "destination": {

                  }
                }
              ],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"What should I do with the music?\" */\ninterface Output = { bool: boolean }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: What should I do with the music?\nuser: turn it off!\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"bool\":false}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { bool: boolean }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-09b11409fc"
          },
          "id": "nd-f5aa3d52b9",
          "name": "details"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1170,
          "y": -210,
          "instructions": [
            {
              "id": "ins-7f7ee9921c",
              "type": "capture",
              "entityId": "prompts://Confirmation/v1",
              "entityName": "Confirmation",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-09b11409fc",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "Do you want to register for learners permit?",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "valueType": "static",
                  "staticValue": [
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Accept"
                      },
                      "value": "true",
                      "enabled": true
                    },
                    {
                      "label": {
                        "valueType": "dynamic",
                        "dynamicValue": "Decline"
                      },
                      "value": "false",
                      "enabled": true
                    }
                  ],
                  "dynamicValue": ""
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [
                {
                  "id": "trs-223b58137b",
                  "type": "transition",
                  "label": "Accept",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=true"
                  },
                  "destination": {
                    "node": "nd-74d38e5b2b"
                  }
                },
                {
                  "id": "trs-e019243ed9",
                  "type": "transition",
                  "label": "Decline",
                  "condition": {
                    "type": "expression",
                    "payload": "__CHOICE=false"
                  },
                  "destination": {
                    "node": "nd-73b083c705"
                  }
                }
              ],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"Do you accept those terms and conditions?\" */\ninterface Output = { confirm: boolean }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: Do you accept those terms and conditions?\nuser: yeah I do\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{\"confirm\":true}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { confirm: boolean }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-09b11409fc",
          "name": "Confirm"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 870,
          "y": 165,
          "instructions": [
            {
              "id": "ins-e820d9a4d3",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Sorry! We did not understand your request. Do you want more information about infrastructure? E.g. Apply for learners license, drivers license or register a vehicle",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-6c9b2dae18",
              "transitions": []
            },
            {
              "id": "ins-0b3c48859d",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "true"
              },
              "label": "always",
              "generative": {
                "label": "always",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": true
                }
              },
              "nodeId": "nd-6c9b2dae18",
              "description": "",
              "destination": {
                "node": "nd-810587b09a"
              },
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-6c9b2dae18",
          "name": "Fallback"
        },
        {
          "deletable": true,
          "x": 1290,
          "y": 135,
          "type": "standard",
          "instructions": [
            {
              "id": "ins-738e86329e",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Application request made for @workflow.name ",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-74d38e5b2b",
              "transitions": []
            }
          ],
          "defaultTransition": {
            "targetNodeId": "nd-73b083c705"
          },
          "id": "nd-74d38e5b2b",
          "name": "Confirmation"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 840,
          "y": 420,
          "instructions": [
            {
              "id": "ins-575c729c48",
              "type": "content",
              "content": {
                "type": "text",
                "text": {
                  "valueType": "dynamic",
                  "dynamicValue": "Please provide your phone number.",
                  "staticValue": ""
                },
                "typing": {
                  "valueType": "static",
                  "staticValue": true
                }
              },
              "nodeId": "nd-827b838a16"
            },
            {
              "id": "ins-310168bcfa",
              "type": "capture",
              "entityId": "prompts://RawInput/v1",
              "entityName": "Raw Input",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-827b838a16",
              "variableId": "var-7abf4cebfb",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "phone?",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-d68be3fa7d",
              "type": "action",
              "code": "const regex = ^\\+2305\\d{7}$\r\nworkflow.validPhone = regex.test(workflow.phone)",
              "origin": "builtin",
              "label": "Validate Phone Number Format for Specific Country Code",
              "nodeId": "nd-827b838a16",
              "isCustomLabel": false,
              "transpiledCode": "const regex = ^\\+2305\\d{7}$\r\nworkflow.validPhone = regex.test(workflow.phone)"
            },
            {
              "id": "ins-1e6d4614cf",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "!workflow.validPhone"
              },
              "label": "always",
              "generative": {
                "label": "always",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-827b838a16",
              "description": "",
              "destination": {
                "node": "nd-d7bda96928"
              }
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-827b838a16",
          "name": "Standard1"
        },
        {
          "type": "standard",
          "deletable": true,
          "x": 1230,
          "y": 285,
          "instructions": [
            {
              "id": "ins-a2345827bd",
              "type": "capture",
              "entityId": "prompts://RawInput/v1",
              "entityName": "Raw Input",
              "kbPriority": {
                "enabled": true,
                "searchScope": "all",
                "kbs": []
              },
              "nodeId": "nd-d7bda96928",
              "variableId": "var-7abf4cebfb",
              "question": {
                "valueType": "dynamic",
                "dynamicValue": "phone?",
                "staticValue": ""
              },
              "validation": {
                "validators": []
              },
              "choice": {
                "options": {
                  "staticValue": [],
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "retry": {
                "maxRetries": 2,
                "retryMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                }
              },
              "cancellation": {
                "cancellable": true,
                "confirmCancel": true,
                "confirmCancelMessage": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "static"
                }
              },
              "handleFailure": false,
              "historyLookback": 0,
              "skipIfAlreadyFilled": false,
              "transitions": [],
              "prompt": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                  },
                  {
                    "role": "user",
                    "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                  },
                  {
                    "role": "assistant",
                    "content": "{}"
                  },
                  {
                    "role": "user",
                    "content": "\nNow, forget about the previous transcripts. These were just examples, don't consider those as valid transcripts for this new task.\n\n###\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\nENTITIES_IDENTIFIED\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                  }
                ],
                "model": "gpt-3.5-turbo",
                "temperature": 0
              }
            },
            {
              "id": "ins-fe0faeca3b",
              "type": "action",
              "code": "const regex = ^\\+2305\\d{6}$\r\nworkflow.validPhone = regex.test(workflow.phone)",
              "origin": "builtin",
              "label": "Execute code",
              "nodeId": "nd-d7bda96928",
              "transpiledCode": "const regex = ^\\+2305\\d{6}$\r\nworkflow.validPhone = regex.test(workflow.phone)"
            },
            {
              "id": "ins-230f9e5389",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "!workflow.validPhone"
              },
              "label": "not valid",
              "generative": {
                "label": "not valid",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-d7bda96928",
              "description": "",
              "destination": {
                "node": "nd-d7bda96928"
              }
            },
            {
              "id": "ins-0a74dbb252",
              "type": "transition",
              "condition": {
                "type": "expression",
                "payload": "workflow.validPhone"
              },
              "label": "always",
              "generative": {
                "label": "always",
                "suggestion": {
                  "condition": "true"
                },
                "properties": {
                  "condition": false
                }
              },
              "nodeId": "nd-d7bda96928",
              "description": "",
              "destination": {
                "node": "nd-73b083c705"
              }
            }
          ],
          "defaultTransition": {
            "targetNodeId": null
          },
          "id": "nd-d7bda96928",
          "name": "fb"
        }
      ],
      "parentFolder": "root"
    }
  ],
  "actions": [],
  "hooks": [
    {
      "type": "after_llmz_execution",
      "name": "track_iterations",
      "code": "await actions[\"agi/improvement\"].trackIterations({\n  iterations: execution.iterations.map((iteration) =\u003E ({\n    uri: `workflow://${execution.location?.workflowId}/${execution.location?.nodeId}`,\n    conversationId: event.conversationId!,\n    executionId: execution.context.id,\n    iterationId: iteration.id,\n    eventId: event.messageId ?? event.id,\n    userId: event.userId!,\n    iteration: {\n      code: iteration.code ?? \"\",\n      ended_ts: iteration.ended_ts,\n      started_ts: iteration.started_ts,\n      messages: iteration.messages,\n      model: iteration.llm.model,\n      mutations: iteration.mutations,\n      status: iteration.status,\n    },\n  })),\n});\n",
      "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) =\u003E __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  await actions[\"agi/improvement\"].trackIterations({\n    iterations: execution.iterations.map((iteration) =\u003E ({\n      uri: `workflow://${execution.location?.workflowId}/${execution.location?.nodeId}`,\n      conversationId: event.conversationId,\n      executionId: execution.context.id,\n      iterationId: iteration.id,\n      eventId: event.messageId ?? event.id,\n      userId: event.userId,\n      iteration: {\n        code: iteration.code ?? \"\",\n        ended_ts: iteration.ended_ts,\n        started_ts: iteration.started_ts,\n        messages: iteration.messages,\n        model: iteration.llm.model,\n        mutations: iteration.mutations,\n        status: iteration.status\n      }\n    }))\n  });\n  ;\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();",
      "origin": {
        "type": "integration",
        "integration": {
          "id": "agi/improvement",
          "name": "agi/improvement",
          "version": "1.0.0",
          "title": "Improvement"
        }
      }
    },
    {
      "type": "before_llmz_execution",
      "name": "inject_learnings",
      "code": "const { items } = await actions[\"agi/improvement\"].findFeedback({\n  uri: `workflow://${context.location?.workflowId}/${context.location?.nodeId}`,\n  search: context.transcript.map((x) =\u003E `${x.role}: ${x.content}`).join(\"\\n\"),\n});\n\nif (items.length) {\n  context.instructions += `\n\n    ## Learnings from Previous Experiences\n\n    ${items\n      .map(\n        (x, i) =\u003E `### Learning ${i + 1}\n    ${x.learning}\n    `\n      )\n      .join(\"\\n\")}\n    `;\n}\n",
      "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) =\u003E __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  const { items } = await actions[\"agi/improvement\"].findFeedback({\n    uri: `workflow://${context.location?.workflowId}/${context.location?.nodeId}`,\n    search: context.transcript.map((x) =\u003E `${x.role}: ${x.content}`).join(\"\\n\")\n  });\n  if (items.length) {\n    context.instructions += `\n\n    ## Learnings from Previous Experiences\n\n    ${items.map(\n      (x, i) =\u003E `### Learning ${i + 1}\n    ${x.learning}\n    `\n    ).join(\"\\n\")}\n    `;\n  }\n  ;\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();",
      "origin": {
        "type": "integration",
        "integration": {
          "id": "agi/improvement",
          "name": "agi/improvement",
          "version": "1.0.0",
          "title": "Improvement"
        }
      }
    },
    {
      "type": "before_llmz_execution",
      "name": "knowledge-base-table-of-content",
      "code": "\n// \u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\n// This hook is generated and managed by the \"agi/kbo\" integration.\n// This hook provides your autonomous nodes with a Table of Contents of the included knowledge of\n// the knowledge bases used in your autonomous nodes (those included on the `search` tool).\n// Do not edit this file manually.\n\nconst searchTools = context.tools.filter((x) =\u003E x.name === 'search')\n\nawait Promise.allSettled(searchTools.map(appendSearchToolTableOfContent))\n\nasync function appendSearchToolTableOfContent(search: LLMZ.Tool) {\n  type SearchMetadata = { kbs: string[]; searchScope: 'all' | 'specific' }\n  const meta: SearchMetadata = search.metadata?.kbs ?? {\n    kbs: [],\n    searchScope: 'all'\n  }\n\n  const kbs = meta.searchScope === 'specific' ? meta.kbs : Artifact.knowledge_base.map((x) =\u003E x.id)\n\n  const passages = await Promise.allSettled(\n    kbs.map((kbId) =\u003E\n      client.searchFiles({\n        query: event.preview,\n        consolidate: true,\n        contextDepth: 2,\n        limit: 2,\n        tags: {\n          purpose: 'master-summary',\n          kbId\n        }\n      })\n    )\n  ).then((x) =\u003E x.flatMap((y) =\u003E (y.status === 'fulfilled' ? y.value.passages.map((p) =\u003E p.content) : [])))\n\n  if (passages.length) {\n    context.instructions += `## Table of Contents (for tool \\`${search.name}\\`)\n\nThe below is a summary of the knowledge included in the Knowledge Bases (available to you when calling \\`${search.name}\\` tool).\n\n${passages.join('\\n\\n')}\n\n`\n  }\n}\n\n// End of the hook\n// \u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\n",
      "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) =\u003E __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  const searchTools = context.tools.filter((x) =\u003E x.name === \"search\");\n  await Promise.allSettled(searchTools.map(appendSearchToolTableOfContent));\n  async function appendSearchToolTableOfContent(search) {\n    const meta = search.metadata?.kbs ?? {\n      kbs: [],\n      searchScope: \"all\"\n    };\n    const kbs = meta.searchScope === \"specific\" ? meta.kbs : Artifact.knowledge_base.map((x) =\u003E x.id);\n    const passages = await Promise.allSettled(\n      kbs.map(\n        (kbId) =\u003E client.searchFiles({\n          query: event.preview,\n          consolidate: true,\n          contextDepth: 2,\n          limit: 2,\n          tags: {\n            purpose: \"master-summary\",\n            kbId\n          }\n        })\n      )\n    ).then((x) =\u003E x.flatMap((y) =\u003E y.status === \"fulfilled\" ? y.value.passages.map((p) =\u003E p.content) : []));\n    if (passages.length) {\n      context.instructions += `## Table of Contents (for tool \\`${search.name}\\`)\n\nThe below is a summary of the knowledge included in the Knowledge Bases (available to you when calling \\`${search.name}\\` tool).\n\n${passages.join(\"\\n\\n\")}\n\n`;\n    }\n  }\n  __name(appendSearchToolTableOfContent, \"appendSearchToolTableOfContent\");\n  ;\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();",
      "origin": {
        "type": "integration",
        "integration": {
          "id": "agi/kbo",
          "name": "agi/kbo",
          "version": "2.0.3",
          "title": "Knowledge Base Optimizer"
        }
      }
    },
    {
      "type": "before_outgoing_middleware",
      "name": "knowledge-base-analytics",
      "code": "\n// \u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\n// This hook is generated and managed by the \"agi/kbo\" integration.\n// This hook provides your autonomous nodes with a Table of Contents of the included knowledge of\n// the knowledge bases used in your autonomous nodes (those included on the `search` tool).\n// Do not edit this file manually.\n  try {\n    const citations = (outgoingEvent.citations ?? [])\n      .map((c) =\u003E c.citation.source)\n      .map((source) =\u003E ({ kbId: source?.kbId, fileId: source?.docId }))\n\n    void actions['agi/kbo'].trackKbQuery({ citations })\n  } catch {}\n\n// End of the hook\n// \u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\n",
      "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) =\u003E __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  try {\n    const citations = (outgoingEvent.citations ?? []).map((c) =\u003E c.citation.source).map((source) =\u003E ({ kbId: source?.kbId, fileId: source?.docId }));\n    void actions[\"agi/kbo\"].trackKbQuery({ citations });\n  } catch {\n  }\n  ;\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();",
      "origin": {
        "type": "integration",
        "integration": {
          "id": "agi/kbo",
          "name": "agi/kbo",
          "version": "2.0.3",
          "title": "Knowledge Base Optimizer"
        }
      }
    },
    {
      "type": "after_conversation_end",
      "name": "conversation-analyzer-track-conversation",
      "code": "\n// \u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\u003E\n// This hook is generated and managed by the \"agi/connor\" integration.\n// This hook tracks your conversations to provide some useful analytics on them. See the Int_Connor_Conversations_Table\n// Do not edit this file manually.\n\n   const { success, error } = await actions['agi/connor'].addOrUpdateConversation({\n    conversationId: event.conversationId,\n    transcript: event.state.session.history.length\n      ? event.state.session.history.map((h) =\u003E ({ sender: h.sender, preview: h.preview }))\n      : [{ sender: 'user', preview: event.preview }]\n  })\n\n// End of the hook\n// \u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\u003C\n",
      "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) =\u003E __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  const { success, error } = await actions[\"agi/connor\"].addOrUpdateConversation({\n    conversationId: event.conversationId,\n    transcript: event.state.session.history.length ? event.state.session.history.map((h) =\u003E ({ sender: h.sender, preview: h.preview })) : [{ sender: \"user\", preview: event.preview }]\n  });\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();",
      "origin": {
        "type": "integration",
        "integration": {
          "id": "agi/connor",
          "name": "agi/connor",
          "version": "0.1.0",
          "title": "Conversation Analyzer"
        }
      }
    }
  ],
  "models": [
    {
      "type": "openbook_v1",
      "model_hash": "1lg0o82",
      "model_langs": [
        "en"
      ],
      "model_endpoint": "https://api.botpress.cloud/v1/cognitive/openbook",
      "training_started_on": "2025-04-12T22:18:40.332Z",
      "training_status": "done",
      "model_id": "eadfe510c28df888.d208c1c3dae45987",
      "training_progress": 1,
      "training_ended_on": "2025-04-12T22:18:43.316Z"
    }
  ],
  "list_entities": [],
  "pattern_entities": [],
  "knowledge_base": [
    {
      "dataSources": [
        {
          "created_on": 1722900679385,
          "data": {

          },
          "disabled": false,
          "id": "ds-529bb979ed",
          "type": "file-api"
        }
      ],
      "description": "This is about New KB1",
      "id": "kb-2f0a7ea639",
      "name": "Default Knowledge Base",
      "parentFolder": "root"
    },
    {
      "dataSources": [
        {
          "created_on": 1744562624607,
          "data": {

          },
          "disabled": false,
          "id": "ds-61125ad76f",
          "type": "file-api"
        },
        {
          "created_on": 1744580021693,
          "data": {
            "html": "\u003Cp\u003E\u003Cstrong\u003EPOSTAL CODE\u003C/strong\u003E LOCATION\u003Cbr\u003E\u003Cstrong\u003E72257 \u003C/strong\u003ETRIANON\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E11219 \u003C/strong\u003EPailles\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E71349 \u003C/strong\u003EPLAISANCE\u003C/p\u003E"
          },
          "disabled": false,
          "id": "ds-9e51118e2e",
          "type": "rich-text"
        }
      ],
      "description": "This is about Postal codes",
      "id": "kb-b8e70b5cbf",
      "modalities": [
        "text"
      ],
      "name": "Postal codes",
      "parentFolder": "root"
    }
  ],
  "folders": [],
  "tables": {
    "table_01JRP1APARKSD0RW51ZT9MQGXW": {
      "id": "table_01JRP1APARKSD0RW51ZT9MQGXW",
      "name": "RouterAgentTable",
      "factor": 1,
      "frozen": false,
      "tags": {
        "role": "agents/router/intents",
        "agent": "RouterAgent",
        "system": "true"
      },
      "createdAt": "2025-04-12T22:18:38.809Z",
      "updatedAt": "2025-04-12T22:18:38.809Z",
      "createdBy": "user:cd38838c-d128-4b9b-9bfb-ad34350ab450",
      "updatedBy": null,
      "isComputeEnabled": false,
      "schema": {
        "type": "object",
        "x-zui": {

        },
        "required": [
          "phrase",
          "intentId",
          "phraseId"
        ],
        "properties": {
          "phrase": {
            "type": "string",
            "x-zui": {
              "index": 0,
              "searchable": true
            }
          },
          "intentId": {
            "type": "string",
            "x-zui": {
              "index": 1,
              "searchable": true
            }
          },
          "phraseId": {
            "type": "string",
            "x-zui": {
              "index": 2,
              "searchable": true
            }
          }
        },
        "additionalProperties": true
      },
      "parentFolder": "root",
      "selectors": []
    },
    "table_01JRP1APCN4SSKH1PNBNFMA0KD": {
      "id": "table_01JRP1APCN4SSKH1PNBNFMA0KD",
      "name": "Int_Connor_Conversations_Table",
      "factor": 30,
      "frozen": true,
      "tags": {
        "origin": "integration",
        "purpose": "Conversations",
        "version": "Dec-2024",
        "integration": "Int_connor",
        "x-studio-icon": "lucide://MessagesSquare",
        "x-studio-color": "grass",
        "x-studio-title": "Conversations",
        "x-studio-readonly": "true",
        "x-studio-description": "Table for analyzing conversations"
      },
      "createdAt": "2025-04-12T22:18:38.870Z",
      "updatedAt": "2025-04-12T22:18:38.870Z",
      "createdBy": "user:cd38838c-d128-4b9b-9bfb-ad34350ab450",
      "updatedBy": null,
      "isComputeEnabled": true,
      "schema": {
        "type": "object",
        "x-zui": {

        },
        "required": [
          "topics",
          "summary",
          "resolved",
          "transcript",
          "escalations",
          "conversationId"
        ],
        "properties": {
          "topics": {
            "type": "array",
            "items": {
              "type": "string",
              "x-zui": {

              }
            },
            "x-zui": {
              "index": 0,
              "title": "Topics",
              "computed": {
                "action": "ai",
                "prompt": "Identify the topics mentioned by the user in the provided transcript. Focus only on user-initiated topics relevant to their needs (e.g., billing issues, technical troubleshooting, product recommendations, account setup, feature requests, complaints, or cancellation inquiries). \nTranscript:\n\n{{transcript}}",
                "dependencies": [
                  "transcript"
                ]
              },
              "searchable": true
            },
            "nullable": true,
            "description": "Optional. An array of topics or themes discussed during the conversation."
          },
          "summary": {
            "type": "string",
            "x-zui": {
              "index": 1,
              "title": "Summary",
              "computed": {
                "action": "ai",
                "prompt": "Summarize the provided transcript.\nHere's the transcript:\n\n{{transcript}}",
                "dependencies": [
                  "transcript"
                ]
              },
              "searchable": true
            },
            "nullable": true,
            "description": "A brief summary of the conversation's content."
          },
          "resolved": {
            "type": "boolean",
            "x-zui": {
              "index": 2,
              "title": "Resolved",
              "computed": {
                "action": "ai",
                "prompt": "Based on the transcript decide whether the users queries were resolved or not by the end of the chat. If not resolved respond with `false`.\nHere's the transcript:\n\n{{transcript}}",
                "dependencies": [
                  "transcript"
                ]
              },
              "searchable": true
            },
            "nullable": true,
            "description": "A boolean indicating whether the customer's issue was resolved by the end of the chat."
          },
          "sentiment": {
            "enum": [
              "very positive",
              "positive",
              "neutral",
              "negative",
              "very negative"
            ],
            "type": "string",
            "x-zui": {
              "index": 3,
              "title": "Sentiment",
              "computed": {
                "action": "ai",
                "prompt": "Based on the transcript decide the overall sentiment inferred from the conversation (from the following - very positive, positive, neutral, negative, very negative).\nHere's the transcript:\n\n{{transcript}}",
                "dependencies": [
                  "transcript"
                ]
              },
              "searchable": true
            },
            "nullable": true,
            "description": "Optional. The overall sentiment inferred from the conversation (e.g., positive, neutral, negative)."
          },
          "transcript": {
            "type": "array",
            "items": {
              "type": "object",
              "x-zui": {

              },
              "required": [
                "sender",
                "preview"
              ],
              "properties": {
                "sender": {
                  "enum": [
                    "bot",
                    "user"
                  ],
                  "type": "string",
                  "x-zui": {

                  }
                },
                "preview": {
                  "type": "string",
                  "x-zui": {

                  }
                }
              },
              "additionalProperties": false
            },
            "x-zui": {
              "index": 4,
              "title": "Transcript",
              "searchable": true
            },
            "description": "The transcript of the conversation, represented as an array of message items."
          },
          "escalations": {
            "type": "array",
            "items": {
              "type": "string",
              "x-zui": {

              }
            },
            "x-zui": {
              "index": 5,
              "title": "Escalations",
              "computed": {
                "action": "ai",
                "prompt": "Extract the escalations from the provided transcript. An array representing moments when the conversation was escalated to another team member or department.\nHere's the transcript:\n\n{{transcript}}",
                "dependencies": [
                  "transcript"
                ]
              },
              "searchable": true
            },
            "nullable": true,
            "description": "Optional. An array representing moments when the conversation was escalated to another team member or department."
          },
          "conversationId": {
            "type": "string",
            "x-zui": {
              "index": 6,
              "title": "Conversation ID",
              "searchable": true
            },
            "description": "A unique identifier for this specific chat session."
          }
        },
        "additionalProperties": true
      },
      "parentFolder": "root",
      "selectors": [],
      "metadata": {
        "columns": [
          {
            "index": 0,
            "width": 50
          },
          {
            "index": 1,
            "width": 120
          },
          {
            "index": 2,
            "width": 120
          },
          {
            "index": 5,
            "width": 303,
            "hidden": false
          },
          {
            "index": 6,
            "width": 224,
            "hidden": false
          },
          {
            "index": 7,
            "width": 90,
            "hidden": false
          },
          {
            "index": 8,
            "width": 140,
            "hidden": false
          },
          {
            "index": 9,
            "width": 140,
            "hidden": false
          },
          {
            "index": 10,
            "width": 140,
            "hidden": false
          },
          {
            "index": 11,
            "width": 140,
            "hidden": false
          }
        ]
      }
    },
    "table_01JRP1ASB26F16B00FYGR90SSY": {
      "id": "table_01JRP1ASB26F16B00FYGR90SSY",
      "name": "Int_Improvement_Feedback_Table",
      "factor": 30,
      "frozen": true,
      "tags": {
        "origin": "integration",
        "purpose": "improvement",
        "version": "Nov-2024",
        "integration": "Int_Improvement",
        "x-studio-icon": "lucide://atom",
        "x-studio-color": "green",
        "x-studio-title": "Feedback",
        "x-studio-readonly": "true",
        "x-studio-description": "Table to store acquired feedback on iterations for active learning"
      },
      "createdAt": "2025-04-12T22:18:41.891Z",
      "updatedAt": "2025-04-12T22:18:41.891Z",
      "createdBy": "integration:agi/improvement",
      "updatedBy": null,
      "isComputeEnabled": true,
      "schema": {
        "type": "object",
        "x-zui": {

        },
        "required": [
          "uri",
          "iterationId",
          "before",
          "feedback",
          "after"
        ],
        "properties": {
          "uri": {
            "type": "string",
            "x-zui": {
              "index": 0,
              "searchable": true
            },
            "maxLength": 250,
            "minLength": 1
          },
          "after": {
            "type": "string",
            "x-zui": {
              "index": 4,
              "searchable": true
            },
            "minLength": 1
          },
          "before": {
            "type": "string",
            "x-zui": {
              "index": 2,
              "searchable": true
            },
            "minLength": 1
          },
          "feedback": {
            "type": "string",
            "x-zui": {
              "index": 3,
              "searchable": true
            },
            "minLength": 1
          },
          "learning": {
            "type": "string",
            "x-zui": {
              "index": 5,
              "computed": {
                "model": "fast-model",
                "action": "ai",
                "prompt": "What would you tell your future self to improve next time?\nCode Before:\n\n```\n{{before}}\n```\n\nFeedback: \"{{feedback}}\"\n\nCode After:\n\n```\n{{after}}\n```\n\nFor the learning, it must be standalone, concise but also accurately depict the situation and feedback you were given.\n\nTry to follow one of the below structures:\n\n\u003Cexample\u003E\nIn [situation X], I learned that I should [use tool `X` rather than `Y` because ...]\n\u003C/example\u003E\n\n\u003Cexample\u003E\nWhen trying to [...], I should use [tool X, tool Y or tool Z] like this:\n\n\\`\\`\\`\n// snippet to explain a drastic code change between before and after, or a non-obvious code snippet\n\\`\\`\\`\n\u003C/example\u003E\n\n\u003Cexample\u003E\nWhenever [Y] happens, I should avoid [...] and instead [...].\n\u003C/example\u003E\n\nKeep it concise. Do not refer to \"this situation\" or to the feedback. Both have been provided by an expert reviewing the conversation, NOT the actual user. So you must embed the content from the above inside your learning so it is standalone.\n",
                "dependencies": [
                  "before",
                  "feedback",
                  "after"
                ]
              },
              "searchable": true
            },
            "default": null,
            "nullable": true,
            "minLength": 1
          },
          "iterationId": {
            "type": "string",
            "x-zui": {
              "index": 1,
              "searchable": true
            },
            "maxLength": 100,
            "minLength": 1
          }
        },
        "additionalProperties": true
      },
      "parentFolder": "root",
      "selectors": []
    },
    "table_01JRP1AYGF7G3Z5VCE473KXH58": {
      "id": "table_01JRP1AYGF7G3Z5VCE473KXH58",
      "name": "Int_KB_Analytics_Table",
      "factor": 1,
      "frozen": true,
      "tags": {
        "origin": "integration",
        "purpose": "Knowledge Bases",
        "version": "Dec-2024",
        "integration": "Int_kbo",
        "x-studio-icon": "lucide://BookOpenText",
        "x-studio-color": "grass",
        "x-studio-title": "KB Analytics",
        "x-studio-readonly": "true",
        "x-studio-description": "Table for storing the KB Analytics"
      },
      "createdAt": "2025-04-12T22:18:47.184Z",
      "updatedAt": "2025-04-12T22:18:47.184Z",
      "createdBy": "integration:agi/kbo",
      "updatedBy": null,
      "isComputeEnabled": false,
      "schema": {
        "type": "object",
        "x-zui": {

        },
        "required": [
          "uri",
          "fileId",
          "kbId"
        ],
        "properties": {
          "uri": {
            "type": "string",
            "x-zui": {
              "index": 0,
              "searchable": true
            },
            "pattern": "analytics:\\/\\/[A-Z0-9]+$",
            "maxLength": 20,
            "minLength": 13,
            "description": "A URI of the format \"analytics://\u003CULID\u003E\"."
          },
          "kbId": {
            "type": "string",
            "x-zui": {
              "index": 2,
              "searchable": true
            }
          },
          "count": {
            "type": "number",
            "x-zui": {
              "index": 3,
              "searchable": true
            },
            "default": 0
          },
          "fileId": {
            "type": "string",
            "x-zui": {
              "index": 1,
              "searchable": true
            }
          }
        },
        "additionalProperties": true
      },
      "parentFolder": "root",
      "selectors": []
    }
  },
  "schemas": [],
  "metadata": {
    "llmModels": {
      "openai__o3-mini-2025-01-31": {
        "id": "openai__o3-mini-2025-01-31",
        "modelId": "o3-mini-2025-01-31",
        "integrationName": "openai",
        "label": "GPT o3-mini",
        "inputCostPer1MTokens": 1.1,
        "inputMaxTokens": 200000,
        "outputCostPer1MTokens": 4.4,
        "outputMaxTokens": 100000,
        "description": "o3-mini is our most recent small reasoning model, providing high intelligence at the same cost and latency targets of o1-mini. o3-mini also supports key developer features, like Structured Outputs, function calling, Batch API, and more. Like other models in the o-series, it is designed to excel at science, math, and coding tasks. The knowledge cutoff for o3-mini models is October, 2023.",
        "tags": [
          "reasoning",
          "general-purpose"
        ]
      },
      "openai__o1-2024-12-17": {
        "id": "openai__o1-2024-12-17",
        "modelId": "o1-2024-12-17",
        "integrationName": "openai",
        "label": "GPT o1",
        "inputCostPer1MTokens": 15,
        "inputMaxTokens": 200000,
        "outputCostPer1MTokens": 60,
        "outputMaxTokens": 100000,
        "description": "The o1 model is designed to solve hard problems across domains. The o1 series of models are trained with reinforcement learning to perform complex reasoning. o1 models think before they answer, producing a long internal chain of thought before responding to the user.",
        "tags": [
          "reasoning",
          "vision",
          "general-purpose"
        ]
      },
      "openai__o1-mini-2024-09-12": {
        "id": "openai__o1-mini-2024-09-12",
        "modelId": "o1-mini-2024-09-12",
        "integrationName": "openai",
        "label": "GPT o1-mini",
        "inputCostPer1MTokens": 3,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 12,
        "outputMaxTokens": 65536,
        "description": "The o1-mini model is a fast and affordable reasoning model for specialized tasks. The o1 series of models are trained with reinforcement learning to perform complex reasoning. o1 models think before they answer, producing a long internal chain of thought before responding to the user.",
        "tags": [
          "reasoning",
          "vision",
          "general-purpose"
        ]
      },
      "openai__gpt-4o-mini-2024-07-18": {
        "id": "openai__gpt-4o-mini-2024-07-18",
        "modelId": "gpt-4o-mini-2024-07-18",
        "integrationName": "openai",
        "label": "GPT-4o Mini",
        "inputCostPer1MTokens": 0.15,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 0.6,
        "outputMaxTokens": 16384,
        "description": "GPT-4o mini (‚Äúo‚Äù for ‚Äúomni‚Äù) is OpenAI's most advanced model in the small models category, and their cheapest model yet. It is multimodal (accepting text or image inputs and outputting text), has higher intelligence than gpt-3.5-turbo but is just as fast. It is meant to be used for smaller tasks, including vision tasks. It's recommended to choose gpt-4o-mini where you would have previously used gpt-3.5-turbo as this model is more capable and cheaper.",
        "tags": [
          "recommended",
          "vision",
          "low-cost",
          "general-purpose",
          "function-calling"
        ]
      },
      "openai__gpt-4o-2024-11-20": {
        "id": "openai__gpt-4o-2024-11-20",
        "modelId": "gpt-4o-2024-11-20",
        "integrationName": "openai",
        "label": "GPT-4o (November 2024)",
        "inputCostPer1MTokens": 2.5,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 10,
        "outputMaxTokens": 16384,
        "description": "GPT-4o (‚Äúo‚Äù for ‚Äúomni‚Äù) is OpenAI's most advanced model. It is multimodal (accepting text or image inputs and outputting text), and it has the same high intelligence as GPT-4 Turbo but is cheaper and more efficient.",
        "tags": [
          "recommended",
          "vision",
          "general-purpose",
          "coding",
          "agents",
          "function-calling"
        ]
      },
      "openai__gpt-4o-2024-08-06": {
        "id": "openai__gpt-4o-2024-08-06",
        "modelId": "gpt-4o-2024-08-06",
        "integrationName": "openai",
        "label": "GPT-4o (August 2024)",
        "inputCostPer1MTokens": 2.5,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 10,
        "outputMaxTokens": 16384,
        "description": "GPT-4o (‚Äúo‚Äù for ‚Äúomni‚Äù) is OpenAI's most advanced model. It is multimodal (accepting text or image inputs and outputting text), and it has the same high intelligence as GPT-4 Turbo but is cheaper and more efficient.",
        "tags": [
          "recommended",
          "vision",
          "general-purpose",
          "coding",
          "agents",
          "function-calling"
        ]
      },
      "openai__gpt-4o-2024-05-13": {
        "id": "openai__gpt-4o-2024-05-13",
        "modelId": "gpt-4o-2024-05-13",
        "integrationName": "openai",
        "label": "GPT-4o (May 2024)",
        "inputCostPer1MTokens": 5,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 15,
        "outputMaxTokens": 4096,
        "description": "GPT-4o (‚Äúo‚Äù for ‚Äúomni‚Äù) is OpenAI's most advanced model. It is multimodal (accepting text or image inputs and outputting text), and it has the same high intelligence as GPT-4 Turbo but is cheaper and more efficient.",
        "tags": [
          "vision",
          "general-purpose",
          "coding",
          "agents",
          "function-calling"
        ]
      },
      "openai__gpt-4-turbo-2024-04-09": {
        "id": "openai__gpt-4-turbo-2024-04-09",
        "modelId": "gpt-4-turbo-2024-04-09",
        "integrationName": "openai",
        "label": "GPT-4 Turbo",
        "inputCostPer1MTokens": 10,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 30,
        "outputMaxTokens": 4096,
        "description": "GPT-4 is a large multimodal model (accepting text or image inputs and outputting text) that can solve difficult problems with greater accuracy than any of our previous models, thanks to its broader general knowledge and advanced reasoning capabilities.",
        "tags": [
          "deprecated",
          "general-purpose",
          "coding",
          "agents",
          "function-calling"
        ]
      },
      "openai__gpt-3.5-turbo-0125": {
        "id": "openai__gpt-3.5-turbo-0125",
        "modelId": "gpt-3.5-turbo-0125",
        "integrationName": "openai",
        "label": "GPT-3.5 Turbo",
        "inputCostPer1MTokens": 0.5,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 1.5,
        "outputMaxTokens": 4096,
        "description": "GPT-3.5 Turbo can understand and generate natural language or code and has been optimized for chat but works well for non-chat tasks as well.",
        "tags": [
          "deprecated",
          "general-purpose",
          "low-cost"
        ]
      },
      "anthropic__claude-3-7-sonnet-20250219": {
        "id": "anthropic__claude-3-7-sonnet-20250219",
        "modelId": "claude-3-7-sonnet-20250219",
        "integrationName": "anthropic",
        "label": "Claude 3.7 Sonnet (Standard Mode)",
        "inputCostPer1MTokens": 3,
        "inputMaxTokens": 200000,
        "outputCostPer1MTokens": 15,
        "outputMaxTokens": 8192,
        "description": "Claude 3.7 Sonnet is an advanced large language model with improved reasoning, coding, and problem-solving capabilities. The model demonstrates notable improvements in coding, particularly in front-end development and full-stack updates, and excels in agentic workflows, where it can autonomously navigate multi-step processes.",
        "tags": [
          "recommended",
          "vision",
          "general-purpose",
          "agents",
          "coding",
          "function-calling",
          "storytelling"
        ]
      },
      "anthropic__claude-3-7-sonnet-reasoning-20250219": {
        "id": "anthropic__claude-3-7-sonnet-reasoning-20250219",
        "modelId": "claude-3-7-sonnet-reasoning-20250219",
        "integrationName": "anthropic",
        "label": "Claude 3.7 Sonnet (Reasoning Mode)",
        "inputCostPer1MTokens": 3,
        "inputMaxTokens": 200000,
        "outputCostPer1MTokens": 15,
        "outputMaxTokens": 8192,
        "description": "This model uses the \"Extended Thinking\" mode of Claude 3.7 Sonnet and will use a significantly higher amount of output tokens than the Standard Mode, so this model should only be used for tasks that actually require it.\n\nClaude 3.7 Sonnet is an advanced large language model with improved reasoning, coding, and problem-solving capabilities. The model demonstrates notable improvements in coding, particularly in front-end development and full-stack updates, and excels in agentic workflows, where it can autonomously navigate multi-step processes.",
        "tags": [
          "recommended",
          "vision",
          "general-purpose",
          "agents",
          "coding",
          "function-calling",
          "storytelling"
        ]
      },
      "anthropic__claude-3-5-haiku-20241022": {
        "id": "anthropic__claude-3-5-haiku-20241022",
        "modelId": "claude-3-5-haiku-20241022",
        "integrationName": "anthropic",
        "label": "Claude 3.5 Haiku",
        "inputCostPer1MTokens": 0.8,
        "inputMaxTokens": 200000,
        "outputCostPer1MTokens": 4,
        "outputMaxTokens": 8192,
        "description": "Claude 3.5 Haiku features offers enhanced capabilities in speed, coding accuracy, and tool use. Engineered to excel in real-time applications, it delivers quick response times that are essential for dynamic tasks such as chat interactions and immediate coding suggestions. This makes it highly suitable for environments that demand both speed and precision, such as software development, customer service bots, and data management systems.",
        "tags": [
          "general-purpose"
        ]
      },
      "anthropic__claude-3-5-sonnet-20241022": {
        "id": "anthropic__claude-3-5-sonnet-20241022",
        "modelId": "claude-3-5-sonnet-20241022",
        "integrationName": "anthropic",
        "label": "Claude 3.5 Sonnet (October 2024)",
        "inputCostPer1MTokens": 3,
        "inputMaxTokens": 200000,
        "outputCostPer1MTokens": 15,
        "outputMaxTokens": 8192,
        "description": "Claude 3.5 Sonnet delivers better-than-Opus capabilities, faster-than-Sonnet speeds, at the same Sonnet prices. Sonnet is particularly good at coding, data science, visual processing, and agentic tasks.",
        "tags": [
          "vision",
          "general-purpose",
          "agents",
          "coding",
          "function-calling",
          "storytelling"
        ]
      },
      "anthropic__claude-3-5-sonnet-20240620": {
        "id": "anthropic__claude-3-5-sonnet-20240620",
        "modelId": "claude-3-5-sonnet-20240620",
        "integrationName": "anthropic",
        "label": "Claude 3.5 Sonnet (June 2024)",
        "inputCostPer1MTokens": 3,
        "inputMaxTokens": 200000,
        "outputCostPer1MTokens": 15,
        "outputMaxTokens": 4096,
        "description": "Claude 3.5 Sonnet delivers better-than-Opus capabilities, faster-than-Sonnet speeds, at the same Sonnet prices. Sonnet is particularly good at coding, data science, visual processing, and agentic tasks.",
        "tags": [
          "vision",
          "general-purpose",
          "agents",
          "coding",
          "function-calling",
          "storytelling"
        ]
      },
      "anthropic__claude-3-haiku-20240307": {
        "id": "anthropic__claude-3-haiku-20240307",
        "modelId": "claude-3-haiku-20240307",
        "integrationName": "anthropic",
        "label": "Claude 3 Haiku",
        "inputCostPer1MTokens": 0.25,
        "inputMaxTokens": 200000,
        "outputCostPer1MTokens": 1.25,
        "outputMaxTokens": 4096,
        "description": "Claude 3 Haiku is Anthropic's fastest and most compact model for near-instant responsiveness. Quick and accurate targeted performance.",
        "tags": [
          "low-cost",
          "general-purpose"
        ]
      },
      "groq__deepseek-r1-distill-llama-70b": {
        "id": "groq__deepseek-r1-distill-llama-70b",
        "modelId": "deepseek-r1-distill-llama-70b",
        "integrationName": "groq",
        "label": "DeepSeek R1-Distill Llama 3.3 70B (Preview)",
        "inputCostPer1MTokens": 0.75,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 0.99,
        "outputMaxTokens": 32768,
        "description": "A fine-tuned version of Llama 3.3 70B using samples generated by DeepSeek-R1, making it smarter than the original Llama 70B, particularly for tasks requiring mathematical and factual precision.",
        "tags": [
          "general-purpose",
          "reasoning",
          "preview"
        ]
      },
      "groq__llama-3.3-70b-versatile": {
        "id": "groq__llama-3.3-70b-versatile",
        "modelId": "llama-3.3-70b-versatile",
        "integrationName": "groq",
        "label": "LLaMA 3.3 70B",
        "inputCostPer1MTokens": 0.59,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 0.79,
        "outputMaxTokens": 32768,
        "description": "The Meta Llama 3.3 multilingual large language model (LLM) is a pretrained and instruction tuned generative model in 70B (text in/text out). The Llama 3.3 instruction tuned text only model is optimized for multilingual dialogue use cases and outperforms many of the available open source and closed chat models on common industry benchmarks.",
        "tags": [
          "recommended",
          "general-purpose",
          "coding"
        ]
      },
      "groq__llama-3.2-1b-preview": {
        "id": "groq__llama-3.2-1b-preview",
        "modelId": "llama-3.2-1b-preview",
        "integrationName": "groq",
        "label": "LLaMA 3.2 1B (Preview)",
        "inputCostPer1MTokens": 0.04,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 0.04,
        "outputMaxTokens": 8192,
        "description": "The Llama 3.2 instruction-tuned, text-only models are optimized for multilingual dialogue use cases, including agentic retrieval and summarization tasks.",
        "tags": [
          "low-cost",
          "preview"
        ]
      },
      "groq__llama-3.2-3b-preview": {
        "id": "groq__llama-3.2-3b-preview",
        "modelId": "llama-3.2-3b-preview",
        "integrationName": "groq",
        "label": "LLaMA 3.2 3B (Preview)",
        "inputCostPer1MTokens": 0.06,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 0.06,
        "outputMaxTokens": 8192,
        "description": "The Llama 3.2 instruction-tuned, text-only models are optimized for multilingual dialogue use cases, including agentic retrieval and summarization tasks.",
        "tags": [
          "low-cost",
          "general-purpose",
          "preview"
        ]
      },
      "groq__llama-3.2-11b-vision-preview": {
        "id": "groq__llama-3.2-11b-vision-preview",
        "modelId": "llama-3.2-11b-vision-preview",
        "integrationName": "groq",
        "label": "LLaMA 3.2 11B Vision (Preview)",
        "inputCostPer1MTokens": 0.18,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 0.18,
        "outputMaxTokens": 8192,
        "description": "The Llama 3.2-Vision instruction-tuned models are optimized for visual recognition, image reasoning, captioning, and answering general questions about an image.",
        "tags": [
          "low-cost",
          "vision",
          "general-purpose",
          "preview"
        ]
      },
      "groq__llama-3.2-90b-vision-preview": {
        "id": "groq__llama-3.2-90b-vision-preview",
        "modelId": "llama-3.2-90b-vision-preview",
        "integrationName": "groq",
        "label": "LLaMA 3.2 90B Vision (Preview)",
        "inputCostPer1MTokens": 0.9,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 0.9,
        "outputMaxTokens": 8192,
        "description": "The Llama 3.2-Vision instruction-tuned models are optimized for visual recognition, image reasoning, captioning, and answering general questions about an image.",
        "tags": [
          "recommended",
          "vision",
          "general-purpose"
        ]
      },
      "groq__llama-3.1-8b-instant": {
        "id": "groq__llama-3.1-8b-instant",
        "modelId": "llama-3.1-8b-instant",
        "integrationName": "groq",
        "label": "LLaMA 3.1 8B",
        "inputCostPer1MTokens": 0.05,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 0.08,
        "outputMaxTokens": 8192,
        "description": "The Llama 3.1 instruction-tuned, text-only models are optimized for multilingual dialogue use cases.",
        "tags": [
          "low-cost",
          "general-purpose"
        ]
      },
      "groq__llama3-8b-8192": {
        "id": "groq__llama3-8b-8192",
        "modelId": "llama3-8b-8192",
        "integrationName": "groq",
        "label": "LLaMA 3 8B",
        "inputCostPer1MTokens": 0.05,
        "inputMaxTokens": 8192,
        "outputCostPer1MTokens": 0.08,
        "outputMaxTokens": 8192,
        "description": "Meta developed and released the Meta Llama 3 family of large language models (LLMs), a collection of pretrained and instruction tuned generative text models in 8 and 70B sizes. The Llama 3 instruction tuned models are optimized for dialogue use cases and outperform many of the available open source chat models on common industry benchmarks.",
        "tags": [
          "low-cost",
          "general-purpose",
          "deprecated"
        ]
      },
      "groq__llama3-70b-8192": {
        "id": "groq__llama3-70b-8192",
        "modelId": "llama3-70b-8192",
        "integrationName": "groq",
        "label": "LLaMA 3 70B",
        "inputCostPer1MTokens": 0.59,
        "inputMaxTokens": 8192,
        "outputCostPer1MTokens": 0.79,
        "outputMaxTokens": 8192,
        "description": "Meta developed and released the Meta Llama 3 family of large language models (LLMs), a collection of pretrained and instruction tuned generative text models in 8 and 70B sizes. The Llama 3 instruction tuned models are optimized for dialogue use cases and outperform many of the available open source chat models on common industry benchmarks.",
        "tags": [
          "general-purpose"
        ]
      },
      "groq__gemma2-9b-it": {
        "id": "groq__gemma2-9b-it",
        "modelId": "gemma2-9b-it",
        "integrationName": "groq",
        "label": "Gemma2 9B",
        "inputCostPer1MTokens": 0.2,
        "inputMaxTokens": 8192,
        "outputCostPer1MTokens": 0.2,
        "outputMaxTokens": 8192,
        "description": "Redesigned for outsized performance and unmatched efficiency, Gemma 2 optimizes for blazing-fast inference on diverse hardware. Gemma is a family of lightweight, state-of-the-art open models from Google, built from the same research and technology used to create the Gemini models. They are text-to-text, decoder-only large language models, available in English, with open weights, pre-trained variants, and instruction-tuned variants. Gemma models are well-suited for a variety of text generation tasks, including question answering, summarization, and reasoning.",
        "tags": [
          "low-cost",
          "general-purpose"
        ]
      },
      "cerebras__llama3.1-8b": {
        "id": "cerebras__llama3.1-8b",
        "modelId": "llama3.1-8b",
        "integrationName": "cerebras",
        "label": "Llama 3.1 8B",
        "inputCostPer1MTokens": 0.1,
        "inputMaxTokens": 8192,
        "outputCostPer1MTokens": 0.1,
        "outputMaxTokens": 8192,
        "description": "Meta developed and released the Meta Llama 3 family of large language models (LLMs), a collection of pretrained and instruction tuned generative text models in 8B and 70B sizes. The Llama 3 instruction tuned models are optimized for dialogue use cases and outperform many of the available open source chat models on common industry benchmarks.",
        "tags": [
          "low-cost",
          "general-purpose"
        ]
      },
      "cerebras__llama3.3-70b": {
        "id": "cerebras__llama3.3-70b",
        "modelId": "llama3.3-70b",
        "integrationName": "cerebras",
        "label": "Llama 3.3 70B",
        "inputCostPer1MTokens": 0.85,
        "inputMaxTokens": 8192,
        "outputCostPer1MTokens": 1.2,
        "outputMaxTokens": 8192,
        "description": "Meta developed and released the Meta Llama 3 family of large language models (LLMs), a collection of pretrained and instruction tuned generative text models in 8B and 70B sizes. The Llama 3 instruction tuned models are optimized for dialogue use cases and outperform many of the available open source chat models on common industry benchmarks.",
        "tags": [
          "general-purpose"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/deepseek-r1": {
        "id": "fireworks-ai__accounts/fireworks/models/deepseek-r1",
        "modelId": "accounts/fireworks/models/deepseek-r1",
        "integrationName": "fireworks-ai",
        "label": "DeepSeek R1 (Fast)",
        "inputCostPer1MTokens": 3,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 8,
        "outputMaxTokens": 32768,
        "description": "This version of the R1 model has a perfect balance between speed and cost-efficiency for real-time interactive experiences, with speeds up to 90 tokens per second.\n\nDeepSeek-R1 is a state-of-the-art large language model optimized with reinforcement learning and cold-start data for exceptional reasoning, math, and code performance. **Note**: This model will always use a temperature of 0.6 as recommended by DeepSeek.",
        "tags": [
          "recommended",
          "reasoning",
          "general-purpose",
          "coding"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/deepseek-r1-basic": {
        "id": "fireworks-ai__accounts/fireworks/models/deepseek-r1-basic",
        "modelId": "accounts/fireworks/models/deepseek-r1-basic",
        "integrationName": "fireworks-ai",
        "label": "DeepSeek R1 (Basic)",
        "inputCostPer1MTokens": 0.55,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 2.19,
        "outputMaxTokens": 32768,
        "description": "This version of the R1 model is optimized for throughput and cost-effectiveness and has a lower cost but slightly higher latency than the \"Fast\" version of the model.\n\nDeepSeek-R1 is a state-of-the-art large language model optimized with reinforcement learning and cold-start data for exceptional reasoning, math, and code performance. **Note**: This model will always use a temperature of 0.6 as recommended by DeepSeek.",
        "tags": [
          "recommended",
          "reasoning",
          "general-purpose",
          "coding"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/deepseek-v3": {
        "id": "fireworks-ai__accounts/fireworks/models/deepseek-v3",
        "modelId": "accounts/fireworks/models/deepseek-v3",
        "integrationName": "fireworks-ai",
        "label": "DeepSeek V3",
        "inputCostPer1MTokens": 0.9,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 0.9,
        "outputMaxTokens": 8000,
        "description": "A a strong Mixture-of-Experts (MoE) language model with 671B total parameters with 37B activated for each token from Deepseek.",
        "tags": [
          "general-purpose",
          "coding"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/llama-v3p1-405b-instruct": {
        "id": "fireworks-ai__accounts/fireworks/models/llama-v3p1-405b-instruct",
        "modelId": "accounts/fireworks/models/llama-v3p1-405b-instruct",
        "integrationName": "fireworks-ai",
        "label": "Llama 3.1 405B Instruct",
        "inputCostPer1MTokens": 3,
        "inputMaxTokens": 131072,
        "outputCostPer1MTokens": 3,
        "outputMaxTokens": 131072,
        "description": "The Meta Llama 3.1 collection of multilingual large language models (LLMs) is a collection of pretrained and instruction tuned generative models in 8B, 70B and 405B sizes. The Llama 3.1 instruction tuned text only models (8B, 70B, 405B) are optimized for multilingual dialogue use cases and outperform many of the available open source and closed chat models on common industry benchmarks.",
        "tags": [
          "recommended",
          "general-purpose"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/llama-v3p1-70b-instruct": {
        "id": "fireworks-ai__accounts/fireworks/models/llama-v3p1-70b-instruct",
        "modelId": "accounts/fireworks/models/llama-v3p1-70b-instruct",
        "integrationName": "fireworks-ai",
        "label": "Llama 3.1 70B Instruct",
        "inputCostPer1MTokens": 0.9,
        "inputMaxTokens": 131072,
        "outputCostPer1MTokens": 0.9,
        "outputMaxTokens": 131072,
        "description": "The Meta Llama 3.1 collection of multilingual large language models (LLMs) is a collection of pretrained and instruction tuned generative models in 8B, 70B and 405B sizes. The Llama 3.1 instruction tuned text only models (8B, 70B, 405B) are optimized for multilingual dialogue use cases and outperform many of the available open source and closed chat models on common industry benchmarks.",
        "tags": [
          "general-purpose"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/llama-v3p1-8b-instruct": {
        "id": "fireworks-ai__accounts/fireworks/models/llama-v3p1-8b-instruct",
        "modelId": "accounts/fireworks/models/llama-v3p1-8b-instruct",
        "integrationName": "fireworks-ai",
        "label": "Llama 3.1 8B Instruct",
        "inputCostPer1MTokens": 0.2,
        "inputMaxTokens": 131072,
        "outputCostPer1MTokens": 0.2,
        "outputMaxTokens": 131072,
        "description": "The Meta Llama 3.1 collection of multilingual large language models (LLMs) is a collection of pretrained and instruction tuned generative models in 8B, 70B and 405B sizes. The Llama 3.1 instruction tuned text only models (8B, 70B, 405B) are optimized for multilingual dialogue use cases and outperform many of the available open source and closed chat models on common industry benchmarks.",
        "tags": [
          "low-cost",
          "general-purpose"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/mixtral-8x22b-instruct": {
        "id": "fireworks-ai__accounts/fireworks/models/mixtral-8x22b-instruct",
        "modelId": "accounts/fireworks/models/mixtral-8x22b-instruct",
        "integrationName": "fireworks-ai",
        "label": "Mixtral MoE 8x22B Instruct",
        "inputCostPer1MTokens": 1.2,
        "inputMaxTokens": 65536,
        "outputCostPer1MTokens": 1.2,
        "outputMaxTokens": 65536,
        "description": "Mistral MoE 8x22B Instruct v0.1 model with Sparse Mixture of Experts. Fine tuned for instruction following.",
        "tags": [
          "general-purpose"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/mixtral-8x7b-instruct": {
        "id": "fireworks-ai__accounts/fireworks/models/mixtral-8x7b-instruct",
        "modelId": "accounts/fireworks/models/mixtral-8x7b-instruct",
        "integrationName": "fireworks-ai",
        "label": "Mixtral MoE 8x7B Instruct",
        "inputCostPer1MTokens": 0.5,
        "inputMaxTokens": 32768,
        "outputCostPer1MTokens": 0.5,
        "outputMaxTokens": 32768,
        "description": "Mistral MoE 8x7B Instruct v0.1 model with Sparse Mixture of Experts. Fine tuned for instruction following",
        "tags": [
          "low-cost",
          "general-purpose"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/firefunction-v2": {
        "id": "fireworks-ai__accounts/fireworks/models/firefunction-v2",
        "modelId": "accounts/fireworks/models/firefunction-v2",
        "integrationName": "fireworks-ai",
        "label": "Firefunction V2",
        "inputCostPer1MTokens": 0.9,
        "inputMaxTokens": 8192,
        "outputCostPer1MTokens": 0.9,
        "outputMaxTokens": 8192,
        "description": "Fireworks' latest and most performant function-calling model. Firefunction-v2 is based on Llama-3 and trained to excel at function-calling as well as chat and instruction-following.",
        "tags": [
          "function-calling"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/firellava-13b": {
        "id": "fireworks-ai__accounts/fireworks/models/firellava-13b",
        "modelId": "accounts/fireworks/models/firellava-13b",
        "integrationName": "fireworks-ai",
        "label": "FireLLaVA-13B",
        "inputCostPer1MTokens": 0.2,
        "inputMaxTokens": 4096,
        "outputCostPer1MTokens": 0.2,
        "outputMaxTokens": 4096,
        "description": "Vision-language model allowing both image and text as inputs (single image is recommended), trained on OSS model generated training data.",
        "tags": [
          "low-cost",
          "vision"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/deepseek-coder-v2-instruct": {
        "id": "fireworks-ai__accounts/fireworks/models/deepseek-coder-v2-instruct",
        "modelId": "accounts/fireworks/models/deepseek-coder-v2-instruct",
        "integrationName": "fireworks-ai",
        "label": "DeepSeek Coder V2 Instruct",
        "inputCostPer1MTokens": 2.7,
        "inputMaxTokens": 131072,
        "outputCostPer1MTokens": 2.7,
        "outputMaxTokens": 131072,
        "description": "An open-source Mixture-of-Experts (MoE) code language model that achieves performance comparable to GPT4-Turbo in code-specific tasks from Deepseek.",
        "tags": [
          "coding"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/deepseek-coder-v2-lite-instruct": {
        "id": "fireworks-ai__accounts/fireworks/models/deepseek-coder-v2-lite-instruct",
        "modelId": "accounts/fireworks/models/deepseek-coder-v2-lite-instruct",
        "integrationName": "fireworks-ai",
        "label": "DeepSeek Coder V2 Lite",
        "inputCostPer1MTokens": 0.2,
        "inputMaxTokens": 163840,
        "outputCostPer1MTokens": 0.2,
        "outputMaxTokens": 163840,
        "description": "DeepSeek-Coder-V2, an open-source Mixture-of-Experts (MoE) code language model that achieves performance comparable to GPT4-Turbo in code-specific tasks.",
        "tags": [
          "low-cost",
          "coding"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/mythomax-l2-13b": {
        "id": "fireworks-ai__accounts/fireworks/models/mythomax-l2-13b",
        "modelId": "accounts/fireworks/models/mythomax-l2-13b",
        "integrationName": "fireworks-ai",
        "label": "MythoMax L2 13b",
        "inputCostPer1MTokens": 0.2,
        "inputMaxTokens": 4096,
        "outputCostPer1MTokens": 0.2,
        "outputMaxTokens": 4096,
        "description": "MythoMax L2 is designed to excel at both roleplaying and storytelling, and is an improved variant of the previous MythoMix model, combining the MythoLogic-L2 and Huginn models.",
        "tags": [
          "roleplay",
          "storytelling",
          "low-cost"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/qwen2-72b-instruct": {
        "id": "fireworks-ai__accounts/fireworks/models/qwen2-72b-instruct",
        "modelId": "accounts/fireworks/models/qwen2-72b-instruct",
        "integrationName": "fireworks-ai",
        "label": "Qwen2 72b Instruct",
        "inputCostPer1MTokens": 0.9,
        "inputMaxTokens": 32768,
        "outputCostPer1MTokens": 0.9,
        "outputMaxTokens": 32768,
        "description": "Qwen 2 is the latest large language model series developed by the Qwen team at Alibaba Cloud. Key features and capabilities of Qwen 2 include multilingual proficiency with a particular strength in Asian languages, and enhanced performance in coding, mathematics, and long context understanding",
        "tags": [
          "general-purpose",
          "function-calling"
        ]
      },
      "fireworks-ai__accounts/fireworks/models/gemma2-9b-it": {
        "id": "fireworks-ai__accounts/fireworks/models/gemma2-9b-it",
        "modelId": "accounts/fireworks/models/gemma2-9b-it",
        "integrationName": "fireworks-ai",
        "label": "Gemma 2 9B Instruct",
        "inputCostPer1MTokens": 0.2,
        "inputMaxTokens": 8192,
        "outputCostPer1MTokens": 0.2,
        "outputMaxTokens": 8192,
        "description": "Redesigned for outsized performance and unmatched efficiency, Gemma 2 optimizes for blazing-fast inference on diverse hardware. Gemma is a family of lightweight, state-of-the-art open models from Google, built from the same research and technology used to create the Gemini models. They are text-to-text, decoder-only large language models, available in English, with open weights, pre-trained variants, and instruction-tuned variants. Gemma models are well-suited for a variety of text generation tasks, including question answering, summarization, and reasoning.",
        "tags": [
          "low-cost",
          "general-purpose"
        ]
      },
      "google-ai__models/gemini-2.0-flash": {
        "id": "google-ai__models/gemini-2.0-flash",
        "modelId": "models/gemini-2.0-flash",
        "integrationName": "google-ai",
        "label": "Gemini 2.0 Flash",
        "inputCostPer1MTokens": 0.1,
        "inputMaxTokens": 1048576,
        "outputCostPer1MTokens": 0.4,
        "outputMaxTokens": 8192,
        "description": "Gemini 2.0 Flash delivers next-gen features and improved capabilities, including superior speed, native tool use, multimodal generation, and a 1M token context window.",
        "tags": [
          "recommended",
          "low-cost",
          "general-purpose",
          "vision"
        ]
      },
      "google-ai__models/gemini-1.5-flash-8b-001": {
        "id": "google-ai__models/gemini-1.5-flash-8b-001",
        "modelId": "models/gemini-1.5-flash-8b-001",
        "integrationName": "google-ai",
        "label": "Gemini 1.5 Flash-8B",
        "inputCostPer1MTokens": 0.0375,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 0.15,
        "outputMaxTokens": 128000,
        "description": "A small model designed for lower intelligence tasks. Google AI's fastest and most cost-efficient model with great performance for high-frequency tasks.",
        "tags": [
          "low-cost",
          "general-purpose",
          "vision"
        ]
      },
      "google-ai__models/gemini-1.5-flash-002": {
        "id": "google-ai__models/gemini-1.5-flash-002",
        "modelId": "models/gemini-1.5-flash-002",
        "integrationName": "google-ai",
        "label": "Gemini 1.5 Flash",
        "inputCostPer1MTokens": 0.075,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 0.3,
        "outputMaxTokens": 128000,
        "description": "A fast and versatile model for scaling across diverse tasks. Google AI's most balanced multimodal model with great performance for most tasks.",
        "tags": [
          "recommended",
          "general-purpose",
          "vision"
        ]
      },
      "google-ai__models/gemini-1.5-pro-002": {
        "id": "google-ai__models/gemini-1.5-pro-002",
        "modelId": "models/gemini-1.5-pro-002",
        "integrationName": "google-ai",
        "label": "Gemini 1.5 Pro",
        "inputCostPer1MTokens": 1.25,
        "inputMaxTokens": 128000,
        "outputCostPer1MTokens": 5,
        "outputMaxTokens": 128000,
        "description": "A mid-size multimodal model that is optimized for a wide-range of reasoning tasks. Google AI's best-performing model with features for a wide variety of reasoning tasks.",
        "tags": [
          "recommended",
          "general-purpose",
          "vision"
        ]
      }
    }
  },
  "__temporary_integration_schemas": {
    "webchat": {
      "id": "intver_01JBVV0VQW8XN3Z5V9K8DB1M3B",
      "name": "webchat",
      "title": "Webchat",
      "description": "Webchat integration for Botpress",
      "iconUrl": "https://mediafiles.botpress.cloud/2c56f350-6e19-406a-b018-a4781deb5ff3/integration/icon.svg",
      "readmeUrl": "https://mediafiles.botpress.cloud/intver_01JBVV0VQW8XN3Z5V9K8DB1M3B/integration-version/readme.md",
      "createdAt": "2024-11-04T14:59:50.335Z",
      "updatedAt": "2025-04-08T17:19:41.036Z",
      "version": "0.3.0",
      "public": true,
      "url": "",
      "verificationStatus": "unapproved",
      "interfaces": {
        "typingIndicator": {
          "id": "7cd0ce9f-4cc8-4d2b-94f6-792ad3799ab7",
          "name": "typingIndicator",
          "version": "0.0.1",
          "createdAt": "2025-04-08T17:19:40.705Z",
          "updatedAt": "2025-04-08T17:19:40.705Z",
          "entities": {

          },
          "actions": {
            "startTypingIndicator": {
              "name": "startTypingIndicator"
            },
            "stopTypingIndicator": {
              "name": "stopTypingIndicator"
            }
          },
          "events": {

          },
          "channels": {

          }
        }
      },
      "configuration": {
        "identifier": {
          "required": false
        },
        "schema": {
          "type": "object",
          "properties": {
            "botDisplayName": {
              "type": "string",
              "x-zui": {

              }
            },
            "botAvatarUrl": {
              "type": "string",
              "x-zui": {

              }
            },
            "botDescription": {
              "type": "string",
              "x-zui": {

              }
            },
            "descriptionPhoneNumber": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "link": {
                  "type": "string",
                  "x-zui": {

                  }
                }
              },
              "additionalProperties": false,
              "x-zui": {

              }
            },
            "descriptionEmailAddress": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "link": {
                  "type": "string",
                  "x-zui": {

                  }
                }
              },
              "additionalProperties": false,
              "x-zui": {

              }
            },
            "descriptionWebsiteUrl": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "link": {
                  "type": "string",
                  "x-zui": {

                  }
                }
              },
              "additionalProperties": false,
              "x-zui": {

              }
            },
            "termsConditionsUrl": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "link": {
                  "type": "string",
                  "x-zui": {

                  }
                }
              },
              "additionalProperties": false,
              "x-zui": {

              }
            },
            "privacyPolicyUrl": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "link": {
                  "type": "string",
                  "x-zui": {

                  }
                }
              },
              "additionalProperties": false,
              "x-zui": {

              }
            },
            "botComposerPlaceholder": {
              "type": "string",
              "x-zui": {

              }
            },
            "showPoweredByBotpress": {
              "type": "boolean",
              "x-zui": {

              }
            },
            "additionalStylesheet": {
              "type": "string",
              "x-zui": {

              }
            },
            "additionalStylesheetUrl": {
              "type": "string",
              "x-zui": {

              }
            },
            "allowedOrigins": {
              "type": "array",
              "items": {
                "type": "string",
                "x-zui": {

                }
              },
              "x-zui": {

              }
            },
            "primaryColor": {
              "type": "string",
              "x-zui": {

              }
            },
            "borderRadiusScale": {
              "type": "number",
              "x-zui": {

              }
            },
            "themeMode": {
              "type": "string",
              "enum": [
                "light",
                "dark"
              ],
              "x-zui": {

              }
            },
            "variant": {
              "type": "string",
              "enum": [
                "solid",
                "soft"
              ],
              "x-zui": {

              }
            },
            "fontFamily": {
              "type": "string",
              "x-zui": {

              }
            },
            "showPoweredBy": {
              "type": "boolean",
              "x-zui": {

              }
            },
            "allowFileUpload": {
              "type": "boolean",
              "x-zui": {

              }
            },
            "storageLocation": {
              "type": "string",
              "enum": [
                "sessionStorage",
                "localStorage"
              ],
              "x-zui": {

              }
            }
          },
          "additionalProperties": true,
          "x-zui": {

          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      "configurations": {

      },
      "actions": {
        "configWebchat": {
          "title": "Configure Webchat",
          "description": "Update the webchat configuration during a conversation",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "conversationId": {
                  "type": "string",
                  "description": "The conversation id of the webchat instance. Usually {{event.conversationId}}",
                  "x-zui": {

                  },
                  "title": "Conversation ID",
                  "examples": [
                    "{{event.conversationId}}"
                  ]
                },
                "config": {
                  "type": "string",
                  "description": "A JSON string representing the new configuration. You can use {{JSON.stringify(workflow.someVariable)}} to convert an object to JSON",
                  "x-zui": {

                  },
                  "title": "JSON Configuration",
                  "examples": [
                    "{ \"emailAddress\": \"some@mail.com\" }",
                    "{{JSON.stringify(workflow.someVariable)}}"
                  ]
                }
              },
              "required": [
                "conversationId",
                "config"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "customEvent": {
          "title": "Send Custom Event",
          "description": "Initiate this action to dispatch a custom event to the webchat. Please ensure to appropriately handle this event within your webpage's code. Usage: \n\nwindow.botpressWebChat.onEvent(event =\u003E {}, ['TRIGGER'])",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "conversationId": {
                  "type": "string",
                  "description": "The conversation id of the webchat instance. Usually {{event.conversationId}}",
                  "x-zui": {

                  },
                  "title": "Conversation ID",
                  "examples": [
                    "{{event.conversationId}}"
                  ]
                },
                "event": {
                  "type": "string",
                  "description": "An event as JSON to send to the webchat instance",
                  "x-zui": {

                  },
                  "title": "JSON Payload",
                  "examples": [
                    "{ \"emailAddress\": \"some@mail.com\" }"
                  ]
                }
              },
              "required": [
                "conversationId",
                "event"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "getUserData": {
          "title": "Get User Data",
          "description": "Get the user's information that was provided when the webchat is initialized.",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "The ID of the user. Usually you can access it using {{event.userId}}",
                  "x-zui": {

                  },
                  "title": "User ID",
                  "examples": [
                    "{{event.userId}}"
                  ]
                }
              },
              "required": [
                "userId"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "userData": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "hideWebchat": {
          "title": "Hide Webchat",
          "description": "Hide the webchat widget",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "conversationId": {
                  "type": "string",
                  "description": "The conversation id of the webchat instance. Usually {{event.conversationId}}",
                  "x-zui": {

                  },
                  "title": "Conversation ID",
                  "examples": [
                    "{{event.conversationId}}"
                  ]
                }
              },
              "required": [
                "conversationId"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "showWebchat": {
          "title": "Show Webchat",
          "description": "Show the webchat widget",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "conversationId": {
                  "type": "string",
                  "description": "The conversation id of the webchat instance. Usually {{event.conversationId}}",
                  "x-zui": {

                  },
                  "title": "Conversation ID",
                  "examples": [
                    "{{event.conversationId}}"
                  ]
                }
              },
              "required": [
                "conversationId"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "startTypingIndicator": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "conversationId": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "messageId": {
                  "type": "string",
                  "description": "The message ID to which the typing indicator should be attached",
                  "x-zui": {

                  }
                },
                "timeout": {
                  "type": "number",
                  "x-zui": {

                  },
                  "description": "The timeout in milliseconds after which the typing indicator should stop"
                }
              },
              "required": [
                "conversationId",
                "messageId"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "stopTypingIndicator": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "conversationId": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "messageId": {
                  "type": "string",
                  "description": "The message ID from which the typing indicator should be removed",
                  "x-zui": {

                  }
                }
              },
              "required": [
                "conversationId",
                "messageId"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "toggleWebchat": {
          "title": "Toggle Webchat",
          "description": "Toggle the visibility of the webchat widget",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "conversationId": {
                  "type": "string",
                  "description": "The conversation id of the webchat instance. Usually {{event.conversationId}}",
                  "x-zui": {

                  },
                  "title": "Conversation ID",
                  "examples": [
                    "{{event.conversationId}}"
                  ]
                }
              },
              "required": [
                "conversationId"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        }
      },
      "events": {
        "conversationStarted": {
          "title": "Conversation Started",
          "description": "This event occurs when a user activates the webchat widget, prompting the interface to appear.",
          "schema": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "x-zui": {

                }
              },
              "conversationId": {
                "type": "string",
                "x-zui": {

                }
              }
            },
            "required": [
              "userId",
              "conversationId"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "trigger": {
          "title": "Custom Trigger (advanced)",
          "description": "This event occurs when a payload is sent from the browser. That payload will be available in {{event.payload}}. Usage: \n\nwindow.botpressWebChat.sendPayload({ type: 'trigger', payload: {} })",
          "schema": {
            "type": "object",
            "properties": {
              "origin": {
                "type": "string",
                "const": "website",
                "description": "The origin of the event trigger",
                "x-zui": {

                }
              },
              "userId": {
                "type": "string",
                "description": "The webchat userId that triggered the event",
                "x-zui": {

                }
              },
              "conversationId": {
                "type": "string",
                "description": "The webchat conversationId that triggered the event",
                "x-zui": {

                }
              },
              "payload": {
                "type": "object",
                "additionalProperties": {
                  "x-zui": {

                  }
                },
                "description": "The payload to send with the event",
                "x-zui": {

                }
              }
            },
            "required": [
              "origin",
              "userId",
              "conversationId",
              "payload"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "user": {
        "tags": {
          "id": {

          }
        },
        "creation": {
          "enabled": false,
          "requiredTags": []
        }
      },
      "identifier": {

      },
      "states": {
        "userData": {
          "type": "user",
          "schema": {
            "type": "object",
            "properties": {

            },
            "additionalProperties": true,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "webchatintegration": {
          "type": "integration",
          "schema": {
            "type": "object",
            "properties": {

            },
            "additionalProperties": true,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "channels": {
        "channel": {
          "conversation": {
            "tags": {
              "id": {

              },
              "owner": {

              }
            },
            "creation": {
              "enabled": false,
              "requiredTags": []
            }
          },
          "messages": {
            "bloc": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "const": "text",
                              "x-zui": {

                              }
                            },
                            "payload": {
                              "type": "object",
                              "properties": {
                                "text": {
                                  "type": "string",
                                  "minLength": 1,
                                  "x-zui": {

                                  }
                                },
                                "value": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "text"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "type",
                            "payload"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "const": "markdown",
                              "x-zui": {

                              }
                            },
                            "payload": {
                              "type": "object",
                              "properties": {
                                "markdown": {
                                  "type": "string",
                                  "minLength": 1,
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "markdown"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "type",
                            "payload"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "const": "image",
                              "x-zui": {

                              }
                            },
                            "payload": {
                              "type": "object",
                              "properties": {
                                "imageUrl": {
                                  "type": "string",
                                  "minLength": 1,
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "imageUrl"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "type",
                            "payload"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "const": "audio",
                              "x-zui": {

                              }
                            },
                            "payload": {
                              "type": "object",
                              "properties": {
                                "audioUrl": {
                                  "type": "string",
                                  "minLength": 1,
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "audioUrl"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "type",
                            "payload"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "const": "video",
                              "x-zui": {

                              }
                            },
                            "payload": {
                              "type": "object",
                              "properties": {
                                "videoUrl": {
                                  "type": "string",
                                  "minLength": 1,
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "videoUrl"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "type",
                            "payload"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "const": "file",
                              "x-zui": {

                              }
                            },
                            "payload": {
                              "type": "object",
                              "properties": {
                                "fileUrl": {
                                  "type": "string",
                                  "minLength": 1,
                                  "x-zui": {

                                  }
                                },
                                "title": {
                                  "type": "string",
                                  "minLength": 1,
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "fileUrl"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "type",
                            "payload"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "const": "location",
                              "x-zui": {

                              }
                            },
                            "payload": {
                              "type": "object",
                              "properties": {
                                "latitude": {
                                  "type": "number",
                                  "x-zui": {

                                  }
                                },
                                "longitude": {
                                  "type": "number",
                                  "x-zui": {

                                  }
                                },
                                "address": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "title": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "latitude",
                                "longitude"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "type",
                            "payload"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        }
                      ],
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "items"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            },
            "video": {
              "schema": {
                "type": "object",
                "properties": {
                  "videoUrl": {
                    "type": "string",
                    "minLength": 1,
                    "x-zui": {

                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "videoUrl"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            },
            "text": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "x-zui": {

                    }
                  },
                  "value": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "text"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            },
            "markdown": {
              "schema": {
                "type": "object",
                "properties": {
                  "markdown": {
                    "type": "string",
                    "minLength": 1,
                    "x-zui": {

                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "markdown"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            },
            "location": {
              "schema": {
                "type": "object",
                "properties": {
                  "latitude": {
                    "type": "number",
                    "x-zui": {

                    }
                  },
                  "longitude": {
                    "type": "number",
                    "x-zui": {

                    }
                  },
                  "address": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "title": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "latitude",
                  "longitude"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            },
            "image": {
              "schema": {
                "type": "object",
                "properties": {
                  "imageUrl": {
                    "type": "string",
                    "minLength": 1,
                    "x-zui": {

                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "imageUrl"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            },
            "file": {
              "schema": {
                "type": "object",
                "properties": {
                  "fileUrl": {
                    "type": "string",
                    "minLength": 1,
                    "x-zui": {

                    }
                  },
                  "title": {
                    "x-zui": {

                    },
                    "type": "string",
                    "minLength": 1
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "fileUrl"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            },
            "dropdown": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "x-zui": {

                    }
                  },
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "minLength": 1,
                          "x-zui": {

                          }
                        },
                        "value": {
                          "type": "string",
                          "minLength": 1,
                          "x-zui": {

                          }
                        }
                      },
                      "required": [
                        "label",
                        "value"
                      ],
                      "additionalProperties": false,
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  },
                  "disableFreeText": {
                    "type": "boolean",
                    "x-zui": {

                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "text",
                  "options"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            },
            "choice": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "x-zui": {

                    }
                  },
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "minLength": 1,
                          "x-zui": {

                          }
                        },
                        "value": {
                          "type": "string",
                          "minLength": 1,
                          "x-zui": {

                          }
                        }
                      },
                      "required": [
                        "label",
                        "value"
                      ],
                      "additionalProperties": false,
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  },
                  "disableFreeText": {
                    "type": "boolean",
                    "x-zui": {

                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "text",
                  "options"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            },
            "carousel": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string",
                          "minLength": 1,
                          "x-zui": {

                          }
                        },
                        "subtitle": {
                          "x-zui": {

                          },
                          "type": "string",
                          "minLength": 1
                        },
                        "imageUrl": {
                          "x-zui": {

                          },
                          "type": "string",
                          "minLength": 1
                        },
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "action": {
                                "type": "string",
                                "enum": [
                                  "postback",
                                  "url",
                                  "say"
                                ],
                                "x-zui": {

                                }
                              },
                              "label": {
                                "type": "string",
                                "minLength": 1,
                                "x-zui": {

                                }
                              },
                              "value": {
                                "type": "string",
                                "minLength": 1,
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "action",
                              "label",
                              "value"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          },
                          "x-zui": {

                          }
                        }
                      },
                      "required": [
                        "title",
                        "actions"
                      ],
                      "additionalProperties": false,
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "items"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            },
            "card": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "x-zui": {

                    }
                  },
                  "subtitle": {
                    "x-zui": {

                    },
                    "type": "string",
                    "minLength": 1
                  },
                  "imageUrl": {
                    "x-zui": {

                    },
                    "type": "string",
                    "minLength": 1
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "postback",
                            "url",
                            "say"
                          ],
                          "x-zui": {

                          }
                        },
                        "label": {
                          "type": "string",
                          "minLength": 1,
                          "x-zui": {

                          }
                        },
                        "value": {
                          "type": "string",
                          "minLength": 1,
                          "x-zui": {

                          }
                        }
                      },
                      "required": [
                        "action",
                        "label",
                        "value"
                      ],
                      "additionalProperties": false,
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "title",
                  "actions"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            },
            "audio": {
              "schema": {
                "type": "object",
                "properties": {
                  "audioUrl": {
                    "type": "string",
                    "minLength": 1,
                    "x-zui": {

                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "audioUrl"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            },
            "custom": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "name": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "data": {
                    "x-zui": {

                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "x-zui": {

                      }
                    },
                    "x-zui": {

                    }
                  }
                },
                "required": [
                  "url",
                  "name"
                ],
                "additionalProperties": false,
                "x-zui": {

                },
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            }
          },
          "message": {
            "tags": {
              "id": {

              },
              "replyTo": {

              }
            }
          }
        }
      },
      "entities": {

      },
      "dev": false,
      "secrets": [
        "SIGNAL_URL",
        "SIGNAL_SECRET",
        "AUTH_ENCRYPTION_KEY"
      ],
      "ownerWorkspace": {
        "id": "6a76fa10-e150-4ff6-8f59-a300feec06c1",
        "handle": "botpress",
        "name": "Botpress Team"
      },
      "meta": {
        "views": 0,
        "installs": 0
      }
    },
    "agi/connor": {
      "id": "intver_01JFQPN3KKAX01TM7JQX171C58",
      "name": "agi/connor",
      "title": "Conversation Analyzer",
      "description": "",
      "iconUrl": "https://mediafiles.botpress.cloud/int_01JFEEHFAR527ZRANNV5SH508P/integration/icon.svg",
      "readmeUrl": "https://mediafiles.botpress.cloud/intver_01JFQPN3KKAX01TM7JQX171C58/integration-version/readme.md",
      "createdAt": "2024-12-22T17:29:20.686Z",
      "updatedAt": "2024-12-22T17:30:28.986Z",
      "version": "0.1.0",
      "public": true,
      "url": "",
      "verificationStatus": "approved",
      "interfaces": {

      },
      "configuration": {
        "identifier": {
          "required": false
        },
        "schema": {
          "type": "object"
        }
      },
      "configurations": {

      },
      "actions": {
        "addOrUpdateConversation": {
          "title": "Add or Update Conversation",
          "description": "Adds or updates a conversation in the analyzer",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "conversationId": {
                  "type": "string",
                  "description": "A unique identifier for this specific chat session.",
                  "x-zui": {
                    "title": "Conversation ID"
                  }
                },
                "transcript": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "sender": {
                        "type": "string",
                        "enum": [
                          "bot",
                          "user"
                        ],
                        "x-zui": {

                        }
                      },
                      "preview": {
                        "type": "string",
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "sender",
                      "preview"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "description": "The transcript of the conversation, represented as an array of message items.",
                  "x-zui": {
                    "title": "Transcript"
                  }
                }
              },
              "required": [
                "conversationId",
                "transcript"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "x-zui": {

                  }
                },
                "error": {
                  "type": "string",
                  "x-zui": {

                  }
                }
              },
              "required": [
                "success"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "postInstall": {
          "title": "Post Install",
          "description": "This action is called after the integration is installed",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "purpose": {
                  "type": "string",
                  "const": "studio_post_install",
                  "x-zui": {

                  }
                }
              },
              "required": [
                "purpose"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "views": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "title": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "description": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "iframe"
                            ],
                            "x-zui": {

                            }
                          },
                          "url": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "site": {
                            "type": "string",
                            "enum": [
                              "global-modal",
                              "knowledge-base"
                            ],
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "type",
                          "url",
                          "site"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "id",
                      "title",
                      "description",
                      "content"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "hooks": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "after_incoming_middleware",
                          "after_llmz_execution",
                          "before_incoming_middleware",
                          "before_llmz_execution",
                          "before_outgoing_middleware",
                          "after_conversation_end"
                        ],
                        "x-zui": {

                        }
                      },
                      "name": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "required": {
                        "type": "boolean",
                        "x-zui": {

                        }
                      },
                      "code": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "title": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "description": {
                        "type": "string",
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "name",
                      "required",
                      "code",
                      "title",
                      "description"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "views",
                "hooks"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        }
      },
      "events": {

      },
      "user": {
        "tags": {

        },
        "creation": {
          "enabled": false,
          "requiredTags": []
        }
      },
      "identifier": {

      },
      "states": {

      },
      "channels": {

      },
      "entities": {

      },
      "dev": false,
      "secrets": [],
      "ownerWorkspace": {
        "id": "wkspace_01J3HF59F8D12BZ4HQSYXGTNW6",
        "handle": "agi",
        "name": "Botpress AGI"
      },
      "meta": {
        "views": 0,
        "installs": 0
      }
    },
    "google-ai": {
      "id": "intver_01JKXVH2BD8PQ1DTXZP0CR7D4Q",
      "name": "google-ai",
      "title": "Google AI",
      "description": "Gain access to Gemini models for content generation, chat responses, and advanced language tasks.",
      "iconUrl": "https://mediafiles.botpress.cloud/int_01JC1R2AEBVW4QT77JHS9QKCRD/integration/icon.svg",
      "readmeUrl": "https://mediafiles.botpress.cloud/intver_01JKXVH2BD8PQ1DTXZP0CR7D4Q/integration-version/readme.md",
      "createdAt": "2025-02-12T19:52:44.700Z",
      "updatedAt": "2025-03-10T18:10:39.922Z",
      "version": "4.0.0",
      "public": true,
      "url": "",
      "verificationStatus": "unapproved",
      "interfaces": {
        "llm\u003CmodelRef\u003E": {
          "id": "b759e577-2ce7-451a-abff-68085b224985",
          "name": "llm",
          "version": "8.0.0",
          "createdAt": "2025-03-10T18:10:39.665Z",
          "updatedAt": "2025-03-10T18:10:39.665Z",
          "entities": {
            "modelRef": {
              "name": "modelRef"
            }
          },
          "actions": {
            "generateContent": {
              "name": "generateContent"
            },
            "listLanguageModels": {
              "name": "listLanguageModels"
            }
          },
          "events": {

          },
          "channels": {

          }
        }
      },
      "configuration": {
        "identifier": {
          "required": false
        },
        "schema": {
          "type": "object"
        }
      },
      "configurations": {

      },
      "actions": {
        "generateContent": {
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "enum": [
                        "models/gemini-2.0-flash",
                        "models/gemini-1.5-flash-8b-001",
                        "models/gemini-1.5-flash-002",
                        "models/gemini-1.5-pro-002"
                      ],
                      "description": "Model to use for content generation",
                      "x-zui": {
                        "placeholder": "models/gemini-1.5-flash-002"
                      }
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "reasoningEffort": {
                  "type": "string",
                  "enum": [
                    "low",
                    "medium",
                    "high"
                  ],
                  "x-zui": {

                  }
                },
                "systemPrompt": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "enum": [
                          "user",
                          "assistant"
                        ],
                        "x-zui": {

                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "text",
                          "tool_calls",
                          "tool_result",
                          "multipart"
                        ],
                        "x-zui": {

                        },
                        "default": "text"
                      },
                      "toolCalls": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "type": {
                              "type": "string",
                              "const": "function",
                              "x-zui": {

                              }
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "arguments": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": {
                                        "x-zui": {

                                        }
                                      },
                                      "x-zui": {

                                      }
                                    },
                                    {
                                      "type": "null",
                                      "x-zui": {

                                      }
                                    }
                                  ],
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "toolResultCallId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "image"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "mimeType": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "text": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "url": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null",
                            "x-zui": {

                            }
                          }
                        ],
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "role",
                      "content"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "responseFormat": {
                  "type": "string",
                  "enum": [
                    "text",
                    "json_object"
                  ],
                  "x-zui": {

                  }
                },
                "maxTokens": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "temperature": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 1
                },
                "topP": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 1
                },
                "stopSequences": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "tools": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "function",
                        "x-zui": {

                        }
                      },
                      "function": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "argumentsSchema": {
                            "type": "object",
                            "properties": {

                            },
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "function"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "toolChoice": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "auto",
                        "specific",
                        "any",
                        "none",
                        ""
                      ],
                      "x-zui": {

                      }
                    },
                    "functionName": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "userId": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "debug": {
                  "type": "boolean",
                  "x-zui": {

                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "promptSource": {
                      "type": "string",
                      "x-zui": {

                      }
                    },
                    "promptCategory": {
                      "type": "string",
                      "x-zui": {

                      }
                    },
                    "integrationName": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "messages"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "provider": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "model": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "choices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "text",
                          "tool_calls",
                          "tool_result",
                          "multipart"
                        ],
                        "x-zui": {

                        },
                        "default": "text"
                      },
                      "toolCalls": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "type": {
                              "type": "string",
                              "const": "function",
                              "x-zui": {

                              }
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "arguments": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": {
                                        "x-zui": {

                                        }
                                      },
                                      "x-zui": {

                                      }
                                    },
                                    {
                                      "type": "null",
                                      "x-zui": {

                                      }
                                    }
                                  ],
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "toolResultCallId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "image"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "mimeType": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "text": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "url": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null",
                            "x-zui": {

                            }
                          }
                        ],
                        "x-zui": {

                        }
                      },
                      "role": {
                        "type": "string",
                        "const": "assistant",
                        "x-zui": {

                        }
                      },
                      "index": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "stopReason": {
                        "type": "string",
                        "enum": [
                          "stop",
                          "max_tokens",
                          "tool_calls",
                          "content_filter",
                          "other"
                        ],
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "content",
                      "role",
                      "index",
                      "stopReason"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "usage": {
                  "type": "object",
                  "properties": {
                    "inputTokens": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "inputCost": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "outputTokens": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "outputCost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "inputTokens",
                    "inputCost",
                    "outputTokens",
                    "outputCost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "botpress": {
                  "type": "object",
                  "properties": {
                    "cost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "cost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "id",
                "provider",
                "model",
                "choices",
                "usage",
                "botpress"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listLanguageModels": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "models": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "recommended",
                                "deprecated",
                                "general-purpose",
                                "low-cost",
                                "vision",
                                "coding",
                                "agents",
                                "function-calling",
                                "roleplay",
                                "storytelling",
                                "reasoning",
                                "preview"
                              ],
                              "x-zui": {

                              }
                            },
                            "x-zui": {

                            }
                          },
                          "input": {
                            "type": "object",
                            "properties": {
                              "maxTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "costPer1MTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "maxTokens",
                              "costPer1MTokens"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          },
                          "output": {
                            "type": "object",
                            "properties": {
                              "maxTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "costPer1MTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "maxTokens",
                              "costPer1MTokens"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "tags",
                          "input",
                          "output"
                        ],
                        "x-zui": {

                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "enum": [
                              "models/gemini-2.0-flash",
                              "models/gemini-1.5-flash-8b-001",
                              "models/gemini-1.5-flash-002",
                              "models/gemini-1.5-pro-002"
                            ],
                            "description": "Model to use for content generation",
                            "x-zui": {
                              "placeholder": "models/gemini-1.5-flash-002"
                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "x-zui": {

                        }
                      }
                    ],
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "models"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        }
      },
      "events": {

      },
      "user": {
        "tags": {

        },
        "creation": {
          "enabled": false,
          "requiredTags": []
        }
      },
      "identifier": {

      },
      "states": {

      },
      "channels": {

      },
      "entities": {
        "modelRef": {
          "schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "enum": [
                  "models/gemini-2.0-flash",
                  "models/gemini-1.5-flash-8b-001",
                  "models/gemini-1.5-flash-002",
                  "models/gemini-1.5-pro-002"
                ],
                "description": "Model to use for content generation",
                "x-zui": {
                  "placeholder": "models/gemini-1.5-flash-002"
                }
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "dev": false,
      "secrets": [
        "GOOGLE_AI_API_KEY"
      ],
      "ownerWorkspace": {
        "id": "6a76fa10-e150-4ff6-8f59-a300feec06c1",
        "handle": "botpress",
        "name": "Botpress Team"
      },
      "meta": {
        "views": 0,
        "installs": 0
      }
    },
    "agi/improvement": {
      "id": "intver_01JN2791R60Q47ZSCMCM1D1X4V",
      "name": "agi/improvement",
      "title": "Improvement",
      "description": "",
      "iconUrl": "https://mediafiles.botpress.cloud/int_01JDTX5RMAC2S1GQZ1VCBCPWFS/integration/icon.svg",
      "readmeUrl": "https://mediafiles.botpress.cloud/intver_01JN2791R60Q47ZSCMCM1D1X4V/integration-version/readme.md",
      "createdAt": "2025-02-26T22:50:44.430Z",
      "updatedAt": "2025-02-27T13:13:40.956Z",
      "version": "1.0.0",
      "public": true,
      "url": "",
      "verificationStatus": "approved",
      "interfaces": {

      },
      "configuration": {
        "identifier": {
          "required": false
        },
        "schema": {
          "type": "object"
        }
      },
      "configurations": {

      },
      "actions": {
        "deleteFeedback": {
          "title": "Delete Feedback Entry for Iteration",
          "description": "Deletes feedback on an iteration for active learning.",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "iterationId": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "iterationId"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "x-zui": {

                  }
                }
              },
              "required": [
                "success"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "findFeedback": {
          "title": "Find Feedback",
          "description": "Finds relevant feedback entries for active learning.",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 250,
                  "x-zui": {

                  }
                },
                "search": {
                  "type": "string",
                  "minLength": 1,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "uri",
                "search"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250,
                        "x-zui": {

                        }
                      },
                      "iterationId": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "x-zui": {

                        }
                      },
                      "before": {
                        "type": "string",
                        "minLength": 1,
                        "x-zui": {

                        }
                      },
                      "feedback": {
                        "type": "string",
                        "minLength": 1,
                        "x-zui": {

                        }
                      },
                      "after": {
                        "type": "string",
                        "minLength": 1,
                        "x-zui": {

                        }
                      },
                      "learning": {
                        "anyOf": [
                          {
                            "type": "string",
                            "minLength": 1,
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "x-zui": {

                        },
                        "default": null
                      }
                    },
                    "required": [
                      "uri",
                      "iterationId",
                      "before",
                      "feedback",
                      "after"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "items"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "getIteration": {
          "title": "Get Iteration",
          "description": "Fetches a single iteration by its ID.",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "iterationId": {
                  "type": "string",
                  "minLength": 1,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "iterationId"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "iteration": {
                  "type": "object",
                  "properties": {
                    "uri": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 250,
                      "x-zui": {

                      }
                    },
                    "executionId": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100,
                      "x-zui": {

                      }
                    },
                    "iterationId": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100,
                      "x-zui": {

                      }
                    },
                    "conversationId": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100,
                      "x-zui": {

                      }
                    },
                    "eventId": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100,
                      "x-zui": {

                      }
                    },
                    "userId": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100,
                      "x-zui": {

                      }
                    },
                    "iteration": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "success",
                                "error",
                                "partial"
                              ],
                              "x-zui": {

                              }
                            },
                            "code": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "started_ts": {
                              "type": "number",
                              "x-zui": {

                              }
                            },
                            "ended_ts": {
                              "type": "number",
                              "x-zui": {

                              }
                            },
                            "model": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "mutations": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "object": {
                                    "type": "string",
                                    "x-zui": {

                                    }
                                  },
                                  "property": {
                                    "type": "string",
                                    "x-zui": {

                                    }
                                  }
                                },
                                "required": [
                                  "object",
                                  "property"
                                ],
                                "additionalProperties": true,
                                "x-zui": {

                                }
                              },
                              "x-zui": {

                              }
                            },
                            "messages": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "role": {
                                    "type": "string",
                                    "enum": [
                                      "system",
                                      "assistant",
                                      "user"
                                    ],
                                    "x-zui": {

                                    }
                                  },
                                  "content": {
                                    "type": "string",
                                    "x-zui": {

                                    }
                                  },
                                  "name": {
                                    "type": "string",
                                    "x-zui": {

                                    }
                                  }
                                },
                                "required": [
                                  "role",
                                  "content"
                                ],
                                "additionalProperties": false,
                                "x-zui": {

                                }
                              },
                              "x-zui": {

                              }
                            },
                            "signal": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "truncatedCode": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "variables": {
                                  "type": "object",
                                  "properties": {

                                  },
                                  "additionalProperties": true,
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "truncatedCode",
                                "variables"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            },
                            "error": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "return_value": {
                              "type": "object",
                              "properties": {

                              },
                              "additionalProperties": true,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "status",
                            "code",
                            "started_ts",
                            "ended_ts",
                            "model",
                            "mutations",
                            "messages"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "x-zui": {

                      },
                      "default": null
                    },
                    "swap": {
                      "anyOf": [
                        {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 100,
                          "x-zui": {

                          }
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "x-zui": {

                      },
                      "default": null
                    },
                    "feedback": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "uri": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 250,
                              "x-zui": {

                              }
                            },
                            "iterationId": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 100,
                              "x-zui": {

                              }
                            },
                            "before": {
                              "type": "string",
                              "minLength": 1,
                              "x-zui": {

                              }
                            },
                            "feedback": {
                              "type": "string",
                              "minLength": 1,
                              "x-zui": {

                              }
                            },
                            "after": {
                              "type": "string",
                              "minLength": 1,
                              "x-zui": {

                              }
                            },
                            "learning": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "minLength": 1,
                                  "x-zui": {

                                  }
                                },
                                {
                                  "type": "null"
                                }
                              ],
                              "x-zui": {

                              },
                              "default": null
                            }
                          },
                          "required": [
                            "uri",
                            "iterationId",
                            "before",
                            "feedback",
                            "after"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "uri",
                    "executionId",
                    "iterationId",
                    "conversationId",
                    "eventId",
                    "userId",
                    "feedback"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "iteration"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listConversationIterations": {
          "title": "List Conversation Iterations",
          "description": "Finds LLMz iterations for active learning.",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "nextToken": {
                  "type": "string",
                  "x-zui": {

                  },
                  "description": "Token to fetch next page"
                },
                "conversationId": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100,
                  "description": "Only return iterations with conversationId matching this value",
                  "x-zui": {

                  }
                },
                "uri": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 250,
                  "x-zui": {

                  },
                  "description": "Only return iterations with URI matching this value"
                }
              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "iterations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250,
                        "x-zui": {

                        }
                      },
                      "executionId": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "x-zui": {

                        }
                      },
                      "iterationId": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "x-zui": {

                        }
                      },
                      "conversationId": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "x-zui": {

                        }
                      },
                      "eventId": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "x-zui": {

                        }
                      },
                      "userId": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "x-zui": {

                        }
                      },
                      "iteration": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string",
                                "enum": [
                                  "success",
                                  "error",
                                  "partial"
                                ],
                                "x-zui": {

                                }
                              },
                              "code": {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              "started_ts": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "ended_ts": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "model": {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              "mutations": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "object": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "property": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "object",
                                    "property"
                                  ],
                                  "additionalProperties": true,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              },
                              "messages": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "role": {
                                      "type": "string",
                                      "enum": [
                                        "system",
                                        "assistant",
                                        "user"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "content": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "role",
                                    "content"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              },
                              "signal": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "x-zui": {

                                    }
                                  },
                                  "truncatedCode": {
                                    "type": "string",
                                    "x-zui": {

                                    }
                                  },
                                  "variables": {
                                    "type": "object",
                                    "properties": {

                                    },
                                    "additionalProperties": true,
                                    "x-zui": {

                                    }
                                  }
                                },
                                "required": [
                                  "name",
                                  "truncatedCode",
                                  "variables"
                                ],
                                "additionalProperties": false,
                                "x-zui": {

                                }
                              },
                              "error": {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              "return_value": {
                                "type": "object",
                                "properties": {

                                },
                                "additionalProperties": true,
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "status",
                              "code",
                              "started_ts",
                              "ended_ts",
                              "model",
                              "mutations",
                              "messages"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "x-zui": {

                        },
                        "default": null
                      },
                      "swap": {
                        "anyOf": [
                          {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100,
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "x-zui": {

                        },
                        "default": null
                      }
                    },
                    "required": [
                      "uri",
                      "executionId",
                      "iterationId",
                      "conversationId",
                      "eventId",
                      "userId"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "nextToken": {
                  "type": "string",
                  "x-zui": {

                  }
                }
              },
              "required": [
                "iterations"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listFeedback": {
          "title": "List Feedback Entries",
          "description": "List all the feedback entries, optionally filtered by URI.",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "nextToken": {
                  "type": "string",
                  "x-zui": {

                  },
                  "description": "Token to fetch next page"
                },
                "uri": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 250,
                  "x-zui": {

                  }
                }
              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "nextToken": {
                  "type": "string",
                  "x-zui": {

                  },
                  "description": "Token to fetch next page"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250,
                        "x-zui": {

                        }
                      },
                      "iterationId": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "x-zui": {

                        }
                      },
                      "before": {
                        "type": "string",
                        "minLength": 1,
                        "x-zui": {

                        }
                      },
                      "feedback": {
                        "type": "string",
                        "minLength": 1,
                        "x-zui": {

                        }
                      },
                      "after": {
                        "type": "string",
                        "minLength": 1,
                        "x-zui": {

                        }
                      },
                      "learning": {
                        "anyOf": [
                          {
                            "type": "string",
                            "minLength": 1,
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "x-zui": {

                        },
                        "default": null
                      }
                    },
                    "required": [
                      "uri",
                      "iterationId",
                      "before",
                      "feedback",
                      "after"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "items"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "postInstall": {
          "title": "Post Install",
          "description": "This action is called after the integration is installed",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "purpose": {
                  "type": "string",
                  "const": "studio_post_install",
                  "x-zui": {

                  }
                }
              },
              "required": [
                "purpose"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "views": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "title": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "description": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "iframe"
                            ],
                            "x-zui": {

                            }
                          },
                          "url": {
                            "type": "string",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "type",
                          "url"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "id",
                      "title",
                      "description",
                      "content"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "hooks": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "before_incoming_middleware",
                          "after_incoming_middleware",
                          "before_outgoing_middleware",
                          "before_llmz_execution",
                          "after_llmz_execution",
                          "after_llmz_iteration",
                          "after_conversation_end",
                          "after_turn_end"
                        ],
                        "x-zui": {

                        }
                      },
                      "name": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "required": {
                        "type": "boolean",
                        "x-zui": {

                        }
                      },
                      "code": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "title": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "description": {
                        "type": "string",
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "name",
                      "required",
                      "code",
                      "title",
                      "description"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "views",
                "hooks"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "saveFeedback": {
          "title": "Create or Update Feedback Entry for Iteration",
          "description": "Provides feedback on an iteration for active learning.",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "iterationId": {
                  "type": "string",
                  "minLength": 1,
                  "x-zui": {

                  }
                },
                "feedback": {
                  "type": "string",
                  "minLength": 1,
                  "x-zui": {

                  }
                },
                "after": {
                  "type": "string",
                  "minLength": 1,
                  "x-zui": {

                  }
                },
                "learning": {
                  "anyOf": [
                    {
                      "type": "string",
                      "minLength": 1,
                      "x-zui": {

                      }
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "x-zui": {

                  },
                  "default": null
                }
              },
              "required": [
                "iterationId",
                "feedback",
                "after"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 250,
                  "x-zui": {

                  }
                },
                "iterationId": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100,
                  "x-zui": {

                  }
                },
                "before": {
                  "type": "string",
                  "minLength": 1,
                  "x-zui": {

                  }
                },
                "feedback": {
                  "type": "string",
                  "minLength": 1,
                  "x-zui": {

                  }
                },
                "after": {
                  "type": "string",
                  "minLength": 1,
                  "x-zui": {

                  }
                },
                "learning": {
                  "anyOf": [
                    {
                      "type": "string",
                      "minLength": 1,
                      "x-zui": {

                      }
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "x-zui": {

                  },
                  "default": null
                }
              },
              "required": [
                "uri",
                "iterationId",
                "before",
                "feedback",
                "after"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "trackIterations": {
          "title": "Track Iterations",
          "description": "Tracks LLMz iterations for active learning. This action should be called in an 'after-llmz-execution' hook.",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "iterations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 250,
                        "x-zui": {

                        }
                      },
                      "executionId": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "x-zui": {

                        }
                      },
                      "iterationId": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "x-zui": {

                        }
                      },
                      "conversationId": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "x-zui": {

                        }
                      },
                      "eventId": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "x-zui": {

                        }
                      },
                      "userId": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "x-zui": {

                        }
                      },
                      "iteration": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string",
                                "enum": [
                                  "success",
                                  "error",
                                  "partial"
                                ],
                                "x-zui": {

                                }
                              },
                              "code": {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              "started_ts": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "ended_ts": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "model": {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              "mutations": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "object": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "property": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "object",
                                    "property"
                                  ],
                                  "additionalProperties": true,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              },
                              "messages": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "role": {
                                      "type": "string",
                                      "enum": [
                                        "system",
                                        "assistant",
                                        "user"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "content": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "role",
                                    "content"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              },
                              "signal": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "x-zui": {

                                    }
                                  },
                                  "truncatedCode": {
                                    "type": "string",
                                    "x-zui": {

                                    }
                                  },
                                  "variables": {
                                    "type": "object",
                                    "properties": {

                                    },
                                    "additionalProperties": true,
                                    "x-zui": {

                                    }
                                  }
                                },
                                "required": [
                                  "name",
                                  "truncatedCode",
                                  "variables"
                                ],
                                "additionalProperties": false,
                                "x-zui": {

                                }
                              },
                              "error": {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              "return_value": {
                                "type": "object",
                                "properties": {

                                },
                                "additionalProperties": true,
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "status",
                              "code",
                              "started_ts",
                              "ended_ts",
                              "model",
                              "mutations",
                              "messages"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "x-zui": {

                        },
                        "default": null
                      }
                    },
                    "required": [
                      "uri",
                      "executionId",
                      "iterationId",
                      "conversationId",
                      "eventId",
                      "userId"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "iterations"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "x-zui": {

                  }
                }
              },
              "required": [
                "success"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        }
      },
      "events": {

      },
      "user": {
        "tags": {

        },
        "creation": {
          "enabled": false,
          "requiredTags": []
        }
      },
      "identifier": {

      },
      "states": {

      },
      "channels": {

      },
      "entities": {

      },
      "dev": false,
      "secrets": [],
      "ownerWorkspace": {
        "id": "wkspace_01J3HF59F8D12BZ4HQSYXGTNW6",
        "handle": "agi",
        "name": "Botpress AGI"
      },
      "meta": {
        "views": 0,
        "installs": 0
      }
    },
    "anthropic": {
      "id": "intver_01JN7C46RQXD380E6XNH094WHJ",
      "name": "anthropic",
      "title": "Anthropic",
      "description": "Access a curated list of Claude models to set as your chosen LLM.",
      "iconUrl": "https://mediafiles.botpress.cloud/int_01J29XBDF9D3TT7VWHYBB39G8W/integration/icon.svg",
      "readmeUrl": "https://mediafiles.botpress.cloud/intver_01JN7C46RQXD380E6XNH094WHJ/integration-version/readme.md",
      "createdAt": "2025-02-28T22:51:40.730Z",
      "updatedAt": "2025-03-10T18:09:17.295Z",
      "version": "8.0.0",
      "public": true,
      "url": "",
      "verificationStatus": "unapproved",
      "interfaces": {
        "llm\u003CmodelRef\u003E": {
          "id": "b759e577-2ce7-451a-abff-68085b224985",
          "name": "llm",
          "version": "8.0.0",
          "createdAt": "2025-03-10T18:09:17.017Z",
          "updatedAt": "2025-03-10T18:09:17.017Z",
          "entities": {
            "modelRef": {
              "name": "modelRef"
            }
          },
          "actions": {
            "generateContent": {
              "name": "generateContent"
            },
            "listLanguageModels": {
              "name": "listLanguageModels"
            }
          },
          "events": {

          },
          "channels": {

          }
        }
      },
      "configuration": {
        "identifier": {
          "required": false
        },
        "schema": {
          "type": "object"
        }
      },
      "configurations": {

      },
      "actions": {
        "generateContent": {
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "enum": [
                        "claude-3-7-sonnet-20250219",
                        "claude-3-7-sonnet-reasoning-20250219",
                        "claude-3-5-haiku-20241022",
                        "claude-3-5-sonnet-20241022",
                        "claude-3-5-sonnet-20240620",
                        "claude-3-haiku-20240307"
                      ],
                      "description": "Model to use for content generation",
                      "x-zui": {
                        "placeholder": "claude-3-5-sonnet-20240620"
                      }
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "reasoningEffort": {
                  "type": "string",
                  "enum": [
                    "low",
                    "medium",
                    "high"
                  ],
                  "x-zui": {

                  }
                },
                "systemPrompt": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "enum": [
                          "user",
                          "assistant"
                        ],
                        "x-zui": {

                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "text",
                          "tool_calls",
                          "tool_result",
                          "multipart"
                        ],
                        "x-zui": {

                        },
                        "default": "text"
                      },
                      "toolCalls": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "type": {
                              "type": "string",
                              "const": "function",
                              "x-zui": {

                              }
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "arguments": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": {
                                        "x-zui": {

                                        }
                                      },
                                      "x-zui": {

                                      }
                                    },
                                    {
                                      "type": "null",
                                      "x-zui": {

                                      }
                                    }
                                  ],
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "toolResultCallId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "image"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "mimeType": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "text": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "url": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null",
                            "x-zui": {

                            }
                          }
                        ],
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "role",
                      "content"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "responseFormat": {
                  "type": "string",
                  "enum": [
                    "text",
                    "json_object"
                  ],
                  "x-zui": {

                  }
                },
                "maxTokens": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "temperature": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 1
                },
                "topP": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 1
                },
                "stopSequences": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "tools": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "function",
                        "x-zui": {

                        }
                      },
                      "function": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "argumentsSchema": {
                            "type": "object",
                            "properties": {

                            },
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "function"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "toolChoice": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "auto",
                        "specific",
                        "any",
                        "none",
                        ""
                      ],
                      "x-zui": {

                      }
                    },
                    "functionName": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "userId": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "debug": {
                  "type": "boolean",
                  "x-zui": {

                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "promptSource": {
                      "type": "string",
                      "x-zui": {

                      }
                    },
                    "promptCategory": {
                      "type": "string",
                      "x-zui": {

                      }
                    },
                    "integrationName": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "messages"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "provider": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "model": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "choices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "text",
                          "tool_calls",
                          "tool_result",
                          "multipart"
                        ],
                        "x-zui": {

                        },
                        "default": "text"
                      },
                      "toolCalls": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "type": {
                              "type": "string",
                              "const": "function",
                              "x-zui": {

                              }
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "arguments": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": {
                                        "x-zui": {

                                        }
                                      },
                                      "x-zui": {

                                      }
                                    },
                                    {
                                      "type": "null",
                                      "x-zui": {

                                      }
                                    }
                                  ],
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "toolResultCallId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "image"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "mimeType": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "text": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "url": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null",
                            "x-zui": {

                            }
                          }
                        ],
                        "x-zui": {

                        }
                      },
                      "role": {
                        "type": "string",
                        "const": "assistant",
                        "x-zui": {

                        }
                      },
                      "index": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "stopReason": {
                        "type": "string",
                        "enum": [
                          "stop",
                          "max_tokens",
                          "tool_calls",
                          "content_filter",
                          "other"
                        ],
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "content",
                      "role",
                      "index",
                      "stopReason"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "usage": {
                  "type": "object",
                  "properties": {
                    "inputTokens": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "inputCost": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "outputTokens": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "outputCost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "inputTokens",
                    "inputCost",
                    "outputTokens",
                    "outputCost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "botpress": {
                  "type": "object",
                  "properties": {
                    "cost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "cost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "id",
                "provider",
                "model",
                "choices",
                "usage",
                "botpress"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listLanguageModels": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "models": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "recommended",
                                "deprecated",
                                "general-purpose",
                                "low-cost",
                                "vision",
                                "coding",
                                "agents",
                                "function-calling",
                                "roleplay",
                                "storytelling",
                                "reasoning",
                                "preview"
                              ],
                              "x-zui": {

                              }
                            },
                            "x-zui": {

                            }
                          },
                          "input": {
                            "type": "object",
                            "properties": {
                              "maxTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "costPer1MTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "maxTokens",
                              "costPer1MTokens"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          },
                          "output": {
                            "type": "object",
                            "properties": {
                              "maxTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "costPer1MTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "maxTokens",
                              "costPer1MTokens"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "tags",
                          "input",
                          "output"
                        ],
                        "x-zui": {

                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "enum": [
                              "claude-3-7-sonnet-20250219",
                              "claude-3-7-sonnet-reasoning-20250219",
                              "claude-3-5-haiku-20241022",
                              "claude-3-5-sonnet-20241022",
                              "claude-3-5-sonnet-20240620",
                              "claude-3-haiku-20240307"
                            ],
                            "description": "Model to use for content generation",
                            "x-zui": {
                              "placeholder": "claude-3-5-sonnet-20240620"
                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "x-zui": {

                        }
                      }
                    ],
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "models"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        }
      },
      "events": {

      },
      "user": {
        "tags": {

        },
        "creation": {
          "enabled": false,
          "requiredTags": []
        }
      },
      "identifier": {

      },
      "states": {

      },
      "channels": {

      },
      "entities": {
        "modelRef": {
          "schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "enum": [
                  "claude-3-7-sonnet-20250219",
                  "claude-3-7-sonnet-reasoning-20250219",
                  "claude-3-5-haiku-20241022",
                  "claude-3-5-sonnet-20241022",
                  "claude-3-5-sonnet-20240620",
                  "claude-3-haiku-20240307"
                ],
                "description": "Model to use for content generation",
                "x-zui": {
                  "placeholder": "claude-3-5-sonnet-20240620"
                }
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "dev": false,
      "secrets": [
        "ANTHROPIC_API_KEY"
      ],
      "ownerWorkspace": {
        "id": "6a76fa10-e150-4ff6-8f59-a300feec06c1",
        "handle": "botpress",
        "name": "Botpress Team"
      },
      "meta": {
        "views": 1167,
        "installs": 35510
      }
    },
    "openai": {
      "id": "intver_01JN7C5S1SHM0EC647KWF8AZ0T",
      "name": "openai",
      "title": "OpenAI",
      "description": "Gain access to OpenAI models for text generation, speech synthesis, audio transcription, and image generation.",
      "iconUrl": "https://mediafiles.botpress.cloud/int_01J0XY3C3VT7PC835HRGCKRBFA/integration/icon.svg",
      "readmeUrl": "https://mediafiles.botpress.cloud/intver_01JN7C5S1SHM0EC647KWF8AZ0T/integration-version/readme.md",
      "createdAt": "2025-02-28T22:52:32.425Z",
      "updatedAt": "2025-03-10T18:12:09.879Z",
      "version": "13.0.0",
      "public": true,
      "url": "",
      "verificationStatus": "unapproved",
      "interfaces": {
        "llm\u003CmodelRef\u003E": {
          "id": "b759e577-2ce7-451a-abff-68085b224985",
          "name": "llm",
          "version": "8.0.0",
          "createdAt": "2025-03-10T18:12:09.522Z",
          "updatedAt": "2025-03-10T18:12:09.522Z",
          "entities": {
            "modelRef": {
              "name": "modelRef"
            }
          },
          "actions": {
            "generateContent": {
              "name": "generateContent"
            },
            "listLanguageModels": {
              "name": "listLanguageModels"
            }
          },
          "events": {

          },
          "channels": {

          }
        },
        "textToImage\u003CimageModelRef,imageGenerationParams\u003E": {
          "id": "e6ad875e-1678-45bb-999a-4843452f1750",
          "name": "textToImage",
          "version": "2.1.0",
          "createdAt": "2025-03-10T18:12:09.545Z",
          "updatedAt": "2025-03-10T18:12:09.545Z",
          "entities": {
            "imageModelRef": {
              "name": "imageModelRef"
            },
            "imageGenerationParams": {
              "name": "imageGenerationParams"
            }
          },
          "actions": {
            "generateImage": {
              "name": "generateImage"
            },
            "listImageModels": {
              "name": "listImageModels"
            }
          },
          "events": {

          },
          "channels": {

          }
        },
        "speechToText\u003CspeechToTextModelRef\u003E": {
          "id": "cf9bb7b8-7ec9-4669-8cd1-9d85ed10f2f8",
          "name": "speechToText",
          "version": "2.0.0",
          "createdAt": "2025-03-10T18:12:09.570Z",
          "updatedAt": "2025-03-10T18:12:09.570Z",
          "entities": {
            "speechToTextModelRef": {
              "name": "speechToTextModelRef"
            }
          },
          "actions": {
            "transcribeAudio": {
              "name": "transcribeAudio"
            },
            "listSpeechToTextModels": {
              "name": "listSpeechToTextModels"
            }
          },
          "events": {

          },
          "channels": {

          }
        }
      },
      "configuration": {
        "identifier": {
          "required": false
        },
        "schema": {
          "type": "object"
        }
      },
      "configurations": {

      },
      "actions": {
        "generateContent": {
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "enum": [
                        "o3-mini-2025-01-31",
                        "o1-2024-12-17",
                        "o1-mini-2024-09-12",
                        "gpt-4o-mini-2024-07-18",
                        "gpt-4o-2024-11-20",
                        "gpt-4o-2024-08-06",
                        "gpt-4o-2024-05-13",
                        "gpt-4-turbo-2024-04-09",
                        "gpt-3.5-turbo-0125"
                      ],
                      "description": "Model to use for content generation",
                      "x-zui": {
                        "placeholder": "gpt-4o-mini-2024-07-18"
                      }
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "reasoningEffort": {
                  "type": "string",
                  "enum": [
                    "low",
                    "medium",
                    "high"
                  ],
                  "x-zui": {

                  }
                },
                "systemPrompt": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "enum": [
                          "user",
                          "assistant"
                        ],
                        "x-zui": {

                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "text",
                          "tool_calls",
                          "tool_result",
                          "multipart"
                        ],
                        "x-zui": {

                        },
                        "default": "text"
                      },
                      "toolCalls": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "type": {
                              "type": "string",
                              "const": "function",
                              "x-zui": {

                              }
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "arguments": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": {
                                        "x-zui": {

                                        }
                                      },
                                      "x-zui": {

                                      }
                                    },
                                    {
                                      "type": "null",
                                      "x-zui": {

                                      }
                                    }
                                  ],
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "toolResultCallId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "image"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "mimeType": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "text": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "url": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null",
                            "x-zui": {

                            }
                          }
                        ],
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "role",
                      "content"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "responseFormat": {
                  "type": "string",
                  "enum": [
                    "text",
                    "json_object"
                  ],
                  "x-zui": {

                  }
                },
                "maxTokens": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "temperature": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 1
                },
                "topP": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 1
                },
                "stopSequences": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "tools": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "function",
                        "x-zui": {

                        }
                      },
                      "function": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "argumentsSchema": {
                            "type": "object",
                            "properties": {

                            },
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "function"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "toolChoice": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "auto",
                        "specific",
                        "any",
                        "none",
                        ""
                      ],
                      "x-zui": {

                      }
                    },
                    "functionName": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "userId": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "debug": {
                  "type": "boolean",
                  "x-zui": {

                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "promptSource": {
                      "type": "string",
                      "x-zui": {

                      }
                    },
                    "promptCategory": {
                      "type": "string",
                      "x-zui": {

                      }
                    },
                    "integrationName": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "messages"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "provider": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "model": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "choices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "text",
                          "tool_calls",
                          "tool_result",
                          "multipart"
                        ],
                        "x-zui": {

                        },
                        "default": "text"
                      },
                      "toolCalls": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "type": {
                              "type": "string",
                              "const": "function",
                              "x-zui": {

                              }
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "arguments": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": {
                                        "x-zui": {

                                        }
                                      },
                                      "x-zui": {

                                      }
                                    },
                                    {
                                      "type": "null",
                                      "x-zui": {

                                      }
                                    }
                                  ],
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "toolResultCallId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "image"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "mimeType": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "text": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "url": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null",
                            "x-zui": {

                            }
                          }
                        ],
                        "x-zui": {

                        }
                      },
                      "role": {
                        "type": "string",
                        "const": "assistant",
                        "x-zui": {

                        }
                      },
                      "index": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "stopReason": {
                        "type": "string",
                        "enum": [
                          "stop",
                          "max_tokens",
                          "tool_calls",
                          "content_filter",
                          "other"
                        ],
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "content",
                      "role",
                      "index",
                      "stopReason"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "usage": {
                  "type": "object",
                  "properties": {
                    "inputTokens": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "inputCost": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "outputTokens": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "outputCost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "inputTokens",
                    "inputCost",
                    "outputTokens",
                    "outputCost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "botpress": {
                  "type": "object",
                  "properties": {
                    "cost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "cost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "id",
                "provider",
                "model",
                "choices",
                "usage",
                "botpress"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "generateImage": {
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "prompt": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "size": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "expiration": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "params": {
                  "type": "object",
                  "properties": {
                    "style": {
                      "type": "string",
                      "enum": [
                        "natural",
                        "vivid"
                      ],
                      "x-zui": {

                      },
                      "default": "vivid",
                      "description": "Image style - Only supported by DALL-E 3 models"
                    },
                    "user": {
                      "type": "string",
                      "x-zui": {

                      },
                      "description": "User ID to associate with the image, for abuse detection purposes"
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "prompt"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "imageUrl": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "cost": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "botpress": {
                  "type": "object",
                  "properties": {
                    "cost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "cost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "model",
                "imageUrl",
                "cost",
                "botpress"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "generateSpeech": {
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "string",
                  "enum": [
                    "tts-1",
                    "tts-1-hd"
                  ],
                  "x-zui": {
                    "placeholder": "tts-1"
                  }
                },
                "input": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "voice": {
                  "type": "string",
                  "enum": [
                    "alloy",
                    "echo",
                    "fable",
                    "onyx",
                    "nova",
                    "shimmer"
                  ],
                  "x-zui": {
                    "placeholder": "alloy"
                  }
                },
                "format": {
                  "type": "string",
                  "enum": [
                    "mp3",
                    "opus",
                    "aac",
                    "flac",
                    "wav",
                    "pcm"
                  ],
                  "x-zui": {
                    "placeholder": "mp3"
                  }
                },
                "speed": {
                  "type": "number",
                  "minimum": 0.25,
                  "maximum": 4,
                  "x-zui": {
                    "placeholder": "1"
                  }
                },
                "expiration": {
                  "type": "integer",
                  "minimum": 30,
                  "maximum": 90,
                  "x-zui": {

                  },
                  "description": "Expiration of the generated audio file in days, after which the file will be automatically deleted to free up storage space in your account. The default is to keep the file indefinitely (no expiration). The minimum is 30 days and the maximum is 90 days."
                }
              },
              "required": [
                "input"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "audioUrl": {
                  "type": "string",
                  "description": "URL to the audio file with the generated speech",
                  "x-zui": {

                  }
                },
                "botpress": {
                  "type": "object",
                  "properties": {
                    "cost": {
                      "type": "number",
                      "description": "Cost of the speech generation, in U.S. dollars",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "cost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "audioUrl",
                "botpress"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listImageModels": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "models": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "costPerImage": {
                            "type": "number",
                            "x-zui": {

                            }
                          },
                          "sizes": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "x-zui": {

                            }
                          },
                          "defaultSize": {
                            "type": "string",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "costPerImage",
                          "sizes",
                          "defaultSize"
                        ],
                        "x-zui": {

                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "x-zui": {

                        }
                      }
                    ],
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "models"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listLanguageModels": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "models": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "recommended",
                                "deprecated",
                                "general-purpose",
                                "low-cost",
                                "vision",
                                "coding",
                                "agents",
                                "function-calling",
                                "roleplay",
                                "storytelling",
                                "reasoning",
                                "preview"
                              ],
                              "x-zui": {

                              }
                            },
                            "x-zui": {

                            }
                          },
                          "input": {
                            "type": "object",
                            "properties": {
                              "maxTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "costPer1MTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "maxTokens",
                              "costPer1MTokens"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          },
                          "output": {
                            "type": "object",
                            "properties": {
                              "maxTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "costPer1MTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "maxTokens",
                              "costPer1MTokens"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "tags",
                          "input",
                          "output"
                        ],
                        "x-zui": {

                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "enum": [
                              "o3-mini-2025-01-31",
                              "o1-2024-12-17",
                              "o1-mini-2024-09-12",
                              "gpt-4o-mini-2024-07-18",
                              "gpt-4o-2024-11-20",
                              "gpt-4o-2024-08-06",
                              "gpt-4o-2024-05-13",
                              "gpt-4-turbo-2024-04-09",
                              "gpt-3.5-turbo-0125"
                            ],
                            "description": "Model to use for content generation",
                            "x-zui": {
                              "placeholder": "gpt-4o-mini-2024-07-18"
                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "x-zui": {

                        }
                      }
                    ],
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "models"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listSpeechToTextModels": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "models": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "costPerMinute": {
                            "type": "number",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "costPerMinute"
                        ],
                        "x-zui": {

                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "x-zui": {

                        }
                      }
                    ],
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "models"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "transcribeAudio": {
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "fileUrl": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "language": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "prompt": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "temperature": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 0
                }
              },
              "required": [
                "fileUrl"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "language": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "duration": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "segments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "id": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "seek": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "start": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "end": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "tokens": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "temperature": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "avg_logprob": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "compression_ratio": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "no_speech_prob": {
                        "type": "number",
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "text",
                      "id",
                      "seek",
                      "start",
                      "end",
                      "tokens",
                      "temperature",
                      "avg_logprob",
                      "compression_ratio",
                      "no_speech_prob"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "model": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "cost": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "botpress": {
                  "type": "object",
                  "properties": {
                    "cost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "cost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "language",
                "duration",
                "segments",
                "model",
                "cost",
                "botpress"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        }
      },
      "events": {

      },
      "user": {
        "tags": {

        },
        "creation": {
          "enabled": false,
          "requiredTags": []
        }
      },
      "identifier": {

      },
      "states": {

      },
      "channels": {

      },
      "entities": {
        "imageModelRef": {
          "schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "x-zui": {

                }
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "modelRef": {
          "schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "enum": [
                  "o3-mini-2025-01-31",
                  "o1-2024-12-17",
                  "o1-mini-2024-09-12",
                  "gpt-4o-mini-2024-07-18",
                  "gpt-4o-2024-11-20",
                  "gpt-4o-2024-08-06",
                  "gpt-4o-2024-05-13",
                  "gpt-4-turbo-2024-04-09",
                  "gpt-3.5-turbo-0125"
                ],
                "description": "Model to use for content generation",
                "x-zui": {
                  "placeholder": "gpt-4o-mini-2024-07-18"
                }
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "speechToTextModelRef": {
          "schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "x-zui": {

                }
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "imageGenerationParams": {
          "schema": {
            "type": "object",
            "properties": {
              "style": {
                "type": "string",
                "enum": [
                  "natural",
                  "vivid"
                ],
                "x-zui": {

                },
                "default": "vivid",
                "description": "Image style - Only supported by DALL-E 3 models"
              },
              "user": {
                "type": "string",
                "x-zui": {

                },
                "description": "User ID to associate with the image, for abuse detection purposes"
              }
            },
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "dev": false,
      "secrets": [
        "OPENAI_API_KEY"
      ],
      "ownerWorkspace": {
        "id": "6a76fa10-e150-4ff6-8f59-a300feec06c1",
        "handle": "botpress",
        "name": "Botpress Team"
      },
      "meta": {
        "views": 3485,
        "installs": 58230
      }
    },
    "notion": {
      "id": "intver_01JN9P95XVFF3CNGD248M1WSVK",
      "name": "notion",
      "title": "Notion",
      "description": "Add pages and comments, manage databases, and engage in discussions ‚Äî all within your chatbot.",
      "iconUrl": "https://mediafiles.botpress.cloud/2701e844-5e46-47bd-a732-efef0ebf581d/integration/icon.svg",
      "readmeUrl": "https://mediafiles.botpress.cloud/intver_01JN9P95XVFF3CNGD248M1WSVK/integration-version/readme.md",
      "createdAt": "2025-03-01T20:27:38.503Z",
      "updatedAt": "2025-03-01T20:32:57.254Z",
      "version": "1.0.0",
      "public": true,
      "url": "",
      "verificationStatus": "unapproved",
      "interfaces": {
        "listable\u003Cpage\u003E": {
          "id": "67bd21e9-77f3-44f0-87e3-71ad011212de",
          "name": "listable",
          "version": "0.0.1",
          "createdAt": "2025-03-01T20:32:56.962Z",
          "updatedAt": "2025-03-01T20:32:56.962Z",
          "entities": {
            "item": {
              "name": "page"
            }
          },
          "actions": {
            "list": {
              "name": "listPages"
            }
          },
          "events": {

          },
          "channels": {

          }
        }
      },
      "configuration": {
        "identifier": {
          "linkTemplateScript": "webhookId = to_string!(.webhookId)\nwebhookUrl = to_string!(.webhookUrl)\nenv = to_string!(.env)\n\nclientId = \"1a3d872b-594c-8091-9282-00379efef107\"\n\nif env == \"production\" {\n  clientId = \"1a9d872b-594c-80a4-8ec0-0037486f5672\"\n}\n\nredirectUri = \"{{ webhookUrl }}/oauth\"\n\n\n\"https://api.notion.com/v1/oauth/authorize?client_id={{ clientId }}&response_type=code&owner=user&redirect_uri={{ redirectUri }}&state={{ webhookId }}\"",
          "required": false
        },
        "schema": {
          "type": "object",
          "properties": {

          },
          "additionalProperties": false,
          "x-zui": {

          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      "configurations": {

      },
      "actions": {
        "addCommentToDiscussion": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "discussionId": {
                  "type": "string",
                  "minLength": 1,
                  "x-zui": {

                  }
                },
                "commentBody": {
                  "type": "string",
                  "minLength": 1,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "discussionId",
                "commentBody"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "addCommentToPage": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "pageId": {
                  "type": "string",
                  "minLength": 1,
                  "x-zui": {

                  }
                },
                "commentBody": {
                  "type": "string",
                  "minLength": 1,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "pageId",
                "commentBody"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "createFilesFromPages": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "pages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the Notion page to be uploaded to a botpress file",
                        "x-zui": {

                        }
                      },
                      "fileProps": {
                        "type": "object",
                        "properties": {

                        },
                        "additionalProperties": true,
                        "description": "File size will be overriden with the actual size of the page. Refer to https://botpress.com/reference/upsertfile",
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "id",
                      "fileProps"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "pages"
              ],
              "additionalProperties": false,
              "description": "Converts Notion pages to Botpress files",
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "files"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "getConnectedWorkspace": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "workspace_icon": {
                  "anyOf": [
                    {
                      "type": "string",
                      "format": "uri",
                      "x-zui": {

                      }
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "A URL to an image that can be used to display this authorization in the UI.",
                  "x-zui": {

                  }
                },
                "workspace_id": {
                  "type": "string",
                  "minLength": 1,
                  "description": "The ID of the workspace where this authorization took place.",
                  "x-zui": {

                  }
                },
                "workspace_name": {
                  "type": "string",
                  "x-zui": {

                  },
                  "description": "A human-readable name that can be used to display this authorization in the UI."
                },
                "owner": {
                  "type": "object",
                  "properties": {
                    "workspace": {
                      "type": "boolean",
                      "x-zui": {

                      }
                    },
                    "user": {
                      "type": "object",
                      "properties": {

                      },
                      "additionalProperties": true,
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "description": "An object containing information about who can view and share this integration. { \"workspace\": true } is returned for installations of workspace-level tokens. For user level tokens, a user object is returned.",
                  "x-zui": {

                  }
                }
              },
              "required": [
                "workspace_icon",
                "workspace_id",
                "owner"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listPages": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "nextToken": {
                  "type": "string",
                  "x-zui": {

                  }
                }
              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 1,
                            "x-zui": {

                            }
                          },
                          "title": {
                            "type": "string",
                            "minLength": 1,
                            "x-zui": {

                            }
                          },
                          "url": {
                            "type": "string",
                            "minLength": 1,
                            "x-zui": {

                            }
                          },
                          "icon": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "const": "emoji",
                                    "x-zui": {

                                    }
                                  },
                                  "emoji": {
                                    "type": "string",
                                    "x-zui": {

                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "emoji"
                                ],
                                "additionalProperties": false,
                                "x-zui": {

                                }
                              },
                              {
                                "type": "null",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "const": "external",
                                    "x-zui": {

                                    }
                                  },
                                  "external": {
                                    "type": "object",
                                    "properties": {
                                      "url": {
                                        "type": "string",
                                        "x-zui": {

                                        }
                                      }
                                    },
                                    "required": [
                                      "url"
                                    ],
                                    "additionalProperties": false,
                                    "x-zui": {

                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "external"
                                ],
                                "additionalProperties": false,
                                "x-zui": {

                                }
                              },
                              {
                                "type": "null",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "const": "file",
                                    "x-zui": {

                                    }
                                  },
                                  "file": {
                                    "type": "object",
                                    "properties": {
                                      "url": {
                                        "type": "string",
                                        "x-zui": {

                                        }
                                      },
                                      "expiry_time": {
                                        "type": "string",
                                        "x-zui": {

                                        }
                                      }
                                    },
                                    "required": [
                                      "url",
                                      "expiry_time"
                                    ],
                                    "additionalProperties": false,
                                    "x-zui": {

                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "file"
                                ],
                                "additionalProperties": false,
                                "x-zui": {

                                }
                              },
                              {
                                "type": "null",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "const": "custom_emoji",
                                    "x-zui": {

                                    }
                                  },
                                  "custom_emoji": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "x-zui": {

                                        }
                                      },
                                      "url": {
                                        "type": "string",
                                        "x-zui": {

                                        }
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "url"
                                    ],
                                    "additionalProperties": false,
                                    "x-zui": {

                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "custom_emoji"
                                ],
                                "additionalProperties": false,
                                "x-zui": {

                                }
                              },
                              {
                                "type": "null",
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id",
                          "title",
                          "url",
                          "icon"
                        ],
                        "x-zui": {

                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "x-zui": {

                        }
                      }
                    ],
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "nextToken": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "items",
                "meta"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        }
      },
      "events": {

      },
      "user": {
        "tags": {
          "id": {

          }
        },
        "creation": {
          "enabled": false,
          "requiredTags": []
        }
      },
      "identifier": {

      },
      "states": {
        "oauth": {
          "type": "integration",
          "schema": {
            "type": "object",
            "properties": {
              "access_token": {
                "type": "string",
                "minLength": 1,
                "description": "An access token used to authorize requests to the Notion API.",
                "x-zui": {

                }
              },
              "bot_id": {
                "type": "string",
                "minLength": 1,
                "description": "An identifier for this authorization.",
                "x-zui": {

                }
              },
              "owner": {
                "type": "object",
                "properties": {
                  "workspace": {
                    "type": "boolean",
                    "x-zui": {

                    }
                  },
                  "user": {
                    "type": "object",
                    "properties": {

                    },
                    "additionalProperties": true,
                    "x-zui": {

                    }
                  }
                },
                "additionalProperties": false,
                "description": "An object containing information about who can view and share this integration. { \"workspace\": true } is returned for installations of workspace-level tokens. For user level tokens, a user object is returned.",
                "x-zui": {

                }
              },
              "workspace_icon": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "uri",
                    "x-zui": {

                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "A URL to an image that can be used to display this authorization in the UI.",
                "x-zui": {

                }
              },
              "workspace_id": {
                "type": "string",
                "minLength": 1,
                "description": "The ID of the workspace where this authorization took place.",
                "x-zui": {

                }
              },
              "workspace_name": {
                "type": "string",
                "x-zui": {

                },
                "description": "A human-readable name that can be used to display this authorization in the UI."
              },
              "duplicated_template_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The ID of the new page created in the user's workspace. The new page is a duplicate of the template that the developer provided with the integration. If the developer didn‚Äôt provide a template for the integration, then the value is null.",
                "x-zui": {

                }
              }
            },
            "required": [
              "access_token",
              "bot_id",
              "owner",
              "workspace_icon",
              "workspace_id",
              "duplicated_template_id"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "channels": {

      },
      "entities": {
        "page": {
          "title": "Page",
          "description": "A notion page",
          "schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 1,
                "x-zui": {

                }
              },
              "title": {
                "type": "string",
                "minLength": 1,
                "x-zui": {

                }
              },
              "url": {
                "type": "string",
                "minLength": 1,
                "x-zui": {

                }
              },
              "icon": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "emoji",
                        "x-zui": {

                        }
                      },
                      "emoji": {
                        "type": "string",
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "emoji"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  {
                    "type": "null",
                    "x-zui": {

                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "external",
                        "x-zui": {

                        }
                      },
                      "external": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "url"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "external"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  {
                    "type": "null",
                    "x-zui": {

                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "file",
                        "x-zui": {

                        }
                      },
                      "file": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "expiry_time": {
                            "type": "string",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "url",
                          "expiry_time"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "file"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  {
                    "type": "null",
                    "x-zui": {

                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "custom_emoji",
                        "x-zui": {

                        }
                      },
                      "custom_emoji": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "url": {
                            "type": "string",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "name",
                          "url"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "custom_emoji"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  {
                    "type": "null",
                    "x-zui": {

                    }
                  }
                ],
                "x-zui": {

                }
              }
            },
            "required": [
              "id",
              "title",
              "url",
              "icon"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "dev": false,
      "secrets": [
        "CLIENT_ID",
        "CLIENT_SECRET",
        "REDIRECT_URI"
      ],
      "ownerWorkspace": {
        "id": "6a76fa10-e150-4ff6-8f59-a300feec06c1",
        "handle": "botpress",
        "name": "Botpress Team"
      },
      "meta": {
        "views": 2764,
        "installs": 320
      }
    },
    "agi/kbo": {
      "id": "intver_01JNE67D10TRDKV5PN9PP2GW05",
      "name": "agi/kbo",
      "title": "Knowledge Base Optimizer",
      "description": "",
      "iconUrl": "https://mediafiles.botpress.cloud/int_01JEZ07TVD23PK18CFD2ZWF8G8/integration/icon.svg",
      "readmeUrl": "https://mediafiles.botpress.cloud/intver_01JNE67D10TRDKV5PN9PP2GW05/integration-version/readme.md",
      "createdAt": "2025-03-03T14:23:15.091Z",
      "updatedAt": "2025-03-03T14:23:15.091Z",
      "version": "2.0.3",
      "public": true,
      "url": "",
      "verificationStatus": "unapproved",
      "interfaces": {

      },
      "configuration": {
        "identifier": {
          "required": false
        },
        "schema": {
          "type": "object"
        }
      },
      "configurations": {

      },
      "actions": {
        "postInstall": {
          "title": "Post Install",
          "description": "This action is called after the integration is installed",
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "purpose": {
                  "type": "string",
                  "const": "studio_post_install",
                  "x-zui": {

                  }
                }
              },
              "required": [
                "purpose"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "views": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "title": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "description": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "iframe"
                            ],
                            "x-zui": {

                            }
                          },
                          "url": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "site": {
                            "type": "string",
                            "enum": [
                              "global-modal",
                              "knowledge-base"
                            ],
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "type",
                          "url",
                          "site"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "id",
                      "title",
                      "description",
                      "content"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "hooks": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "after_incoming_middleware",
                          "after_llmz_execution",
                          "before_incoming_middleware",
                          "before_llmz_execution",
                          "before_outgoing_middleware",
                          "after_conversation_end"
                        ],
                        "x-zui": {

                        }
                      },
                      "name": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "required": {
                        "type": "boolean",
                        "x-zui": {

                        }
                      },
                      "code": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "title": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "description": {
                        "type": "string",
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "name",
                      "required",
                      "code",
                      "title",
                      "description"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "views",
                "hooks"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "trackKbQuery": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "citations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "fileId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "kbId": {
                        "type": "string",
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "fileId",
                      "kbId"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "citations"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "x-zui": {

                  }
                }
              },
              "required": [
                "success"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        }
      },
      "events": {

      },
      "user": {
        "tags": {

        },
        "creation": {
          "enabled": false,
          "requiredTags": []
        }
      },
      "identifier": {

      },
      "states": {

      },
      "channels": {

      },
      "entities": {

      },
      "dev": false,
      "secrets": [],
      "ownerWorkspace": {
        "id": "wkspace_01J3HF59F8D12BZ4HQSYXGTNW6",
        "handle": "agi",
        "name": "Botpress AGI"
      },
      "meta": {
        "views": 0,
        "installs": 0
      }
    },
    "browser": {
      "id": "intver_01JPDJMW9TFDEVHH5JFD1K5792",
      "name": "browser",
      "title": "Browser",
      "description": "Capture screenshots and retrieve web page content with metadata for automated browsing and data extraction.",
      "iconUrl": "https://mediafiles.botpress.cloud/int_01J2A33DQRKVCBZHW6A4JYZKPJ/integration/icon.svg",
      "readmeUrl": "https://mediafiles.botpress.cloud/intver_01JPDJMW9TFDEVHH5JFD1K5792/integration-version/readme.md",
      "createdAt": "2025-03-15T18:56:46.849Z",
      "updatedAt": "2025-03-15T18:56:46.849Z",
      "version": "0.4.1",
      "public": true,
      "url": "",
      "verificationStatus": "unapproved",
      "interfaces": {

      },
      "configuration": {
        "identifier": {
          "required": false
        },
        "schema": {
          "type": "object"
        }
      },
      "configurations": {

      },
      "actions": {
        "browsePages": {
          "title": "Browse Pages",
          "description": "Extract the full content & the metadata of the specified pages as markdown.",
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "urls": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "waitFor": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 350,
                  "description": "Time to wait before extracting the content (in milliseconds). Set this value higher for dynamic pages."
                }
              },
              "required": [
                "urls"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "favicon": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "title": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "description": {
                        "type": "string",
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "url",
                      "content"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "results"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "captureScreenshot": {
          "title": "Capture Screenshot",
          "description": "Capture a screenshot of the specified page.",
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "x-zui": {

                  }
                }
              },
              "required": [
                "url"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "imageUrl": {
                  "type": "string",
                  "x-zui": {

                  }
                }
              },
              "required": [
                "imageUrl"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "webSearch": {
          "title": "Web Search",
          "description": "Search information on the web. You need to browse to that page to get the full content of the page.",
          "billable": false,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 1000,
                  "description": "What are we searching for?",
                  "x-zui": {

                  }
                },
                "includeSites": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z]{2,}$",
                    "minLength": 3,
                    "maxLength": 50,
                    "x-zui": {

                    }
                  },
                  "maxItems": 20,
                  "x-zui": {

                  },
                  "description": "Include only these domains in the search (max 20)"
                },
                "excludeSites": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z]{2,}$",
                    "minLength": 3,
                    "maxLength": 50,
                    "x-zui": {

                    }
                  },
                  "maxItems": 20,
                  "x-zui": {

                  },
                  "description": "Exclude these domains from the search (max 20)"
                },
                "count": {
                  "type": "number",
                  "minimum": 1,
                  "maximum": 20,
                  "x-zui": {

                  },
                  "default": 10,
                  "description": "Number of search results to return (default: 10)"
                },
                "freshness": {
                  "type": "string",
                  "enum": [
                    "Day",
                    "Week",
                    "Month"
                  ],
                  "x-zui": {

                  },
                  "description": "Only consider results from the last day, week or month"
                },
                "browsePages": {
                  "type": "boolean",
                  "x-zui": {

                  },
                  "default": false,
                  "description": "Whether to browse to the pages to get the full content"
                }
              },
              "required": [
                "query"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Title of the page",
                        "x-zui": {

                        }
                      },
                      "url": {
                        "type": "string",
                        "description": "URL of the page",
                        "x-zui": {

                        }
                      },
                      "snippet": {
                        "type": "string",
                        "description": "A short summary of the page",
                        "x-zui": {

                        }
                      },
                      "links": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "url": {
                              "type": "string",
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "name",
                            "url"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        },
                        "description": "Useful links on the page"
                      },
                      "page": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "content": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "favicon": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "title": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "url",
                          "content"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "name",
                      "url",
                      "snippet"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "results"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        }
      },
      "events": {

      },
      "user": {
        "tags": {

        },
        "creation": {
          "enabled": false,
          "requiredTags": []
        }
      },
      "identifier": {

      },
      "states": {

      },
      "channels": {

      },
      "entities": {

      },
      "dev": false,
      "secrets": [
        "FIRECRAWL_API_KEY",
        "SCREENSHOT_API_KEY"
      ],
      "ownerWorkspace": {
        "id": "6a76fa10-e150-4ff6-8f59-a300feec06c1",
        "handle": "botpress",
        "name": "Botpress Team"
      },
      "meta": {
        "views": 4756,
        "installs": 88112
      }
    },
    "fireworks-ai": {
      "id": "intver_01JPWQ3X18REBPZQ79SDCQS9TE",
      "name": "fireworks-ai",
      "title": "Fireworks AI",
      "description": "Choose from curated Fireworks AI models for content generation, chat completions, and audio transcription.",
      "iconUrl": "https://mediafiles.botpress.cloud/int_01J4MJQRH68JMDX6GRX9EYK3X9/integration/icon.svg",
      "readmeUrl": "https://mediafiles.botpress.cloud/intver_01JPWQ3X18REBPZQ79SDCQS9TE/integration-version/readme.md",
      "createdAt": "2025-03-21T16:03:30.150Z",
      "updatedAt": "2025-03-21T16:03:30.150Z",
      "version": "7.0.0",
      "public": true,
      "url": "",
      "verificationStatus": "unapproved",
      "interfaces": {
        "llm\u003CmodelRef\u003E": {
          "id": "b759e577-2ce7-451a-abff-68085b224985",
          "name": "llm",
          "version": "8.0.0",
          "createdAt": "2025-03-21T16:03:30.099Z",
          "updatedAt": "2025-03-21T16:03:30.099Z",
          "entities": {
            "modelRef": {
              "name": "modelRef"
            }
          },
          "actions": {
            "generateContent": {
              "name": "generateContent"
            },
            "listLanguageModels": {
              "name": "listLanguageModels"
            }
          },
          "events": {

          },
          "channels": {

          }
        },
        "speechToText\u003CspeechToTextModelRef\u003E": {
          "id": "cf9bb7b8-7ec9-4669-8cd1-9d85ed10f2f8",
          "name": "speechToText",
          "version": "2.0.0",
          "createdAt": "2025-03-21T16:03:30.099Z",
          "updatedAt": "2025-03-21T16:03:30.099Z",
          "entities": {
            "speechToTextModelRef": {
              "name": "speechToTextModelRef"
            }
          },
          "actions": {
            "transcribeAudio": {
              "name": "transcribeAudio"
            },
            "listSpeechToTextModels": {
              "name": "listSpeechToTextModels"
            }
          },
          "events": {

          },
          "channels": {

          }
        }
      },
      "configuration": {
        "identifier": {
          "required": false
        },
        "schema": {
          "type": "object"
        }
      },
      "configurations": {

      },
      "actions": {
        "generateContent": {
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "enum": [
                        "accounts/fireworks/models/deepseek-r1",
                        "accounts/fireworks/models/deepseek-r1-basic",
                        "accounts/fireworks/models/deepseek-v3",
                        "accounts/fireworks/models/llama-v3p1-405b-instruct",
                        "accounts/fireworks/models/llama-v3p1-70b-instruct",
                        "accounts/fireworks/models/llama-v3p1-8b-instruct",
                        "accounts/fireworks/models/mixtral-8x22b-instruct",
                        "accounts/fireworks/models/mixtral-8x7b-instruct",
                        "accounts/fireworks/models/firefunction-v2",
                        "accounts/fireworks/models/firellava-13b",
                        "accounts/fireworks/models/deepseek-coder-v2-instruct",
                        "accounts/fireworks/models/deepseek-coder-v2-lite-instruct",
                        "accounts/fireworks/models/mythomax-l2-13b",
                        "accounts/fireworks/models/qwen2-72b-instruct",
                        "accounts/fireworks/models/gemma2-9b-it"
                      ],
                      "description": "Model to use for content generation",
                      "x-zui": {
                        "placeholder": "accounts/fireworks/models/llama-v3p1-70b-instruct"
                      }
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "reasoningEffort": {
                  "type": "string",
                  "enum": [
                    "low",
                    "medium",
                    "high"
                  ],
                  "x-zui": {

                  }
                },
                "systemPrompt": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "enum": [
                          "user",
                          "assistant"
                        ],
                        "x-zui": {

                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "text",
                          "tool_calls",
                          "tool_result",
                          "multipart"
                        ],
                        "x-zui": {

                        },
                        "default": "text"
                      },
                      "toolCalls": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "type": {
                              "type": "string",
                              "const": "function",
                              "x-zui": {

                              }
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "arguments": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": {
                                        "x-zui": {

                                        }
                                      },
                                      "x-zui": {

                                      }
                                    },
                                    {
                                      "type": "null",
                                      "x-zui": {

                                      }
                                    }
                                  ],
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "toolResultCallId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "image"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "mimeType": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "text": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "url": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null",
                            "x-zui": {

                            }
                          }
                        ],
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "role",
                      "content"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "responseFormat": {
                  "type": "string",
                  "enum": [
                    "text",
                    "json_object"
                  ],
                  "x-zui": {

                  }
                },
                "maxTokens": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "temperature": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 1
                },
                "topP": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 1
                },
                "stopSequences": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "tools": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "function",
                        "x-zui": {

                        }
                      },
                      "function": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "argumentsSchema": {
                            "type": "object",
                            "properties": {

                            },
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "function"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "toolChoice": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "auto",
                        "specific",
                        "any",
                        "none",
                        ""
                      ],
                      "x-zui": {

                      }
                    },
                    "functionName": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "userId": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "debug": {
                  "type": "boolean",
                  "x-zui": {

                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "promptSource": {
                      "type": "string",
                      "x-zui": {

                      }
                    },
                    "promptCategory": {
                      "type": "string",
                      "x-zui": {

                      }
                    },
                    "integrationName": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "messages"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "provider": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "model": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "choices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "text",
                          "tool_calls",
                          "tool_result",
                          "multipart"
                        ],
                        "x-zui": {

                        },
                        "default": "text"
                      },
                      "toolCalls": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "type": {
                              "type": "string",
                              "const": "function",
                              "x-zui": {

                              }
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "arguments": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": {
                                        "x-zui": {

                                        }
                                      },
                                      "x-zui": {

                                      }
                                    },
                                    {
                                      "type": "null",
                                      "x-zui": {

                                      }
                                    }
                                  ],
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "toolResultCallId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "image"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "mimeType": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "text": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "url": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null",
                            "x-zui": {

                            }
                          }
                        ],
                        "x-zui": {

                        }
                      },
                      "role": {
                        "type": "string",
                        "const": "assistant",
                        "x-zui": {

                        }
                      },
                      "index": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "stopReason": {
                        "type": "string",
                        "enum": [
                          "stop",
                          "max_tokens",
                          "tool_calls",
                          "content_filter",
                          "other"
                        ],
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "content",
                      "role",
                      "index",
                      "stopReason"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "usage": {
                  "type": "object",
                  "properties": {
                    "inputTokens": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "inputCost": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "outputTokens": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "outputCost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "inputTokens",
                    "inputCost",
                    "outputTokens",
                    "outputCost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "botpress": {
                  "type": "object",
                  "properties": {
                    "cost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "cost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "id",
                "provider",
                "model",
                "choices",
                "usage",
                "botpress"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listLanguageModels": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "models": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "recommended",
                                "deprecated",
                                "general-purpose",
                                "low-cost",
                                "vision",
                                "coding",
                                "agents",
                                "function-calling",
                                "roleplay",
                                "storytelling",
                                "reasoning",
                                "preview"
                              ],
                              "x-zui": {

                              }
                            },
                            "x-zui": {

                            }
                          },
                          "input": {
                            "type": "object",
                            "properties": {
                              "maxTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "costPer1MTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "maxTokens",
                              "costPer1MTokens"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          },
                          "output": {
                            "type": "object",
                            "properties": {
                              "maxTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "costPer1MTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "maxTokens",
                              "costPer1MTokens"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "tags",
                          "input",
                          "output"
                        ],
                        "x-zui": {

                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "enum": [
                              "accounts/fireworks/models/deepseek-r1",
                              "accounts/fireworks/models/deepseek-r1-basic",
                              "accounts/fireworks/models/deepseek-v3",
                              "accounts/fireworks/models/llama-v3p1-405b-instruct",
                              "accounts/fireworks/models/llama-v3p1-70b-instruct",
                              "accounts/fireworks/models/llama-v3p1-8b-instruct",
                              "accounts/fireworks/models/mixtral-8x22b-instruct",
                              "accounts/fireworks/models/mixtral-8x7b-instruct",
                              "accounts/fireworks/models/firefunction-v2",
                              "accounts/fireworks/models/firellava-13b",
                              "accounts/fireworks/models/deepseek-coder-v2-instruct",
                              "accounts/fireworks/models/deepseek-coder-v2-lite-instruct",
                              "accounts/fireworks/models/mythomax-l2-13b",
                              "accounts/fireworks/models/qwen2-72b-instruct",
                              "accounts/fireworks/models/gemma2-9b-it"
                            ],
                            "description": "Model to use for content generation",
                            "x-zui": {
                              "placeholder": "accounts/fireworks/models/llama-v3p1-70b-instruct"
                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "x-zui": {

                        }
                      }
                    ],
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "models"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listSpeechToTextModels": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "models": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "costPerMinute": {
                            "type": "number",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "costPerMinute"
                        ],
                        "x-zui": {

                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "x-zui": {

                        }
                      }
                    ],
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "models"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "transcribeAudio": {
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "fileUrl": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "language": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "prompt": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "temperature": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 0
                }
              },
              "required": [
                "fileUrl"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "language": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "duration": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "segments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "id": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "seek": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "start": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "end": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "tokens": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "temperature": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "avg_logprob": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "compression_ratio": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "no_speech_prob": {
                        "type": "number",
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "text",
                      "id",
                      "seek",
                      "start",
                      "end",
                      "tokens",
                      "temperature",
                      "avg_logprob",
                      "compression_ratio",
                      "no_speech_prob"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "model": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "cost": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "botpress": {
                  "type": "object",
                  "properties": {
                    "cost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "cost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "language",
                "duration",
                "segments",
                "model",
                "cost",
                "botpress"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        }
      },
      "events": {

      },
      "user": {
        "tags": {

        },
        "creation": {
          "enabled": false,
          "requiredTags": []
        }
      },
      "identifier": {

      },
      "states": {

      },
      "channels": {

      },
      "entities": {
        "speechToTextModelRef": {
          "schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "x-zui": {

                }
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "modelRef": {
          "schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "enum": [
                  "accounts/fireworks/models/deepseek-r1",
                  "accounts/fireworks/models/deepseek-r1-basic",
                  "accounts/fireworks/models/deepseek-v3",
                  "accounts/fireworks/models/llama-v3p1-405b-instruct",
                  "accounts/fireworks/models/llama-v3p1-70b-instruct",
                  "accounts/fireworks/models/llama-v3p1-8b-instruct",
                  "accounts/fireworks/models/mixtral-8x22b-instruct",
                  "accounts/fireworks/models/mixtral-8x7b-instruct",
                  "accounts/fireworks/models/firefunction-v2",
                  "accounts/fireworks/models/firellava-13b",
                  "accounts/fireworks/models/deepseek-coder-v2-instruct",
                  "accounts/fireworks/models/deepseek-coder-v2-lite-instruct",
                  "accounts/fireworks/models/mythomax-l2-13b",
                  "accounts/fireworks/models/qwen2-72b-instruct",
                  "accounts/fireworks/models/gemma2-9b-it"
                ],
                "description": "Model to use for content generation",
                "x-zui": {
                  "placeholder": "accounts/fireworks/models/llama-v3p1-70b-instruct"
                }
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "dev": false,
      "secrets": [
        "FIREWORKS_AI_API_KEY"
      ],
      "ownerWorkspace": {
        "id": "6a76fa10-e150-4ff6-8f59-a300feec06c1",
        "handle": "botpress",
        "name": "Botpress Team"
      },
      "meta": {
        "views": 28,
        "installs": 12
      }
    },
    "groq": {
      "id": "intver_01JPWXM2D6CPQ9CNS9WEXMA6WD",
      "name": "groq",
      "title": "Groq",
      "description": "Gain access to Groq models for content generation, chat responses, and audio transcription.",
      "iconUrl": "https://mediafiles.botpress.cloud/int_01J0XY2GADMAZA0SYSBYDD0VQ7/integration/icon.svg",
      "readmeUrl": "https://mediafiles.botpress.cloud/intver_01JPWXM2D6CPQ9CNS9WEXMA6WD/integration-version/readme.md",
      "createdAt": "2025-03-21T17:57:11.266Z",
      "updatedAt": "2025-03-21T17:57:11.266Z",
      "version": "13.0.0",
      "public": true,
      "url": "",
      "verificationStatus": "unapproved",
      "interfaces": {
        "llm\u003CmodelRef\u003E": {
          "id": "b759e577-2ce7-451a-abff-68085b224985",
          "name": "llm",
          "version": "8.0.0",
          "createdAt": "2025-03-21T17:57:11.226Z",
          "updatedAt": "2025-03-21T17:57:11.226Z",
          "entities": {
            "modelRef": {
              "name": "modelRef"
            }
          },
          "actions": {
            "generateContent": {
              "name": "generateContent"
            },
            "listLanguageModels": {
              "name": "listLanguageModels"
            }
          },
          "events": {

          },
          "channels": {

          }
        },
        "speechToText\u003CspeechToTextModelRef\u003E": {
          "id": "cf9bb7b8-7ec9-4669-8cd1-9d85ed10f2f8",
          "name": "speechToText",
          "version": "2.0.0",
          "createdAt": "2025-03-21T17:57:11.226Z",
          "updatedAt": "2025-03-21T17:57:11.226Z",
          "entities": {
            "speechToTextModelRef": {
              "name": "speechToTextModelRef"
            }
          },
          "actions": {
            "transcribeAudio": {
              "name": "transcribeAudio"
            },
            "listSpeechToTextModels": {
              "name": "listSpeechToTextModels"
            }
          },
          "events": {

          },
          "channels": {

          }
        }
      },
      "configuration": {
        "identifier": {
          "required": false
        },
        "schema": {
          "type": "object"
        }
      },
      "configurations": {

      },
      "actions": {
        "generateContent": {
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "enum": [
                        "deepseek-r1-distill-llama-70b",
                        "llama-3.3-70b-versatile",
                        "llama-3.2-1b-preview",
                        "llama-3.2-3b-preview",
                        "llama-3.2-11b-vision-preview",
                        "llama-3.2-90b-vision-preview",
                        "llama-3.1-8b-instant",
                        "llama3-8b-8192",
                        "llama3-70b-8192",
                        "gemma2-9b-it"
                      ],
                      "description": "Model to use for content generation",
                      "x-zui": {
                        "placeholder": "mixtral-8x7b-32768"
                      }
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "reasoningEffort": {
                  "type": "string",
                  "enum": [
                    "low",
                    "medium",
                    "high"
                  ],
                  "x-zui": {

                  }
                },
                "systemPrompt": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "enum": [
                          "user",
                          "assistant"
                        ],
                        "x-zui": {

                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "text",
                          "tool_calls",
                          "tool_result",
                          "multipart"
                        ],
                        "x-zui": {

                        },
                        "default": "text"
                      },
                      "toolCalls": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "type": {
                              "type": "string",
                              "const": "function",
                              "x-zui": {

                              }
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "arguments": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": {
                                        "x-zui": {

                                        }
                                      },
                                      "x-zui": {

                                      }
                                    },
                                    {
                                      "type": "null",
                                      "x-zui": {

                                      }
                                    }
                                  ],
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "toolResultCallId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "image"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "mimeType": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "text": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "url": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null",
                            "x-zui": {

                            }
                          }
                        ],
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "role",
                      "content"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "responseFormat": {
                  "type": "string",
                  "enum": [
                    "text",
                    "json_object"
                  ],
                  "x-zui": {

                  }
                },
                "maxTokens": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "temperature": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 1
                },
                "topP": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 1
                },
                "stopSequences": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "tools": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "function",
                        "x-zui": {

                        }
                      },
                      "function": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "argumentsSchema": {
                            "type": "object",
                            "properties": {

                            },
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "function"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "toolChoice": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "auto",
                        "specific",
                        "any",
                        "none",
                        ""
                      ],
                      "x-zui": {

                      }
                    },
                    "functionName": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "userId": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "debug": {
                  "type": "boolean",
                  "x-zui": {

                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "promptSource": {
                      "type": "string",
                      "x-zui": {

                      }
                    },
                    "promptCategory": {
                      "type": "string",
                      "x-zui": {

                      }
                    },
                    "integrationName": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "messages"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "provider": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "model": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "choices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "text",
                          "tool_calls",
                          "tool_result",
                          "multipart"
                        ],
                        "x-zui": {

                        },
                        "default": "text"
                      },
                      "toolCalls": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "type": {
                              "type": "string",
                              "const": "function",
                              "x-zui": {

                              }
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "arguments": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": {
                                        "x-zui": {

                                        }
                                      },
                                      "x-zui": {

                                      }
                                    },
                                    {
                                      "type": "null",
                                      "x-zui": {

                                      }
                                    }
                                  ],
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "toolResultCallId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "image"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "mimeType": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "text": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "url": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null",
                            "x-zui": {

                            }
                          }
                        ],
                        "x-zui": {

                        }
                      },
                      "role": {
                        "type": "string",
                        "const": "assistant",
                        "x-zui": {

                        }
                      },
                      "index": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "stopReason": {
                        "type": "string",
                        "enum": [
                          "stop",
                          "max_tokens",
                          "tool_calls",
                          "content_filter",
                          "other"
                        ],
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "content",
                      "role",
                      "index",
                      "stopReason"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "usage": {
                  "type": "object",
                  "properties": {
                    "inputTokens": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "inputCost": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "outputTokens": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "outputCost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "inputTokens",
                    "inputCost",
                    "outputTokens",
                    "outputCost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "botpress": {
                  "type": "object",
                  "properties": {
                    "cost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "cost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "id",
                "provider",
                "model",
                "choices",
                "usage",
                "botpress"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listLanguageModels": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "models": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "recommended",
                                "deprecated",
                                "general-purpose",
                                "low-cost",
                                "vision",
                                "coding",
                                "agents",
                                "function-calling",
                                "roleplay",
                                "storytelling",
                                "reasoning",
                                "preview"
                              ],
                              "x-zui": {

                              }
                            },
                            "x-zui": {

                            }
                          },
                          "input": {
                            "type": "object",
                            "properties": {
                              "maxTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "costPer1MTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "maxTokens",
                              "costPer1MTokens"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          },
                          "output": {
                            "type": "object",
                            "properties": {
                              "maxTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "costPer1MTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "maxTokens",
                              "costPer1MTokens"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "tags",
                          "input",
                          "output"
                        ],
                        "x-zui": {

                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "enum": [
                              "deepseek-r1-distill-llama-70b",
                              "llama-3.3-70b-versatile",
                              "llama-3.2-1b-preview",
                              "llama-3.2-3b-preview",
                              "llama-3.2-11b-vision-preview",
                              "llama-3.2-90b-vision-preview",
                              "llama-3.1-8b-instant",
                              "llama3-8b-8192",
                              "llama3-70b-8192",
                              "gemma2-9b-it"
                            ],
                            "description": "Model to use for content generation",
                            "x-zui": {
                              "placeholder": "mixtral-8x7b-32768"
                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "x-zui": {

                        }
                      }
                    ],
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "models"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listSpeechToTextModels": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "models": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "costPerMinute": {
                            "type": "number",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "costPerMinute"
                        ],
                        "x-zui": {

                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "x-zui": {

                        }
                      }
                    ],
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "models"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "transcribeAudio": {
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "fileUrl": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "language": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "prompt": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "temperature": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 0
                }
              },
              "required": [
                "fileUrl"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "language": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "duration": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "segments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "id": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "seek": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "start": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "end": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "tokens": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "temperature": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "avg_logprob": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "compression_ratio": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "no_speech_prob": {
                        "type": "number",
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "text",
                      "id",
                      "seek",
                      "start",
                      "end",
                      "tokens",
                      "temperature",
                      "avg_logprob",
                      "compression_ratio",
                      "no_speech_prob"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "model": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "cost": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "botpress": {
                  "type": "object",
                  "properties": {
                    "cost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "cost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "language",
                "duration",
                "segments",
                "model",
                "cost",
                "botpress"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        }
      },
      "events": {

      },
      "user": {
        "tags": {

        },
        "creation": {
          "enabled": false,
          "requiredTags": []
        }
      },
      "identifier": {

      },
      "states": {

      },
      "channels": {

      },
      "entities": {
        "speechToTextModelRef": {
          "schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "x-zui": {

                }
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "modelRef": {
          "schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "enum": [
                  "deepseek-r1-distill-llama-70b",
                  "llama-3.3-70b-versatile",
                  "llama-3.2-1b-preview",
                  "llama-3.2-3b-preview",
                  "llama-3.2-11b-vision-preview",
                  "llama-3.2-90b-vision-preview",
                  "llama-3.1-8b-instant",
                  "llama3-8b-8192",
                  "llama3-70b-8192",
                  "gemma2-9b-it"
                ],
                "description": "Model to use for content generation",
                "x-zui": {
                  "placeholder": "mixtral-8x7b-32768"
                }
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "dev": false,
      "secrets": [
        "GROQ_API_KEY"
      ],
      "ownerWorkspace": {
        "id": "6a76fa10-e150-4ff6-8f59-a300feec06c1",
        "handle": "botpress",
        "name": "Botpress Team"
      },
      "meta": {
        "views": 1190,
        "installs": 38760
      }
    },
    "cerebras": {
      "id": "intver_01JQQ20AHPJ5CTVHGH1W2TRQBW",
      "name": "cerebras",
      "title": "Cerebras",
      "description": "Get access to a curated list of Cerebras models for content generation and chat completions within your bot.",
      "iconUrl": "https://mediafiles.botpress.cloud/int_01J7C7K08J94KBY5B9G3YTQ1SF/integration/icon.svg",
      "readmeUrl": "https://mediafiles.botpress.cloud/intver_01JQQ20AHPJ5CTVHGH1W2TRQBW/integration-version/readme.md",
      "createdAt": "2025-03-31T21:34:02.497Z",
      "updatedAt": "2025-03-31T21:34:02.497Z",
      "version": "6.0.0",
      "public": true,
      "url": "",
      "verificationStatus": "unapproved",
      "interfaces": {
        "llm\u003CmodelRef\u003E": {
          "id": "b759e577-2ce7-451a-abff-68085b224985",
          "name": "llm",
          "version": "8.0.0",
          "createdAt": "2025-03-31T21:34:02.448Z",
          "updatedAt": "2025-03-31T21:34:02.448Z",
          "entities": {
            "modelRef": {
              "name": "modelRef"
            }
          },
          "actions": {
            "generateContent": {
              "name": "generateContent"
            },
            "listLanguageModels": {
              "name": "listLanguageModels"
            }
          },
          "events": {

          },
          "channels": {

          }
        }
      },
      "configuration": {
        "identifier": {
          "required": false
        },
        "schema": {
          "type": "object"
        }
      },
      "configurations": {

      },
      "actions": {
        "generateContent": {
          "billable": true,
          "cacheable": true,
          "input": {
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "enum": [
                        "llama3.1-8b",
                        "llama3.3-70b"
                      ],
                      "description": "Model to use for content generation",
                      "x-zui": {
                        "placeholder": "llama3.1-8b"
                      }
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "reasoningEffort": {
                  "type": "string",
                  "enum": [
                    "low",
                    "medium",
                    "high"
                  ],
                  "x-zui": {

                  }
                },
                "systemPrompt": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "enum": [
                          "user",
                          "assistant"
                        ],
                        "x-zui": {

                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "text",
                          "tool_calls",
                          "tool_result",
                          "multipart"
                        ],
                        "x-zui": {

                        },
                        "default": "text"
                      },
                      "toolCalls": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "type": {
                              "type": "string",
                              "const": "function",
                              "x-zui": {

                              }
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "arguments": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": {
                                        "x-zui": {

                                        }
                                      },
                                      "x-zui": {

                                      }
                                    },
                                    {
                                      "type": "null",
                                      "x-zui": {

                                      }
                                    }
                                  ],
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "toolResultCallId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "image"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "mimeType": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "text": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "url": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null",
                            "x-zui": {

                            }
                          }
                        ],
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "role",
                      "content"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "responseFormat": {
                  "type": "string",
                  "enum": [
                    "text",
                    "json_object"
                  ],
                  "x-zui": {

                  }
                },
                "maxTokens": {
                  "type": "number",
                  "x-zui": {

                  }
                },
                "temperature": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 1
                },
                "topP": {
                  "type": "number",
                  "x-zui": {

                  },
                  "default": 1
                },
                "stopSequences": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "tools": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "function",
                        "x-zui": {

                        }
                      },
                      "function": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "argumentsSchema": {
                            "type": "object",
                            "properties": {

                            },
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "additionalProperties": false,
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "type",
                      "function"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "toolChoice": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "auto",
                        "specific",
                        "any",
                        "none",
                        ""
                      ],
                      "x-zui": {

                      }
                    },
                    "functionName": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "userId": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "debug": {
                  "type": "boolean",
                  "x-zui": {

                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "promptSource": {
                      "type": "string",
                      "x-zui": {

                      }
                    },
                    "promptCategory": {
                      "type": "string",
                      "x-zui": {

                      }
                    },
                    "integrationName": {
                      "type": "string",
                      "x-zui": {

                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "messages"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "provider": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "model": {
                  "type": "string",
                  "x-zui": {

                  }
                },
                "choices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "text",
                          "tool_calls",
                          "tool_result",
                          "multipart"
                        ],
                        "x-zui": {

                        },
                        "default": "text"
                      },
                      "toolCalls": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-zui": {

                              }
                            },
                            "type": {
                              "type": "string",
                              "const": "function",
                              "x-zui": {

                              }
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "x-zui": {

                                  }
                                },
                                "arguments": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": {
                                        "x-zui": {

                                        }
                                      },
                                      "x-zui": {

                                      }
                                    },
                                    {
                                      "type": "null",
                                      "x-zui": {

                                      }
                                    }
                                  ],
                                  "x-zui": {

                                  }
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ],
                              "additionalProperties": false,
                              "x-zui": {

                              }
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ],
                          "additionalProperties": false,
                          "x-zui": {

                          }
                        },
                        "x-zui": {

                        }
                      },
                      "toolResultCallId": {
                        "type": "string",
                        "x-zui": {

                        }
                      },
                      "content": {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "string",
                                "x-zui": {

                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "text",
                                        "image"
                                      ],
                                      "x-zui": {

                                      }
                                    },
                                    "mimeType": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "text": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    },
                                    "url": {
                                      "type": "string",
                                      "x-zui": {

                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "additionalProperties": false,
                                  "x-zui": {

                                  }
                                },
                                "x-zui": {

                                }
                              }
                            ],
                            "x-zui": {

                            }
                          },
                          {
                            "type": "null",
                            "x-zui": {

                            }
                          }
                        ],
                        "x-zui": {

                        }
                      },
                      "role": {
                        "type": "string",
                        "const": "assistant",
                        "x-zui": {

                        }
                      },
                      "index": {
                        "type": "number",
                        "x-zui": {

                        }
                      },
                      "stopReason": {
                        "type": "string",
                        "enum": [
                          "stop",
                          "max_tokens",
                          "tool_calls",
                          "content_filter",
                          "other"
                        ],
                        "x-zui": {

                        }
                      }
                    },
                    "required": [
                      "content",
                      "role",
                      "index",
                      "stopReason"
                    ],
                    "additionalProperties": false,
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                },
                "usage": {
                  "type": "object",
                  "properties": {
                    "inputTokens": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "inputCost": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "outputTokens": {
                      "type": "number",
                      "x-zui": {

                      }
                    },
                    "outputCost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "inputTokens",
                    "inputCost",
                    "outputTokens",
                    "outputCost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                },
                "botpress": {
                  "type": "object",
                  "properties": {
                    "cost": {
                      "type": "number",
                      "x-zui": {

                      }
                    }
                  },
                  "required": [
                    "cost"
                  ],
                  "additionalProperties": false,
                  "x-zui": {

                  }
                }
              },
              "required": [
                "id",
                "provider",
                "model",
                "choices",
                "usage",
                "botpress"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        },
        "listLanguageModels": {
          "billable": false,
          "cacheable": false,
          "input": {
            "schema": {
              "type": "object",
              "properties": {

              },
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "output": {
            "schema": {
              "type": "object",
              "properties": {
                "models": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "name": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "description": {
                            "type": "string",
                            "x-zui": {

                            }
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "recommended",
                                "deprecated",
                                "general-purpose",
                                "low-cost",
                                "vision",
                                "coding",
                                "agents",
                                "function-calling",
                                "roleplay",
                                "storytelling",
                                "reasoning",
                                "preview"
                              ],
                              "x-zui": {

                              }
                            },
                            "x-zui": {

                            }
                          },
                          "input": {
                            "type": "object",
                            "properties": {
                              "maxTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "costPer1MTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "maxTokens",
                              "costPer1MTokens"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          },
                          "output": {
                            "type": "object",
                            "properties": {
                              "maxTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              },
                              "costPer1MTokens": {
                                "type": "number",
                                "x-zui": {

                                }
                              }
                            },
                            "required": [
                              "maxTokens",
                              "costPer1MTokens"
                            ],
                            "additionalProperties": false,
                            "x-zui": {

                            }
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "tags",
                          "input",
                          "output"
                        ],
                        "x-zui": {

                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "enum": [
                              "llama3.1-8b",
                              "llama3.3-70b"
                            ],
                            "description": "Model to use for content generation",
                            "x-zui": {
                              "placeholder": "llama3.1-8b"
                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "x-zui": {

                        }
                      }
                    ],
                    "x-zui": {

                    }
                  },
                  "x-zui": {

                  }
                }
              },
              "required": [
                "models"
              ],
              "additionalProperties": false,
              "x-zui": {

              },
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          }
        }
      },
      "events": {

      },
      "user": {
        "tags": {

        },
        "creation": {
          "enabled": false,
          "requiredTags": []
        }
      },
      "identifier": {

      },
      "states": {

      },
      "channels": {

      },
      "entities": {
        "modelRef": {
          "schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "enum": [
                  "llama3.1-8b",
                  "llama3.3-70b"
                ],
                "description": "Model to use for content generation",
                "x-zui": {
                  "placeholder": "llama3.1-8b"
                }
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "x-zui": {

            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      },
      "dev": false,
      "secrets": [
        "CEREBRAS_API_KEY"
      ],
      "ownerWorkspace": {
        "id": "6a76fa10-e150-4ff6-8f59-a300feec06c1",
        "handle": "botpress",
        "name": "Botpress Team"
      },
      "meta": {
        "views": 0,
        "installs": 0
      }
    }
  },
  "capabilities": [],
  "identity": {
    "name": "government-helpdesk",
    "manual_instructions": "",
    "icon": {
      "type": "emoji",
      "emoji": "ü§ñ ",
      "background_color": "var(--orange-5)"
    },
    "ai_summary": {
      "value": "Chatbot named sparkling-eland provides concise information.",
      "input_hash": "7j8s9",
      "generated_at": "2025-02-26T18:41:46.789Z",
      "version": "1.0.0"
    }
  },
  "plugins": []
}